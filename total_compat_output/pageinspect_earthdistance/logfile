2023-07-25 11:32:48.092 UTC [737831] LOG:  starting PostgreSQL 15.3 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0, 64-bit
2023-07-25 11:32:48.092 UTC [737831] LOG:  listening on IPv4 address "127.0.0.1", port 5432
2023-07-25 11:32:48.107 UTC [737831] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2023-07-25 11:32:48.123 UTC [737834] LOG:  database system was shut down at 2023-07-25 11:32:47 UTC
2023-07-25 11:32:48.135 UTC [737831] LOG:  database system is ready to accept connections
2023-07-25 11:32:48.342 UTC [737853] ERROR:  block number 1 is out of range for relation "test1"
2023-07-25 11:32:48.342 UTC [737853] STATEMENT:  SELECT octet_length(get_raw_page('test1', 'main', 1)) AS main_1;
2023-07-25 11:32:48.345 UTC [737853] ERROR:  block number 1 is out of range for relation "test1"
2023-07-25 11:32:48.345 UTC [737853] STATEMENT:  SELECT octet_length(get_raw_page('test1', 'vm', 1)) AS vm_1;
2023-07-25 11:32:48.345 UTC [737853] ERROR:  invalid block number
2023-07-25 11:32:48.345 UTC [737853] STATEMENT:  SELECT octet_length(get_raw_page('test1', 'main', -1));
2023-07-25 11:32:48.346 UTC [737853] ERROR:  relation "xxx" does not exist
2023-07-25 11:32:48.346 UTC [737853] STATEMENT:  SELECT octet_length(get_raw_page('xxx', 'main', 0));
2023-07-25 11:32:48.346 UTC [737853] ERROR:  invalid fork name
2023-07-25 11:32:48.346 UTC [737853] HINT:  Valid fork names are "main", "fsm", "vm", and "init".
2023-07-25 11:32:48.346 UTC [737853] STATEMENT:  SELECT octet_length(get_raw_page('test1', 'xxx', 0));
2023-07-25 11:32:48.349 UTC [737853] ERROR:  invalid block number
2023-07-25 11:32:48.349 UTC [737853] STATEMENT:  SELECT page_checksum(get_raw_page('test1', 0), -1);
2023-07-25 11:32:48.371 UTC [737853] ERROR:  cannot get raw page from relation "test_partitioned"
2023-07-25 11:32:48.371 UTC [737853] DETAIL:  This operation is not supported for partitioned tables.
2023-07-25 11:32:48.371 UTC [737853] STATEMENT:  select get_raw_page('test_partitioned', 0);
2023-07-25 11:32:48.372 UTC [737853] ERROR:  cannot get raw page from relation "test_partitioned_index"
2023-07-25 11:32:48.372 UTC [737853] DETAIL:  This operation is not supported for partitioned indexes.
2023-07-25 11:32:48.372 UTC [737853] STATEMENT:  select get_raw_page('test_partitioned_index', 0);
2023-07-25 11:32:48.388 UTC [737853] ERROR:  block number 0 is out of range for relation "test_part1"
2023-07-25 11:32:48.388 UTC [737853] STATEMENT:  select get_raw_page('test_part1', 0);
2023-07-25 11:32:48.409 UTC [737853] ERROR:  invalid page size
2023-07-25 11:32:48.409 UTC [737853] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.409 UTC [737853] STATEMENT:  SELECT fsm_page_contents('aaa'::bytea);
2023-07-25 11:32:48.410 UTC [737853] ERROR:  invalid page size
2023-07-25 11:32:48.410 UTC [737853] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.410 UTC [737853] STATEMENT:  SELECT page_checksum('bbb'::bytea, 0);
2023-07-25 11:32:48.410 UTC [737853] ERROR:  invalid page size
2023-07-25 11:32:48.410 UTC [737853] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.410 UTC [737853] STATEMENT:  SELECT page_header('ccc'::bytea);
2023-07-25 11:32:48.459 UTC [737857] ERROR:  invalid block number
2023-07-25 11:32:48.459 UTC [737857] STATEMENT:  SELECT * FROM bt_page_stats('test1_a_idx', -1);
2023-07-25 11:32:48.459 UTC [737857] ERROR:  block 0 is a meta page
2023-07-25 11:32:48.459 UTC [737857] STATEMENT:  SELECT * FROM bt_page_stats('test1_a_idx', 0);
2023-07-25 11:32:48.460 UTC [737857] ERROR:  block number out of range
2023-07-25 11:32:48.460 UTC [737857] STATEMENT:  SELECT * FROM bt_page_stats('test1_a_idx', 2);
2023-07-25 11:32:48.460 UTC [737857] ERROR:  invalid block number
2023-07-25 11:32:48.460 UTC [737857] STATEMENT:  SELECT * FROM bt_page_items('test1_a_idx', -1);
2023-07-25 11:32:48.460 UTC [737857] ERROR:  block 0 is a meta page
2023-07-25 11:32:48.460 UTC [737857] STATEMENT:  SELECT * FROM bt_page_items('test1_a_idx', 0);
2023-07-25 11:32:48.460 UTC [737857] ERROR:  block number out of range
2023-07-25 11:32:48.460 UTC [737857] STATEMENT:  SELECT * FROM bt_page_items('test1_a_idx', 2);
2023-07-25 11:32:48.461 UTC [737857] ERROR:  invalid block number
2023-07-25 11:32:48.461 UTC [737857] STATEMENT:  SELECT * FROM bt_page_items(get_raw_page('test1_a_idx', -1));
2023-07-25 11:32:48.461 UTC [737857] ERROR:  block is a meta page
2023-07-25 11:32:48.461 UTC [737857] STATEMENT:  SELECT * FROM bt_page_items(get_raw_page('test1_a_idx', 0));
2023-07-25 11:32:48.461 UTC [737857] ERROR:  block number 2 is out of range for relation "test1_a_idx"
2023-07-25 11:32:48.461 UTC [737857] STATEMENT:  SELECT * FROM bt_page_items(get_raw_page('test1_a_idx', 2));
2023-07-25 11:32:48.465 UTC [737857] ERROR:  "test1_a_hash" is not a btree index
2023-07-25 11:32:48.465 UTC [737857] STATEMENT:  SELECT bt_metap('test1_a_hash');
2023-07-25 11:32:48.466 UTC [737857] ERROR:  "test1_a_hash" is not a btree index
2023-07-25 11:32:48.466 UTC [737857] STATEMENT:  SELECT bt_page_stats('test1_a_hash', 0);
2023-07-25 11:32:48.466 UTC [737857] ERROR:  "test1_a_hash" is not a btree index
2023-07-25 11:32:48.466 UTC [737857] STATEMENT:  SELECT bt_page_items('test1_a_hash', 0);
2023-07-25 11:32:48.466 UTC [737857] ERROR:  block is a meta page
2023-07-25 11:32:48.466 UTC [737857] STATEMENT:  SELECT bt_page_items(get_raw_page('test1_a_hash', 0));
2023-07-25 11:32:48.471 UTC [737857] ERROR:  block is not a valid btree leaf page
2023-07-25 11:32:48.471 UTC [737857] STATEMENT:  SELECT bt_page_items(get_raw_page('test1_b_gist', 0));
2023-07-25 11:32:48.471 UTC [737857] ERROR:  invalid page size
2023-07-25 11:32:48.471 UTC [737857] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.471 UTC [737857] STATEMENT:  SELECT bt_page_items('aaa'::bytea);
2023-07-25 11:32:48.476 UTC [737857] ERROR:  input page is not a valid btree page
2023-07-25 11:32:48.476 UTC [737857] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.476 UTC [737857] STATEMENT:  SELECT bt_page_items(get_raw_page('test1', 0));
2023-07-25 11:32:48.476 UTC [737857] ERROR:  input page is not a valid btree page
2023-07-25 11:32:48.476 UTC [737857] DETAIL:  Expected special size 16, got 8.
2023-07-25 11:32:48.476 UTC [737857] STATEMENT:  SELECT bt_page_items(get_raw_page('test1_a_brin', 0));
2023-07-25 11:32:48.533 UTC [737861] ERROR:  page is not a BRIN page of type "metapage"
2023-07-25 11:32:48.533 UTC [737861] DETAIL:  Expected special type 0000f091, got 0000f092.
2023-07-25 11:32:48.533 UTC [737861] STATEMENT:  SELECT * FROM brin_metapage_info(get_raw_page('test1_a_idx', 1));
2023-07-25 11:32:48.534 UTC [737861] ERROR:  page is not a BRIN page of type "revmap"
2023-07-25 11:32:48.534 UTC [737861] DETAIL:  Expected special type 0000f092, got 0000f091.
2023-07-25 11:32:48.534 UTC [737861] STATEMENT:  SELECT * FROM brin_revmap_data(get_raw_page('test1_a_idx', 0)) LIMIT 5;
2023-07-25 11:32:48.549 UTC [737861] ERROR:  "test1_a_btree" is not a BRIN index
2023-07-25 11:32:48.549 UTC [737861] STATEMENT:  SELECT brin_page_items(get_raw_page('test1_a_btree', 0), 'test1_a_btree');
2023-07-25 11:32:48.549 UTC [737861] ERROR:  input page is not a valid BRIN page
2023-07-25 11:32:48.549 UTC [737861] DETAIL:  Expected special size 8, got 16.
2023-07-25 11:32:48.549 UTC [737861] STATEMENT:  SELECT brin_page_items(get_raw_page('test1_a_btree', 0), 'test1_a_idx');
2023-07-25 11:32:48.550 UTC [737861] ERROR:  input page is not a valid BRIN page
2023-07-25 11:32:48.550 UTC [737861] DETAIL:  Expected special size 8, got 0.
2023-07-25 11:32:48.550 UTC [737861] STATEMENT:  SELECT brin_page_type(get_raw_page('test1', 0));
2023-07-25 11:32:48.550 UTC [737861] ERROR:  input page is not a valid BRIN page
2023-07-25 11:32:48.550 UTC [737861] DETAIL:  Expected special size 8, got 0.
2023-07-25 11:32:48.550 UTC [737861] STATEMENT:  SELECT * FROM brin_metapage_info(get_raw_page('test1', 0));
2023-07-25 11:32:48.551 UTC [737861] ERROR:  input page is not a valid BRIN page
2023-07-25 11:32:48.551 UTC [737861] DETAIL:  Expected special size 8, got 0.
2023-07-25 11:32:48.551 UTC [737861] STATEMENT:  SELECT * FROM brin_revmap_data(get_raw_page('test1', 0));
2023-07-25 11:32:48.607 UTC [737865] ERROR:  input page is not a GIN metapage
2023-07-25 11:32:48.607 UTC [737865] DETAIL:  Flags 0002, expected 0008
2023-07-25 11:32:48.607 UTC [737865] STATEMENT:  SELECT * FROM gin_metapage_info(get_raw_page('test1_y_idx', 1));
2023-07-25 11:32:48.609 UTC [737865] ERROR:  input page is not a compressed GIN data leaf page
2023-07-25 11:32:48.609 UTC [737865] DETAIL:  Flags 0002, expected 0083
2023-07-25 11:32:48.609 UTC [737865] STATEMENT:  SELECT * FROM gin_leafpage_items(get_raw_page('test1_y_idx', 1));
2023-07-25 11:32:48.833 UTC [737865] ERROR:  invalid page size
2023-07-25 11:32:48.833 UTC [737865] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.833 UTC [737865] STATEMENT:  SELECT gin_leafpage_items('aaa'::bytea);
2023-07-25 11:32:48.833 UTC [737865] ERROR:  invalid page size
2023-07-25 11:32:48.833 UTC [737865] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.833 UTC [737865] STATEMENT:  SELECT gin_metapage_info('bbb'::bytea);
2023-07-25 11:32:48.834 UTC [737865] ERROR:  invalid page size
2023-07-25 11:32:48.834 UTC [737865] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.834 UTC [737865] STATEMENT:  SELECT gin_page_opaque_info('ccc'::bytea);
2023-07-25 11:32:48.834 UTC [737865] ERROR:  input page is not a valid GIN metapage
2023-07-25 11:32:48.834 UTC [737865] DETAIL:  Expected special size 8, got 0.
2023-07-25 11:32:48.834 UTC [737865] STATEMENT:  SELECT * FROM gin_metapage_info(get_raw_page('test1', 0));
2023-07-25 11:32:48.834 UTC [737865] ERROR:  input page is not a valid GIN data leaf page
2023-07-25 11:32:48.834 UTC [737865] DETAIL:  Expected special size 8, got 0.
2023-07-25 11:32:48.834 UTC [737865] STATEMENT:  SELECT * FROM gin_page_opaque_info(get_raw_page('test1', 0));
2023-07-25 11:32:48.835 UTC [737865] ERROR:  input page is not a valid GIN data leaf page
2023-07-25 11:32:48.835 UTC [737865] DETAIL:  Expected special size 8, got 0.
2023-07-25 11:32:48.835 UTC [737865] STATEMENT:  SELECT * FROM gin_leafpage_items(get_raw_page('test1', 0));
2023-07-25 11:32:48.898 UTC [737869] ERROR:  "test_gist_btree" is not a GiST index
2023-07-25 11:32:48.898 UTC [737869] STATEMENT:  SELECT gist_page_items(get_raw_page('test_gist_btree', 0), 'test_gist_btree');
2023-07-25 11:32:48.899 UTC [737869] ERROR:  input page is not a valid GiST page
2023-07-25 11:32:48.899 UTC [737869] DETAIL:  Expected 0000ff81, got 00000000.
2023-07-25 11:32:48.899 UTC [737869] STATEMENT:  SELECT gist_page_items(get_raw_page('test_gist_btree', 0), 'test_gist_idx');
2023-07-25 11:32:48.899 UTC [737869] ERROR:  invalid page size
2023-07-25 11:32:48.899 UTC [737869] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.899 UTC [737869] STATEMENT:  SELECT gist_page_items_bytea('aaa'::bytea);
2023-07-25 11:32:48.899 UTC [737869] ERROR:  invalid page size
2023-07-25 11:32:48.899 UTC [737869] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.899 UTC [737869] STATEMENT:  SELECT gist_page_items('aaa'::bytea, 'test_gist_idx'::regclass);
2023-07-25 11:32:48.900 UTC [737869] ERROR:  invalid page size
2023-07-25 11:32:48.900 UTC [737869] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.900 UTC [737869] STATEMENT:  SELECT gist_page_opaque_info('aaa'::bytea);
2023-07-25 11:32:48.900 UTC [737869] ERROR:  input page is not a valid GiST page
2023-07-25 11:32:48.900 UTC [737869] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.900 UTC [737869] STATEMENT:  SELECT * FROM gist_page_opaque_info(get_raw_page('test_gist', 0));
2023-07-25 11:32:48.900 UTC [737869] ERROR:  input page is not a valid GiST page
2023-07-25 11:32:48.900 UTC [737869] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.900 UTC [737869] STATEMENT:  SELECT gist_page_items_bytea(get_raw_page('test_gist', 0));
2023-07-25 11:32:48.901 UTC [737869] ERROR:  input page is not a valid GiST page
2023-07-25 11:32:48.901 UTC [737869] DETAIL:  Expected 0000ff81, got 00000000.
2023-07-25 11:32:48.901 UTC [737869] STATEMENT:  SELECT gist_page_items_bytea(get_raw_page('test_gist_btree', 0));
2023-07-25 11:32:48.946 UTC [737873] ERROR:  block number 6 is out of range for relation "test_hash_a_idx"
2023-07-25 11:32:48.946 UTC [737873] STATEMENT:  SELECT hash_page_type(get_raw_page('test_hash_a_idx', 6));
2023-07-25 11:32:48.946 UTC [737873] ERROR:  invalid block number
2023-07-25 11:32:48.946 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', -1);
2023-07-25 11:32:48.946 UTC [737873] ERROR:  invalid overflow block number 0
2023-07-25 11:32:48.946 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 0);
2023-07-25 11:32:48.947 UTC [737873] ERROR:  invalid overflow block number 1
2023-07-25 11:32:48.947 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 1);
2023-07-25 11:32:48.947 UTC [737873] ERROR:  invalid overflow block number 2
2023-07-25 11:32:48.947 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 2);
2023-07-25 11:32:48.947 UTC [737873] ERROR:  invalid overflow block number 3
2023-07-25 11:32:48.947 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 3);
2023-07-25 11:32:48.947 UTC [737873] ERROR:  invalid overflow block number 4
2023-07-25 11:32:48.947 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 4);
2023-07-25 11:32:48.947 UTC [737873] ERROR:  invalid overflow block number 5
2023-07-25 11:32:48.947 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 5);
2023-07-25 11:32:48.948 UTC [737873] ERROR:  block number 6 is out of range for relation "test_hash_a_idx"
2023-07-25 11:32:48.948 UTC [737873] STATEMENT:  SELECT * FROM hash_bitmap_info('test_hash_a_idx', 6);
2023-07-25 11:32:48.949 UTC [737873] ERROR:  page is not a hash meta page
2023-07-25 11:32:48.949 UTC [737873] STATEMENT:  SELECT magic, version, ntuples, bsize, bmsize, bmshift, maxbucket, highmask,
	lowmask, ovflpoint, firstfree, nmaps, procid, spares, mapp FROM
	hash_metapage_info(get_raw_page('test_hash_a_idx', 1));
2023-07-25 11:32:48.949 UTC [737873] ERROR:  page is not a hash meta page
2023-07-25 11:32:48.949 UTC [737873] STATEMENT:  SELECT magic, version, ntuples, bsize, bmsize, bmshift, maxbucket, highmask,
	lowmask, ovflpoint, firstfree, nmaps, procid, spares, mapp FROM
	hash_metapage_info(get_raw_page('test_hash_a_idx', 2));
2023-07-25 11:32:48.950 UTC [737873] ERROR:  page is not a hash meta page
2023-07-25 11:32:48.950 UTC [737873] STATEMENT:  SELECT magic, version, ntuples, bsize, bmsize, bmshift, maxbucket, highmask,
	lowmask, ovflpoint, firstfree, nmaps, procid, spares, mapp FROM
	hash_metapage_info(get_raw_page('test_hash_a_idx', 3));
2023-07-25 11:32:48.950 UTC [737873] ERROR:  page is not a hash meta page
2023-07-25 11:32:48.950 UTC [737873] STATEMENT:  SELECT magic, version, ntuples, bsize, bmsize, bmshift, maxbucket, highmask,
	lowmask, ovflpoint, firstfree, nmaps, procid, spares, mapp FROM
	hash_metapage_info(get_raw_page('test_hash_a_idx', 4));
2023-07-25 11:32:48.950 UTC [737873] ERROR:  page is not a hash meta page
2023-07-25 11:32:48.950 UTC [737873] STATEMENT:  SELECT magic, version, ntuples, bsize, bmsize, bmshift, maxbucket, highmask,
	lowmask, ovflpoint, firstfree, nmaps, procid, spares, mapp FROM
	hash_metapage_info(get_raw_page('test_hash_a_idx', 5));
2023-07-25 11:32:48.951 UTC [737873] ERROR:  page is not a hash bucket or overflow page
2023-07-25 11:32:48.951 UTC [737873] STATEMENT:  SELECT live_items, dead_items, page_size, hasho_prevblkno, hasho_nextblkno,
	hasho_bucket, hasho_flag, hasho_page_id FROM
	hash_page_stats(get_raw_page('test_hash_a_idx', 0));
2023-07-25 11:32:48.953 UTC [737873] ERROR:  page is not a hash bucket or overflow page
2023-07-25 11:32:48.953 UTC [737873] STATEMENT:  SELECT live_items, dead_items, page_size, hasho_prevblkno, hasho_nextblkno,
	hasho_bucket, hasho_flag, hasho_page_id FROM
	hash_page_stats(get_raw_page('test_hash_a_idx', 5));
2023-07-25 11:32:48.953 UTC [737873] ERROR:  page is not a hash bucket or overflow page
2023-07-25 11:32:48.953 UTC [737873] STATEMENT:  SELECT * FROM hash_page_items(get_raw_page('test_hash_a_idx', 0));
2023-07-25 11:32:48.955 UTC [737873] ERROR:  page is not a hash bucket or overflow page
2023-07-25 11:32:48.955 UTC [737873] STATEMENT:  SELECT * FROM hash_page_items(get_raw_page('test_hash_a_idx', 5));
2023-07-25 11:32:48.967 UTC [737873] ERROR:  "test_hash_a_btree" is not a hash index
2023-07-25 11:32:48.967 UTC [737873] STATEMENT:  SELECT hash_bitmap_info('test_hash_a_btree', 0);
2023-07-25 11:32:48.967 UTC [737873] ERROR:  invalid page size
2023-07-25 11:32:48.967 UTC [737873] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.967 UTC [737873] STATEMENT:  SELECT hash_metapage_info('aaa'::bytea);
2023-07-25 11:32:48.968 UTC [737873] ERROR:  invalid page size
2023-07-25 11:32:48.968 UTC [737873] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.968 UTC [737873] STATEMENT:  SELECT hash_page_items('bbb'::bytea);
2023-07-25 11:32:48.968 UTC [737873] ERROR:  invalid page size
2023-07-25 11:32:48.968 UTC [737873] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.968 UTC [737873] STATEMENT:  SELECT hash_page_stats('ccc'::bytea);
2023-07-25 11:32:48.969 UTC [737873] ERROR:  invalid page size
2023-07-25 11:32:48.969 UTC [737873] DETAIL:  Expected 8192 bytes, got 3.
2023-07-25 11:32:48.969 UTC [737873] STATEMENT:  SELECT hash_page_type('ddd'::bytea);
2023-07-25 11:32:48.969 UTC [737873] ERROR:  input page is not a valid hash page
2023-07-25 11:32:48.969 UTC [737873] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.969 UTC [737873] STATEMENT:  SELECT hash_metapage_info(get_raw_page('test_hash', 0));
2023-07-25 11:32:48.970 UTC [737873] ERROR:  input page is not a valid hash page
2023-07-25 11:32:48.970 UTC [737873] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.970 UTC [737873] STATEMENT:  SELECT hash_page_items(get_raw_page('test_hash', 0));
2023-07-25 11:32:48.970 UTC [737873] ERROR:  input page is not a valid hash page
2023-07-25 11:32:48.970 UTC [737873] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.970 UTC [737873] STATEMENT:  SELECT hash_page_stats(get_raw_page('test_hash', 0));
2023-07-25 11:32:48.971 UTC [737873] ERROR:  input page is not a valid hash page
2023-07-25 11:32:48.971 UTC [737873] DETAIL:  Expected special size 16, got 0.
2023-07-25 11:32:48.971 UTC [737873] STATEMENT:  SELECT hash_page_type(get_raw_page('test_hash', 0));
2023-07-25 11:32:48.972 UTC [737873] ERROR:  page is not a hash meta page
2023-07-25 11:32:48.972 UTC [737873] STATEMENT:  SELECT hash_metapage_info(decode(repeat('00', 8192), 'hex'));
2023-07-25 11:32:48.973 UTC [737873] ERROR:  page is not a hash bucket or overflow page
2023-07-25 11:32:48.973 UTC [737873] STATEMENT:  SELECT hash_page_items(decode(repeat('00', 8192), 'hex'));
2023-07-25 11:32:48.973 UTC [737873] ERROR:  page is not a hash bucket or overflow page
2023-07-25 11:32:48.973 UTC [737873] STATEMENT:  SELECT hash_page_stats(decode(repeat('00', 8192), 'hex'));
2023-07-25 11:32:49.253 UTC [737896] ERROR:  required extension "cube" is not installed
2023-07-25 11:32:49.253 UTC [737896] HINT:  Use CREATE EXTENSION ... CASCADE to install required extensions too.
2023-07-25 11:32:49.253 UTC [737896] STATEMENT:  CREATE EXTENSION earthdistance;
2023-07-25 11:32:49.311 UTC [737896] ERROR:  cannot drop extension cube because other objects depend on it
2023-07-25 11:32:49.311 UTC [737896] DETAIL:  extension earthdistance depends on extension cube
2023-07-25 11:32:49.311 UTC [737896] HINT:  Use DROP ... CASCADE to drop the dependent objects too.
2023-07-25 11:32:49.311 UTC [737896] STATEMENT:  drop extension cube;
2023-07-25 11:32:49.314 UTC [737896] ERROR:  cannot drop type cube because extension cube requires it
2023-07-25 11:32:49.314 UTC [737896] HINT:  You can drop extension cube instead.
2023-07-25 11:32:49.314 UTC [737896] STATEMENT:  drop type cube;
2023-07-25 11:32:49.320 UTC [737896] ERROR:  cannot drop extension cube because other objects depend on it
2023-07-25 11:32:49.320 UTC [737896] DETAIL:  column f1 of table foo depends on type cube
2023-07-25 11:32:49.320 UTC [737896] HINT:  Use DROP ... CASCADE to drop the dependent objects too.
2023-07-25 11:32:49.320 UTC [737896] STATEMENT:  drop extension cube;
2023-07-25 11:32:49.411 UTC [737896] ERROR:  cannot drop extension cube because other objects depend on it
2023-07-25 11:32:49.411 UTC [737896] DETAIL:  column f1 of table foo depends on type c.cube
2023-07-25 11:32:49.411 UTC [737896] HINT:  Use DROP ... CASCADE to drop the dependent objects too.
2023-07-25 11:32:49.411 UTC [737896] STATEMENT:  drop extension cube;
2023-07-25 11:32:49.412 UTC [737896] ERROR:  cannot drop schema c because other objects depend on it
2023-07-25 11:32:49.412 UTC [737896] DETAIL:  extension cube depends on schema c
	column f1 of table foo depends on type c.cube
2023-07-25 11:32:49.412 UTC [737896] HINT:  Use DROP ... CASCADE to drop the dependent objects too.
2023-07-25 11:32:49.412 UTC [737896] STATEMENT:  drop schema c;
