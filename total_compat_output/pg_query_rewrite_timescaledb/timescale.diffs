diff -u /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/test/expected/copy-15.out /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/build/test/results/copy-15.out
--- /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/test/expected/copy-15.out	2023-06-28 16:40:59.000000000 +0000
+++ /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/build/test/results/copy-15.out	2023-11-26 02:37:39.279702502 +0000
@@ -186,8 +186,18 @@
 \copy hyper_copy FROM data/copy_data.csv WITH csv header;
 SET client_min_messages TO DEBUG1;
 \copy hyper_copy FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
 SELECT count(*) FROM hyper_copy;
+LOG:  statement: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM hyper_copy;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
  count 
 -------
     50
@@ -195,9 +205,24 @@
 
 -- Limit number of open chunks
 SET timescaledb.max_open_chunks_per_insert = 1;
+LOG:  statement: SET timescaledb.max_open_chunks_per_insert = 1;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SET timescaledb.max_open_chunks_per_insert = 1;
+DEBUG:  pg_query_rewrite: pgqr_analyze: SET timescaledb.max_open_chunks_per_insert = 1;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SET timescaledb.max_open_chunks_per_insert = 1;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 \copy hyper_copy FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
 SELECT count(*) FROM hyper_copy;
+LOG:  statement: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM hyper_copy;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
  count 
 -------
     75
@@ -214,13 +239,129 @@
     RETURN NEW;
 END
 $BODY$;
+LOG:  statement: CREATE OR REPLACE FUNCTION empty_test_trigger()
+    RETURNS TRIGGER LANGUAGE PLPGSQL AS
+$BODY$
+BEGIN
+    IF TG_OP = 'DELETE' THEN
+        RETURN OLD;
+    END IF;
+    RETURN NEW;
+END
+$BODY$;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: CREATE OR REPLACE FUNCTION empty_test_trigger()
+    RETURNS TRIGGER LANGUAGE PLPGSQL AS
+$BODY$
+BEGIN
+    IF TG_OP = 'DELETE' THEN
+        RETURN OLD;
+    END IF;
+    RETURN NEW;
+END
+$BODY$;
+DEBUG:  pg_query_rewrite: pgqr_analyze: CREATE OR REPLACE FUNCTION empty_test_trigger()
+    RETURNS TRIGGER LANGUAGE PLPGSQL AS
+$BODY$
+BEGIN
+    IF TG_OP = 'DELETE' THEN
+        RETURN OLD;
+    END IF;
+    RETURN NEW;
+END
+$BODY$;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite CREATE OR REPLACE FUNCTION empty_test_trigger()
+    RETURNS TRIGGER LANGUAGE PLPGSQL AS
+$BODY$
+BEGIN
+    IF TG_OP = 'DELETE' THEN
+        RETURN OLD;
+    END IF;
+    RETURN NEW;
+END
+$BODY$;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 -- Before trigger (CIM_SINGLE should be used)
 CREATE TRIGGER hyper_copy_trigger_insert_before
     BEFORE INSERT ON hyper_copy
     FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+LOG:  statement: CREATE TRIGGER hyper_copy_trigger_insert_before
+    BEFORE INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: CREATE TRIGGER hyper_copy_trigger_insert_before
+    BEFORE INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+DEBUG:  pg_query_rewrite: pgqr_analyze: CREATE TRIGGER hyper_copy_trigger_insert_before
+    BEFORE INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite CREATE TRIGGER hyper_copy_trigger_insert_before
+    BEFORE INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 \copy hyper_copy FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using normal unbuffered copy operation (CIM_SINGLE) because triggers are defined on the destination table.
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM hyper_copy;
+LOG:  statement: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM hyper_copy;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
  count 
 -------
    100
@@ -228,15 +369,95 @@
 
 -- Suppress 'DEBUG:  EventTriggerInvoke XXXX' messages
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DROP TRIGGER hyper_copy_trigger_insert_before ON hyper_copy;
 SET client_min_messages TO DEBUG1;
 -- After trigger (CIM_MULTI_CONDITIONAL should be used)
 CREATE TRIGGER hyper_copy_trigger_insert_after
     AFTER INSERT ON hyper_copy
     FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+LOG:  statement: CREATE TRIGGER hyper_copy_trigger_insert_after
+    AFTER INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: CREATE TRIGGER hyper_copy_trigger_insert_after
+    AFTER INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+DEBUG:  pg_query_rewrite: pgqr_analyze: CREATE TRIGGER hyper_copy_trigger_insert_after
+    AFTER INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite CREATE TRIGGER hyper_copy_trigger_insert_after
+    AFTER INSERT ON hyper_copy
+    FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 \copy hyper_copy FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM hyper_copy;
+LOG:  statement: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM hyper_copy;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
  count 
 -------
    125
@@ -244,14 +465,29 @@
 
 -- Insert data into the chunks in random order
 COPY hyper_copy FROM STDIN DELIMITER ',' NULL AS 'null';
+LOG:  statement: COPY hyper_copy FROM STDIN DELIMITER ',' NULL AS 'null';
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY hyper_copy FROM STDIN DELIMITER ',' NULL AS 'null';
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY hyper_copy FROM STDIN DELIMITER ',' NULL AS 'null';
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY hyper_copy FROM STDIN DELIMITER ',' NULL AS 'null';: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
 SELECT count(*) FROM hyper_copy;
+LOG:  statement: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM hyper_copy;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM hyper_copy;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
  count 
 -------
    154
 (1 row)
 
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 RESET timescaledb.max_open_chunks_per_insert;
 ----------------------------------------------------------------
 -- Testing multi-buffer optimization
@@ -271,8 +507,18 @@
 \copy hyper_copy_noindex FROM data/copy_data.csv WITH csv header;
 SET client_min_messages TO DEBUG1;
 \copy hyper_copy_noindex FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy_noindex FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM hyper_copy_noindex;
  count 
 -------
@@ -286,8 +532,18 @@
 \copy hyper_copy_noindex FROM data/copy_data.csv WITH csv header;
 SET client_min_messages TO DEBUG1;
 \copy hyper_copy_noindex FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy_noindex FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using normal unbuffered copy operation (CIM_SINGLE) because triggers are defined on the destination table.
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM hyper_copy_noindex;
  count 
 -------
@@ -302,8 +558,18 @@
 \copy hyper_copy_noindex FROM data/copy_data.csv WITH csv header;
 SET client_min_messages TO DEBUG1;
 \copy hyper_copy_noindex FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  hyper_copy_noindex FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  hyper_copy_noindex FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM hyper_copy_noindex;
  count 
 -------
@@ -401,9 +667,31 @@
 -- are flushed before the trigger is executed.
 SET client_min_messages TO DEBUG1;
 \copy table_with_chunk_trigger FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  table_with_chunk_trigger FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  table_with_chunk_trigger FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  table_with_chunk_trigger FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  table_with_chunk_trigger FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM table_with_chunk_trigger
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM table_with_chunk_trigger
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM table_with_chunk_trigger: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: cnt
+DEBUG:  pg_query_rewrite: pgqr_analyze: cnt
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite cnt: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 WARNING:  Trigger counted 28 tuples in table table_with_chunk_trigger
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM table_with_chunk_trigger;
  count 
 -------
@@ -420,9 +708,31 @@
 -- tuples are imported. So, the trigger should report 50+25 = 75
 SET client_min_messages TO DEBUG1;
 \copy table_with_chunk_trigger FROM data/copy_data.csv WITH csv header;
+LOG:  statement: COPY  table_with_chunk_trigger FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  table_with_chunk_trigger FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  table_with_chunk_trigger FROM STDIN WITH csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  table_with_chunk_trigger FROM STDIN WITH csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: SELECT count(*) FROM table_with_chunk_trigger
+DEBUG:  pg_query_rewrite: pgqr_analyze: SELECT count(*) FROM table_with_chunk_trigger
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite SELECT count(*) FROM table_with_chunk_trigger: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: cnt
+DEBUG:  pg_query_rewrite: pgqr_analyze: cnt
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite cnt: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 WARNING:  Trigger counted 75 tuples in table table_with_chunk_trigger
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM table_with_chunk_trigger;
  count 
 -------
@@ -484,8 +794,18 @@
 \copy table_without_bf_trigger from data/copy_data.csv with csv header;
 SET client_min_messages TO DEBUG1;
 \copy table_without_bf_trigger from data/copy_data.csv with csv header;
+LOG:  statement: COPY  table_without_bf_trigger FROM STDIN with csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  table_without_bf_trigger FROM STDIN with csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  table_without_bf_trigger FROM STDIN with csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  table_without_bf_trigger FROM STDIN with csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM table_without_bf_trigger;
  count 
 -------
@@ -498,8 +818,118 @@
     FOR EACH ROW EXECUTE FUNCTION empty_test_trigger();
 SET client_min_messages TO DEBUG1;
 \copy table_without_bf_trigger from data/copy_data.csv with csv header;
+LOG:  statement: COPY  table_without_bf_trigger FROM STDIN with csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: COPY  table_without_bf_trigger FROM STDIN with csv header;
+DEBUG:  pg_query_rewrite: pgqr_analyze: COPY  table_without_bf_trigger FROM STDIN with csv header;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite COPY  table_without_bf_trigger FROM STDIN with csv header;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 DEBUG:  Using optimized multi-buffer copy operation (CIM_MULTI_CONDITIONAL).
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_analyze: TG_OP = 'DELETE'
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite TG_OP = 'DELETE': rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 RESET client_min_messages;
+LOG:  statement: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: entry: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_analyze: RESET client_min_messages;
+DEBUG:  pg_query_rewrite: pgqr_to_rewrite RESET client_min_messages;: rc=false
+DEBUG:  pg_query_rewrite: pgqr_analyze: exit
 SELECT count(*) FROM table_without_bf_trigger;
  count 
 -------
diff -u /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/test/expected/drop_extension.out /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/build/test/results/drop_extension.out
--- /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/test/expected/drop_extension.out	2023-06-28 16:40:59.000000000 +0000
+++ /home/abigalek/pgext-cli/pgextworkdir/timescaledb-2.11.1/build/test/results/drop_extension.out	2023-11-26 02:37:38.083705894 +0000
@@ -72,7 +72,7 @@
 --test drops thru cascades of other objects
 \c :TEST_DBNAME :ROLE_SUPERUSER
 drop schema public cascade;
-NOTICE:  drop cascades to 3 other objects
+NOTICE:  drop cascades to 4 other objects
 \dn
   List of schemas
  Name |   Owner    
