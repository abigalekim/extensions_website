diff -U3 /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/expected/postgres_fdw.out /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/results/postgres_fdw.out
--- /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/expected/postgres_fdw.out	2023-05-08 21:13:20.000000000 +0000
+++ /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/results/postgres_fdw.out	2023-07-26 04:49:14.900951124 +0000
@@ -298,7 +298,8 @@
          ->  Foreign Scan on public.ft1 t1
                Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
                Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(8 rows)
+ Query Identifier: -8550259124255498348
+(9 rows)
 
 SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -322,7 +323,8 @@
  Foreign Scan on public.ft1 t1
    Output: t1.*, c3, c1
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(3 rows)
+ Query Identifier: 6314105915259333666
+(4 rows)
 
 SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                              t1                                             
@@ -352,7 +354,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c7 >= '1')) AND (("C 1" = 101)) AND ((c6 = '1'))
-(3 rows)
+ Query Identifier: 4116922912326379803
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -367,7 +370,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 101)) FOR UPDATE
-(3 rows)
+ Query Identifier: 5886453948409610418
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -381,7 +385,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 102)) FOR SHARE
-(3 rows)
+ Query Identifier: 3012700723801936
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -461,7 +466,8 @@
                Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
                Output: t2."C 1"
-(11 rows)
+ Query Identifier: -927658674279248765
+(12 rows)
 
 SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
  c1  | C 1 
@@ -495,7 +501,8 @@
                Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
                Output: t2."C 1"
-(11 rows)
+ Query Identifier: -6648001821987122551
+(12 rows)
 
 SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
  c1  | C 1 
@@ -530,7 +537,8 @@
                Remote SQL: SELECT r3."C 1" FROM ("S 1"."T 1" r2 INNER JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r2."C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
                Output: t1."C 1"
-(12 rows)
+ Query Identifier: -2936882507853964263
+(13 rows)
 
 SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
  C 1 
@@ -566,7 +574,8 @@
                Remote SQL: SELECT r3."C 1", r2."C 1" FROM ("S 1"."T 1" r3 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r3."C 1")))) ORDER BY r3."C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
                Output: t1."C 1"
-(12 rows)
+ Query Identifier: 4836968983052052049
+(13 rows)
 
 SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
  C 1 | c1  | c1  
@@ -600,7 +609,8 @@
                Remote SQL: SELECT r2."C 1", r3."C 1" FROM ("S 1"."T 1" r2 FULL JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r3."C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
                Output: t1."C 1"
-(12 rows)
+ Query Identifier: 4273787723216527574
+(13 rows)
 
 SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
  C 1 | c1  | c1  
@@ -635,7 +645,8 @@
  Foreign Scan on public.ft_empty
    Output: c1, c2
    Remote SQL: SELECT c1, c2 FROM public.loct_empty ORDER BY c1 ASC NULLS LAST
-(3 rows)
+ Query Identifier: -4843211239032717828
+(4 rows)
 
 -- ===================================================================
 -- WHERE with remotely-executable conditions
@@ -646,7 +657,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: 1051615962826997198
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                   QUERY PLAN                                                  
@@ -654,7 +666,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 100)) AND ((c2 = 0))
-(3 rows)
+ Query Identifier: 8401193133594090925
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                            QUERY PLAN                                            
@@ -662,7 +675,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NULL))
-(3 rows)
+ Query Identifier: 2520605500011107483
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                              QUERY PLAN                                              
@@ -670,7 +684,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NOT NULL))
-(3 rows)
+ Query Identifier: -5715714885064717370
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                      QUERY PLAN                                                      
@@ -678,7 +693,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((round(abs("C 1"), 0) = 1::numeric))
-(3 rows)
+ Query Identifier: -631605666144079797
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                              QUERY PLAN                                              
@@ -686,7 +702,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = (- "C 1")))
-(3 rows)
+ Query Identifier: 8620050265724155086
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                  QUERY PLAN                                                                 
@@ -694,7 +711,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" IS NOT NULL) IS DISTINCT FROM ("C 1" IS NOT NULL)))
-(3 rows)
+ Query Identifier: -4235111198675613469
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                         QUERY PLAN                                                         
@@ -702,7 +720,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ANY (ARRAY[c2, 1, ("C 1" + 0)])))
-(3 rows)
+ Query Identifier: 8592263336872684710
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                                                       QUERY PLAN                                                      
@@ -710,7 +729,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ((ARRAY["C 1", c2, 3])[1])))
-(3 rows)
+ Query Identifier: -4789121136904490129
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                               QUERY PLAN                                               
@@ -718,7 +738,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c6 = E'foo''s\\bar'))
-(3 rows)
+ Query Identifier: 3447579883590833904
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                QUERY PLAN                                
@@ -727,7 +748,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(4 rows)
+ Query Identifier: 4138052641786323040
+(5 rows)
 
 -- parameterized remote path for foreign table
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -742,7 +764,8 @@
    ->  Foreign Scan on public.ft2 b
          Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
-(8 rows)
+ Query Identifier: -8457324268535443203
+(9 rows)
 
 SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -766,7 +789,8 @@
          Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
          Filter: (upper((a.c7)::text) = (b.c7)::text)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
-(10 rows)
+ Query Identifier: 5276353150524608098
+(11 rows)
 
 SELECT * FROM ft2 a, ft2 b
 WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
@@ -905,7 +929,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2, c3, c4, c5, c6, c7, c8, random()
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -6772973902626867335
+(7 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
@@ -917,7 +942,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2, c3, c4, c5, c6, c7, c8, c3
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: 8227117733489597902
+(7 rows)
 
 -- user-defined operator/function
 CREATE FUNCTION postgres_fdw_abs(int) RETURNS int AS $$
@@ -940,7 +966,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = abs(c2)))
-(4 rows)
+ Query Identifier: -1697471413664274465
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
  count 
@@ -956,7 +983,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = c2))
-(4 rows)
+ Query Identifier: 43633192765530721
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
  count 
@@ -975,7 +1003,8 @@
          Output: c3
          Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
          Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -6244277181917287169
+(7 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
  count 
@@ -993,7 +1022,8 @@
          Output: c3
          Filter: (t1.c1 === t1.c2)
          Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: 3623014928691164139
+(7 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
  count 
@@ -1012,7 +1042,8 @@
          Output: c1, c2, c3, c4, c5, c6, c7, c8
          Filter: (t1.c1 === t1.c2)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(6 rows)
+ Query Identifier: -4852961284384829047
+(7 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -1033,7 +1064,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = public.postgres_fdw_abs(c2)))
-(4 rows)
+ Query Identifier: -6244277181917287169
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
  count 
@@ -1049,7 +1081,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
-(4 rows)
+ Query Identifier: 3623014928691164139
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
  count 
@@ -1065,7 +1098,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2)) ORDER BY c2 ASC NULLS LAST LIMIT 1::bigint
-(3 rows)
+ Query Identifier: -4852961284384829047
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -1081,7 +1115,8 @@
  Foreign Scan on public.ft2
    Output: c1, c2, c3
    Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" WHERE (((CASE WHEN ("C 1" > 990) THEN "C 1" ELSE NULL::integer END) < 1000)) ORDER BY "C 1" ASC NULLS LAST
-(3 rows)
+ Query Identifier: -6042215886450895607
+(4 rows)
 
 SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
  c1  | c2 |  c3   
@@ -1100,69 +1135,28 @@
 -- Nested CASE
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
-                                                                                                QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Foreign Scan on public.ft2
-   Output: c1, c2, c3
-   Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" WHERE (((CASE (CASE WHEN (c2 > 0) THEN c2 ELSE NULL::integer END) WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END) > 600)) ORDER BY "C 1" ASC NULLS LAST
-(3 rows)
-
+ERROR:  cache lookup failed for type 23
 SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
- c1 | c2 | c3 
-----+----+----
-(0 rows)
-
+ERROR:  cache lookup failed for type 23
 -- CASE arg WHEN
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ft1 WHERE c1 > (CASE mod(c1, 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
-                                                                        QUERY PLAN                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------
- Foreign Scan on public.ft1
-   Output: c1, c2, c3, c4, c5, c6, c7, c8
-   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" > (CASE mod("C 1", 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)))
-(3 rows)
-
+ERROR:  cache lookup failed for type 23
 -- CASE cannot be pushed down because of unshippable arg clause
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ft1 WHERE c1 > (CASE random()::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END);
-                                       QUERY PLAN                                        
------------------------------------------------------------------------------------------
- Foreign Scan on public.ft1
-   Output: c1, c2, c3, c4, c5, c6, c7, c8
-   Filter: (ft1.c1 > CASE (random())::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)
-   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(4 rows)
-
+ERROR:  cache lookup failed for type 23
 -- these are shippable
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ft1 WHERE CASE c6 WHEN 'foo' THEN true ELSE c3 < 'bar' END;
-                                                                 QUERY PLAN                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------
- Foreign Scan on public.ft1
-   Output: c1, c2, c3, c4, c5, c6, c7, c8
-   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((CASE c6 WHEN 'foo'::text THEN true ELSE (c3 < 'bar') END))
-(3 rows)
-
+ERROR:  cache lookup failed for type 1043
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ft1 WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
-                                                            QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
- Foreign Scan on public.ft1
-   Output: c1, c2, c3, c4, c5, c6, c7, c8
-   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((CASE c3 WHEN c6 THEN true ELSE (c3 < 'bar') END))
-(3 rows)
-
+ERROR:  cache lookup failed for type 25
 -- but this is not because of collation
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ft1 WHERE CASE c3 COLLATE "C" WHEN c6 THEN true ELSE c3 < 'bar' END;
-                                     QUERY PLAN                                      
--------------------------------------------------------------------------------------
- Foreign Scan on public.ft1
-   Output: c1, c2, c3, c4, c5, c6, c7, c8
-   Filter: CASE (ft1.c3)::text WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::text) END
-   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(4 rows)
-
+ERROR:  cache lookup failed for type 25
 -- check schema-qualification of regconfig constant
 CREATE TEXT SEARCH CONFIGURATION public.custom_search
   (COPY = pg_catalog.english);
@@ -1174,7 +1168,8 @@
  Foreign Scan on public.ft1
    Output: c1, to_tsvector('custom_search'::regconfig, c3)
    Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1" WHERE (("C 1" = 642)) AND ((length(to_tsvector('public.custom_search'::regconfig, c3)) > 0))
-(3 rows)
+ Query Identifier: -2268065476496121331
+(4 rows)
 
 SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
 WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
@@ -1199,7 +1194,8 @@
    Output: t1.c1, t2.c1, t1.c3
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(4 rows)
+ Query Identifier: -7982395368295219677
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
  c1  | c1  
@@ -1225,7 +1221,8 @@
    Output: t1.c1, t2.c2, t3.c3, t1.c3
    Relations: ((public.ft1 t1) INNER JOIN (public.ft2 t2)) INNER JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3, r1.c3 FROM (("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) INNER JOIN "S 1"."T 3" r4 ON (((r1."C 1" = r4.c1)))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -7174388661453132478
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1251,7 +1248,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft4 t1) LEFT JOIN (public.ft5 t2)
    Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -1905649795601378663
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c1 
@@ -1277,7 +1275,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -4060789198420981847
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1305,7 +1304,8 @@
    Output: t1.c1, t1.c2, ft5.c1, ft5.c2
    Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
    Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE ((r1.c1 < 10))
-(4 rows)
+ Query Identifier: -5186692644659189475
+(5 rows)
 
 SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
  c1 | c2 | c1 | c2 
@@ -1327,7 +1327,8 @@
    Output: t1.c1, t1.c2, ft5.c1, ft5.c2
    Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
    Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE (((r4.c1 < 10) OR (r4.c1 IS NULL))) AND ((r1.c1 < 10))
-(4 rows)
+ Query Identifier: 2982471345851492491
+(5 rows)
 
 SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
 			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
@@ -1348,7 +1349,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft4 t2) LEFT JOIN (public.ft5 t1)
    Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r2 LEFT JOIN "S 1"."T 4" r1 ON (((r1.c1 = r2.c1)))) ORDER BY r2.c1 ASC NULLS LAST, r1.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 3975027761187517700
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
  c1 | c1 
@@ -1374,7 +1376,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -8588903470345956721
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1400,7 +1403,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
    Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 45::bigint
-(4 rows)
+ Query Identifier: 8178548548035508366
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
  c1  | c1 
@@ -1427,7 +1431,8 @@
    Output: ft4.c1, ft5.c1
    Relations: (public.ft4) FULL JOIN (public.ft5)
    Remote SQL: SELECT s4.c1, s5.c1 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1) ON (((s4.c1 = s5.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s5.c1 ASC NULLS LAST
-(4 rows)
+ Query Identifier: -7589277766921629086
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
  c1 | c1 
@@ -1450,7 +1455,8 @@
    Output: 1
    Relations: (public.ft4) FULL JOIN (public.ft5)
    Remote SQL: SELECT NULL FROM ((SELECT NULL FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4 FULL JOIN (SELECT NULL FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5 ON (TRUE)) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 6934078906838059245
+(5 rows)
 
 SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
  ?column? 
@@ -1477,7 +1483,8 @@
    Output: ft4.c1, t2.c1, t3.c1
    Relations: (public.ft4) FULL JOIN ((public.ft4 t2) LEFT JOIN (public.ft5 t3))
    Remote SQL: SELECT s4.c1, s8.c1, s8.c2 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT r5.c1, r6.c1 FROM ("S 1"."T 3" r5 LEFT JOIN "S 1"."T 4" r6 ON (((r5.c1 = r6.c1)))) WHERE ((r5.c1 >= 50)) AND ((r5.c1 <= 60))) s8(c1, c2) ON (((s4.c1 = s8.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s8.c1 ASC NULLS LAST, s8.c2 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 6412611386895758251
+(5 rows)
 
 SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
  c1 | a  | b  
@@ -1499,7 +1506,8 @@
    Output: ft4.c1, ft4_1.c1, ft5.c1
    Relations: (public.ft4) FULL JOIN ((public.ft4 ft4_1) FULL JOIN (public.ft5))
    Remote SQL: SELECT s4.c1, s10.c1, s10.c2 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT s8.c1, s9.c1 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s8(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s9(c1) ON (((s8.c1 = s9.c1)))) WHERE (((s8.c1 IS NULL) OR (s8.c1 IS NOT NULL)))) s10(c1, c2) ON (((s4.c1 = s10.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s10.c1 ASC NULLS LAST, s10.c2 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 1701799119439467652
+(5 rows)
 
 SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
  c1 | a  | b  
@@ -1547,7 +1555,8 @@
                ->  Seq Scan on "S 1"."T 3"
                      Output: "T 3".c1, "T 3".ctid
                      Filter: ("T 3".c1 = 50)
-(28 rows)
+ Query Identifier: 1153614807342483274
+(29 rows)
 
 SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
  c1 | a  | b  
@@ -1571,7 +1580,8 @@
    Output: t1.c1, t2.c1, t3.c1
    Relations: ((public.ft4 t1) INNER JOIN (public.ft5 t2)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1.c1, r2.c1, r4.c1 FROM (("S 1"."T 3" r1 INNER JOIN "S 1"."T 4" r2 ON (((r1.c1 = (r2.c1 + 1))) AND ((r1.c1 >= 50)) AND ((r1.c1 <= 60)))) FULL JOIN "S 1"."T 3" r4 ON (((r2.c1 = r4.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST, r4.c1 ASC NULLS LAST LIMIT 10::bigint
-(4 rows)
+ Query Identifier: 8555978033042574140
+(5 rows)
 
 SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
  c1 | c1 | c1 
@@ -1597,7 +1607,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 5577413151510887087
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1623,7 +1634,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -4669847071611815623
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1649,7 +1661,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -884415613041129708
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1675,7 +1688,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -7719774712316806821
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1701,7 +1715,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -470829781894048071
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1728,7 +1743,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) LEFT JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 5796489681887911667
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1755,7 +1771,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: (public.ft4 t3) LEFT JOIN ((public.ft2 t1) INNER JOIN (public.ft2 t2))
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM ("S 1"."T 3" r4 LEFT JOIN ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -6681397453817014092
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1786,7 +1803,8 @@
                Output: t1.c1, t2.c1
                Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
                Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 = r2.c1) OR (r1.c1 IS NULL)))
-(9 rows)
+ Query Identifier: 2441133707448861215
+(10 rows)
 
 SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c1 
@@ -1812,7 +1830,8 @@
    Output: t1.c1, t2.c2, t1.c3
    Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) WHERE ((public.postgres_fdw_abs(r1."C 1") > 0)) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -602926090892735526
+(5 rows)
 
 ALTER SERVER loopback OPTIONS (DROP extensions);
 -- full outer join + WHERE clause with shippable extensions not set
@@ -1827,7 +1846,8 @@
          Filter: (postgres_fdw_abs(t1.c1) > 0)
          Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
          Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(7 rows)
+ Query Identifier: -602926090892735526
+(8 rows)
 
 ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
 -- join two tables with FOR UPDATE clause
@@ -1840,7 +1860,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR UPDATE OF r1
-(4 rows)
+ Query Identifier: -2760021367734328922
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
  c1  | c1  
@@ -1865,7 +1886,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR UPDATE OF r1 FOR UPDATE OF r2
-(4 rows)
+ Query Identifier: 4942866250801272992
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
  c1  | c1  
@@ -1891,7 +1913,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR SHARE OF r1
-(4 rows)
+ Query Identifier: 4159249337329746036
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
  c1  | c1  
@@ -1916,7 +1939,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR SHARE OF r1 FOR SHARE OF r2
-(4 rows)
+ Query Identifier: 1184734755967468509
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
  c1  | c1  
@@ -1950,7 +1974,8 @@
          Sort Key: t.c1_3, t.c1_1
          ->  CTE Scan on t
                Output: t.c1_1, t.c2_1, t.c1_3
-(12 rows)
+ Query Identifier: -6325377653629592093
+(13 rows)
 
 WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
  c1_1 | c2_1 
@@ -1976,7 +2001,8 @@
    Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1.ctid, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END, r1."C 1", r1.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(4 rows)
+ Query Identifier: 3383241115730457684
+(5 rows)
 
 -- SEMI JOIN, not pushed down
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -1994,7 +2020,8 @@
          ->  Foreign Scan on public.ft2 t2
                Output: t2.c1
                Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
-(11 rows)
+ Query Identifier: -7868168528596340513
+(12 rows)
 
 SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
  c1  
@@ -2027,7 +2054,8 @@
          ->  Foreign Scan on public.ft2 t2
                Output: t2.c2
                Remote SQL: SELECT c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(11 rows)
+ Query Identifier: 3675453898908185005
+(12 rows)
 
 SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
  c1  
@@ -2053,7 +2081,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (TRUE)) ORDER BY r1."C 1" ASC NULLS LAST, r2."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(4 rows)
+ Query Identifier: -6623560568428924986
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
  c1 | c1  
@@ -2088,7 +2117,8 @@
                ->  Foreign Scan on public.ft5 t1
                      Output: t1.c1, t1.c2, t1.c3
                      Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
-(13 rows)
+ Query Identifier: 3339143137001729110
+(14 rows)
 
 SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
  c1 | c1 
@@ -2121,7 +2151,8 @@
                      ->  Foreign Scan on public.ft2 t2
                            Output: t2.c1, t2.c8
                            Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
-(20 rows)
+ Query Identifier: 197043236101017487
+(21 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
  c1 | c1  
@@ -2160,7 +2191,8 @@
                            Output: t1.c1, t1.c3
                            Filter: (t1.c8 = 'foo'::user_enum)
                            Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
-(17 rows)
+ Query Identifier: -6027785112257670267
+(18 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
  c1  | c1  
@@ -2195,7 +2227,8 @@
                Filter: (t1.c8 = t2.c8)
                Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
                Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, r1.c8, r2.c8 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(10 rows)
+ Query Identifier: -6245676285837104944
+(11 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
  c1  | c1  
@@ -2237,7 +2270,8 @@
                                  Output: t1_1.c1, t2_1.c1
                                  Relations: (public.ft1 t1_1) INNER JOIN (public.ft2 t2_1)
                                  Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(20 rows)
+ Query Identifier: 6221773167110325013
+(21 rows)
 
 SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
  t1c1 |         avg          
@@ -2276,7 +2310,8 @@
                                  Output: t2.c1, t3.c1
                                  Relations: (public.ft1 t2) INNER JOIN (public.ft2 t3)
                                  Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")) AND ((r1.c2 = $1::integer))))
-(17 rows)
+ Query Identifier: -7439216489702522428
+(18 rows)
 
 SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
  C 1 
@@ -2311,7 +2346,8 @@
          ->  Foreign Scan on public.ft1
                Output: 13
                Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE (("C 1" = 13))
-(11 rows)
+ Query Identifier: -3993472935917305872
+(12 rows)
 
 SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
  a  | c1 
@@ -2341,7 +2377,8 @@
                Output: ft1.c1, ft2.c1, 13
                Relations: (public.ft1) INNER JOIN (public.ft2)
                Remote SQL: SELECT r4."C 1", r5."C 1" FROM ("S 1"."T 1" r4 INNER JOIN "S 1"."T 1" r5 ON (((r5."C 1" = 12)) AND ((r4."C 1" = 12)))) ORDER BY r4."C 1" ASC NULLS LAST
-(12 rows)
+ Query Identifier: -5648073796662768660
+(13 rows)
 
 SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
  c1 | a  | b  | c  
@@ -2361,7 +2398,8 @@
    Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
    Relations: (public.ft5) INNER JOIN (public.ft4)
    Remote SQL: SELECT CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1.c1, r1.c2, r1.c3) END, r1.c1, r1.c2, r1.c3, r2.c1, r2.c2 FROM ("S 1"."T 4" r1 INNER JOIN "S 1"."T 3" r2 ON (((r1.c1 = r2.c1)) AND ((r2.c1 >= 10)) AND ((r2.c1 <= 30)))) ORDER BY r1.c1 ASC NULLS LAST
-(4 rows)
+ Query Identifier: -3843159939642770327
+(5 rows)
 
 SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
       ft5       | c1 | c2 |   c3   | c1 | c2 
@@ -2431,7 +2469,8 @@
                                  Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" FOR UPDATE
          ->  Index Scan using local_tbl_pkey on public.local_tbl
                Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
-(47 rows)
+ Query Identifier: -8613535060710698670
+(48 rows)
 
 SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
     AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
@@ -2486,7 +2525,8 @@
                                              ->  Foreign Scan on public.ft2
                                                    Output: ft2.*, ft2.c1, ft2.c3
                                                    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(29 rows)
+ Query Identifier: -5054946138136966488
+(30 rows)
 
 ALTER SERVER loopback OPTIONS (DROP extensions);
 ALTER SERVER loopback OPTIONS (ADD fdw_startup_cost '10000.0');
@@ -2526,7 +2566,8 @@
                                        ->  Foreign Scan on public.ft2
                                              Output: ft2.*, ft2.c1, ft2.c2, postgres_fdw_abs(ft2.c2)
                                              Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
-(32 rows)
+ Query Identifier: 6125017245034184506
+(33 rows)
 
 ALTER SERVER loopback OPTIONS (DROP fdw_startup_cost);
 ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
@@ -2559,7 +2600,8 @@
                      ->  Foreign Scan on public.ft5
                            Output: ft5.c2, ft5.c1
                            Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
-(16 rows)
+ Query Identifier: -2985662655057094513
+(17 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2585,7 +2627,8 @@
    Output: ft4.c1, ft5.c2, ft5.c1
    Relations: (public.ft4) LEFT JOIN (public.ft5)
    Remote SQL: SELECT r6.c1, r9.c2, r9.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r9 ON (((r6.c1 = r9.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r9.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -2985662655057094513
+(5 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2622,7 +2665,8 @@
                      ->  Foreign Scan on public.ft5 t2
                            Output: t2.c2, t2.c1
                            Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
-(16 rows)
+ Query Identifier: 5908843157478699422
+(17 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2648,7 +2692,8 @@
    Output: ft4.c1, t2.c2, t2.c1
    Relations: (public.ft4) LEFT JOIN (public.ft5 t2)
    Remote SQL: SELECT r6.c1, r2.c2, r2.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r2 ON (((r6.c1 = r2.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 5908843157478699422
+(5 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2681,7 +2726,8 @@
    Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(c6), sum("C 1"), avg("C 1"), min(c2), max("C 1"), stddev(c2), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 7 ORDER BY count(c6) ASC NULLS LAST, sum("C 1") ASC NULLS LAST
-(4 rows)
+ Query Identifier: -8619742161182567196
+(5 rows)
 
 select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
  count |  sum  |         avg          | min | max  | stddev | sum2  
@@ -2701,7 +2747,8 @@
    Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(c6), sum("C 1"), avg("C 1"), min(c2), max("C 1"), stddev(c2), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 7 ORDER BY count(c6) ASC NULLS LAST, sum("C 1") ASC NULLS LAST LIMIT 1::bigint
-(4 rows)
+ Query Identifier: 3745553348238344993
+(5 rows)
 
 select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
  count |  sum  |         avg          | min | max | stddev | sum2  
@@ -2719,7 +2766,8 @@
    ->  Foreign Scan on public.ft1
          Output: c1
          Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
-(5 rows)
+ Query Identifier: 7761050863170672639
+(6 rows)
 
 -- Aggregate over join query
 explain (verbose, costs off)
@@ -2730,7 +2778,8 @@
    Output: (count(*)), (sum(t1.c1)), (avg(t2.c1))
    Relations: Aggregate on ((public.ft1 t1) INNER JOIN (public.ft1 t2))
    Remote SQL: SELECT count(*), sum(r1."C 1"), avg(r2."C 1") FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2.c2 = 6)) AND ((r1.c2 = 6))))
-(4 rows)
+ Query Identifier: 2757520704171547514
+(5 rows)
 
 select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
  count |   sum   |         avg          
@@ -2750,7 +2799,8 @@
          Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
          Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
          Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(7 rows)
+ Query Identifier: -5884296689791284941
+(8 rows)
 
 -- GROUP BY clause having expressions
 explain (verbose, costs off)
@@ -2761,7 +2811,8 @@
    Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT (c2 / 2), (sum(c2) * (c2 / 2)) FROM "S 1"."T 1" GROUP BY 1 ORDER BY (c2 / 2) ASC NULLS LAST
-(4 rows)
+ Query Identifier: -8521946165004878369
+(5 rows)
 
 select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
  ?column? | ?column? 
@@ -2784,7 +2835,8 @@
          Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c2, sum("C 1"), sqrt("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 ORDER BY c2 ASC NULLS LAST, sum("C 1") ASC NULLS LAST
-(6 rows)
+ Query Identifier: 4778821646880355248
+(7 rows)
 
 select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
  count | sum  
@@ -2804,7 +2856,8 @@
          Output: (c2 * ((random() <= '1'::double precision))::integer), ((sum(c1) * c2)), c2
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT (sum("C 1") * c2), c2 FROM "S 1"."T 1" GROUP BY 2
-(7 rows)
+ Query Identifier: -7589561536944266079
+(8 rows)
 
 select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
  sum1 |  sum2  
@@ -2835,7 +2888,8 @@
          ->  Foreign Scan on public.ft2
                Output: (c2 * ((random() <= '1'::double precision))::integer)
                Remote SQL: SELECT c2 FROM "S 1"."T 1"
-(9 rows)
+ Query Identifier: -7497683026027328212
+(10 rows)
 
 -- GROUP BY clause in various forms, cardinal, alias and constant expression
 explain (verbose, costs off)
@@ -2849,7 +2903,8 @@
          Output: (count(c2)), c2, 5, 7.0, 9
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT count(c2), c2, 5, 7.0, 9 FROM "S 1"."T 1" GROUP BY 2, 3, 5
-(7 rows)
+ Query Identifier: -3035947563816300603
+(8 rows)
 
 select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
   w  | x | y |  z  
@@ -2876,7 +2931,8 @@
    Output: c2, c2, (sum(c1))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT c2, c2, sum("C 1") FROM "S 1"."T 1" WHERE ((c2 > 6)) GROUP BY 1, 2 ORDER BY sum("C 1") ASC NULLS LAST
-(4 rows)
+ Query Identifier: -9042505604736421484
+(5 rows)
 
 select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
  c2 | c2 
@@ -2895,7 +2951,8 @@
    Output: c2, (sum(c1))
    Relations: Aggregate on (public.ft2)
    Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1 HAVING ((avg("C 1") < 500::numeric)) AND ((sum("C 1") < 49800)) ORDER BY c2 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 6198478937067435408
+(5 rows)
 
 select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
  c2 |  sum  
@@ -2916,7 +2973,8 @@
          Filter: (((((avg(ft1.c1)) / (avg(ft1.c1))))::double precision * random()) <= '1'::double precision)
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c5, NULL::bigint, sqrt(c2), avg("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 HAVING ((avg("C 1") < 500::numeric))
-(7 rows)
+ Query Identifier: -12120374052366886
+(8 rows)
 
 select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
  count 
@@ -2939,7 +2997,8 @@
          ->  Foreign Scan on public.ft1
                Output: c1, c2
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
-(10 rows)
+ Query Identifier: -524218559858678392
+(11 rows)
 
 -- Remote aggregate in combination with a local Param (for the output
 -- of an initplan) can be trouble, per bug #15781
@@ -2953,7 +3012,8 @@
    Remote SQL: SELECT sum("C 1") FROM "S 1"."T 1"
    InitPlan 1 (returns $0)
      ->  Seq Scan on pg_catalog.pg_enum
-(6 rows)
+ Query Identifier: -6951958189147613084
+(7 rows)
 
 select exists(select 1 from pg_enum), sum(c1) from ft1;
  exists |  sum   
@@ -2973,7 +3033,8 @@
    ->  Foreign Scan on public.ft1
          Output: $0, ft1.c1
          Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
-(8 rows)
+ Query Identifier: -5272732612170170871
+(9 rows)
 
 select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
  exists |  sum   
@@ -2991,7 +3052,8 @@
    Output: (array_agg(c1 ORDER BY c1)), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) GROUP BY 2 ORDER BY array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 6177006496060046995
+(5 rows)
 
 select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
            array_agg            
@@ -3017,7 +3079,8 @@
    Output: (array_agg(c5 ORDER BY c1 DESC))
    Relations: Aggregate on (public.ft2)
    Remote SQL: SELECT array_agg(c5 ORDER BY "C 1" DESC NULLS FIRST) FROM "S 1"."T 1" WHERE (("C 1" < 50)) AND ((c2 = 6))
-(4 rows)
+ Query Identifier: 3547746508148254645
+(5 rows)
 
 select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                 array_agg                                                                 
@@ -3034,7 +3097,8 @@
    Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT array_agg(DISTINCT (r1.c1 % 5)), (r2.c1 % 3) FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) GROUP BY 2 ORDER BY array_agg(DISTINCT (r1.c1 % 5)) ASC NULLS LAST
-(4 rows)
+ Query Identifier: -3944718982363930068
+(5 rows)
 
 select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
   array_agg   
@@ -3052,7 +3116,8 @@
    Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) ASC NULLS LAST), (r2.c1 % 3) FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) GROUP BY 2 ORDER BY array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) ASC NULLS LAST) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 4095706003289395204
+(5 rows)
 
 select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
   array_agg   
@@ -3069,7 +3134,8 @@
    Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) DESC NULLS LAST), (r2.c1 % 3) FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) GROUP BY 2 ORDER BY array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) DESC NULLS LAST) ASC NULLS LAST
-(4 rows)
+ Query Identifier: -8536622848558405071
+(5 rows)
 
 select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
   array_agg   
@@ -3087,7 +3153,8 @@
    Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))), c2 FROM "S 1"."T 1" GROUP BY 2 ORDER BY sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 8335875987490465242
+(5 rows)
 
 select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
  sum 
@@ -3113,7 +3180,8 @@
    Output: (sum((c1 % 3))), (sum(DISTINCT (c1 % 3) ORDER BY (c1 % 3)) FILTER (WHERE ((c1 % 3) < 2))), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT sum(("C 1" % 3)), sum(DISTINCT ("C 1" % 3) ORDER BY (("C 1" % 3)) ASC NULLS LAST) FILTER (WHERE (("C 1" % 3) < 2)), c2 FROM "S 1"."T 1" WHERE ((c2 = 6)) GROUP BY 3
-(4 rows)
+ Query Identifier: 2296321736948790816
+(5 rows)
 
 select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
  sum | sum | c2 
@@ -3139,7 +3207,8 @@
                  ->  Foreign Scan on public.ft1 t1
                        Output: (count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                        Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE (("C 1" = 6))
-(13 rows)
+ Query Identifier: 391617723485627636
+(14 rows)
 
 select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
  count 
@@ -3165,7 +3234,8 @@
                        Output: (count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                        Relations: Aggregate on (public.ft1 t1)
                        Remote SQL: SELECT count("C 1") FILTER (WHERE (($1::integer = 6) AND ($2::integer < 10))) FROM "S 1"."T 1" WHERE (("C 1" = 6))
-(13 rows)
+ Query Identifier: 1192801889820338273
+(14 rows)
 
 select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
  count 
@@ -3188,7 +3258,8 @@
          ->  Foreign Scan on public.ft1
                Output: c1, c2
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
-(9 rows)
+ Query Identifier: 6959548079850748517
+(10 rows)
 
 explain (verbose, costs off)
 select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
@@ -3203,7 +3274,8 @@
      ->  Foreign Scan on public.ft1 ft1_1
            Output: ft1_1.c2
            Remote SQL: SELECT c2 FROM "S 1"."T 1" WHERE ((c2 < 5))
-(9 rows)
+ Query Identifier: 7766111116468418846
+(10 rows)
 
 -- Ordered-sets within aggregate
 explain (verbose, costs off)
@@ -3217,7 +3289,8 @@
          Output: c2, (rank('10'::character varying) WITHIN GROUP (ORDER BY c6)), (percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision)))
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c2, rank('10'::character varying) WITHIN GROUP (ORDER BY c6 ASC NULLS LAST), percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1 HAVING ((percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) < 500::double precision))
-(7 rows)
+ Query Identifier: -113398389032176022
+(8 rows)
 
 select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
  c2 | rank | percentile_cont 
@@ -3238,7 +3311,8 @@
    Output: c1, (rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2)), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT "C 1", rank("C 1", c2) WITHIN GROUP (ORDER BY "C 1" ASC NULLS LAST, c2 ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" = 6)) GROUP BY 1, 3
-(4 rows)
+ Query Identifier: 6251970556983107042
+(5 rows)
 
 select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
  c1 | rank 
@@ -3266,7 +3340,8 @@
    ->  Foreign Scan on public.ft1
          Output: c2, c1
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(6 rows)
+ Query Identifier: 3315539516693217947
+(7 rows)
 
 -- Add function and aggregate into extension
 alter extension postgres_fdw add function least_accum(anyelement, variadic anyarray);
@@ -3284,7 +3359,8 @@
          Output: c2, (least_agg(VARIADIC ARRAY[c1]))
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c2, public.least_agg(VARIADIC ARRAY["C 1"]) FROM "S 1"."T 1" WHERE ((c2 < 100)) GROUP BY 1
-(7 rows)
+ Query Identifier: 8345325236898573675
+(8 rows)
 
 select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
  c2 | least_agg 
@@ -3316,7 +3392,8 @@
    ->  Foreign Scan on public.ft1
          Output: c2, c1
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(6 rows)
+ Query Identifier: 3315539516693217947
+(7 rows)
 
 -- Cleanup
 reset enable_hashagg;
@@ -3362,7 +3439,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
-(6 rows)
+ Query Identifier: -3032663334154079173
+(7 rows)
 
 -- This should not be pushed either.
 explain (verbose, costs off)
@@ -3375,7 +3453,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2, c3, c4, c5, c6, c7, c8
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -5551061103942275471
+(7 rows)
 
 -- Update local stats on ft2
 ANALYZE ft2;
@@ -3396,7 +3475,8 @@
    Output: (array_agg(c1 ORDER BY c1 USING <^ NULLS LAST)), c2
    Relations: Aggregate on (public.ft2)
    Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" USING OPERATOR(public.<^) NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6)) GROUP BY 2
-(4 rows)
+ Query Identifier: -3032663334154079173
+(5 rows)
 
 select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
            array_agg            
@@ -3412,7 +3492,8 @@
  Foreign Scan on public.ft2
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY "C 1" USING OPERATOR(public.<^) NULLS LAST
-(3 rows)
+ Query Identifier: -5551061103942275471
+(4 rows)
 
 -- Remove from extension
 alter extension postgres_fdw drop operator class my_op_class using btree;
@@ -3433,7 +3514,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
-(6 rows)
+ Query Identifier: -3032663334154079173
+(7 rows)
 
 -- Cleanup
 drop operator class my_op_class using btree;
@@ -3461,7 +3543,8 @@
                ->  Foreign Scan on public.ft2 t2
                      Output: t2.c2
                      Remote SQL: SELECT c2 FROM "S 1"."T 1"
-(13 rows)
+ Query Identifier: -4926749860703064812
+(14 rows)
 
 -- Subquery in FROM clause having aggregate
 explain (verbose, costs off)
@@ -3489,7 +3572,8 @@
                                  Output: ft1_1.c2, (sum(ft1_1.c1))
                                  Relations: Aggregate on (public.ft1 ft1_1)
                                  Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1
-(21 rows)
+ Query Identifier: 5941409707071537392
+(22 rows)
 
 select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
  count |   b   
@@ -3515,7 +3599,8 @@
    Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT avg(r1.c1), sum(r2.c1), r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) GROUP BY 3 HAVING ((((avg(r1.c1) IS NULL) AND (sum(r2.c1) < 10)) OR (sum(r2.c1) IS NULL))) ORDER BY avg(r1.c1) ASC NULLS LAST, sum(r2.c1) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 8150822157787396652
+(5 rows)
 
 select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
          avg         | sum 
@@ -3535,7 +3620,8 @@
    Output: (count(*)), (sum(ft4.c1)), (avg(ft5.c1))
    Relations: Aggregate on ((public.ft4) FULL JOIN (public.ft5))
    Remote SQL: SELECT count(*), sum(s4.c1), avg(s5.c1) FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1) ON (((s4.c1 = s5.c1))))
-(4 rows)
+ Query Identifier: 2507313613646794194
+(5 rows)
 
 select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
  count | sum |         avg         
@@ -3556,7 +3642,8 @@
          Output: ((sum(c2)) * ((random() <= '1'::double precision))::integer)
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT sum(c2) FROM "S 1"."T 1"
-(7 rows)
+ Query Identifier: 3918755703148213917
+(8 rows)
 
 select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
  sum  
@@ -3586,7 +3673,8 @@
                      Output: (sum((t2.c1 + t1."C 1"))), t2.c1
                      Relations: Aggregate on (public.ft2 t2)
                      Remote SQL: SELECT sum(("C 1" + $1::integer)), "C 1" FROM "S 1"."T 1" GROUP BY 2
-(16 rows)
+ Query Identifier: -6805574336062215164
+(17 rows)
 
 select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
  c2 | sum 
@@ -3626,7 +3714,8 @@
          ->  Foreign Scan on public.ft2 ref_3
                Output: ref_3.c3
                Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c3 = '00001'))
-(15 rows)
+ Query Identifier: -9100976581141143487
+(16 rows)
 
 SELECT ref_0.c2, subq_1.*
 FROM
@@ -3674,7 +3763,8 @@
                            Output: 13, (avg(ft1.c1)), NULL::bigint
                            Relations: Aggregate on ((public.ft2) LEFT JOIN (public.ft1))
                            Remote SQL: SELECT 13, avg(r1."C 1"), NULL::bigint FROM ("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1"))))
-(17 rows)
+ Query Identifier: 1909152090506088023
+(18 rows)
 
 select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
  sum | count 
@@ -3698,7 +3788,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c1
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(10 rows)
+ Query Identifier: 5339180436203806220
+(11 rows)
 
 select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
  c2 |  sum   
@@ -3723,7 +3814,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c1
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(10 rows)
+ Query Identifier: 5339180436203806220
+(11 rows)
 
 select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
  c2 |  sum   
@@ -3748,7 +3840,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c6, c1
                Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(10 rows)
+ Query Identifier: -4605582297951086838
+(11 rows)
 
 select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
  c2 | c6 |  sum  
@@ -3774,7 +3867,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c1
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(9 rows)
+ Query Identifier: 4224525631997728185
+(10 rows)
 
 select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
  c2 |  sum  | grouping 
@@ -3798,7 +3892,8 @@
                Output: ((sum(c1) / 1000)), c2
                Relations: Aggregate on (public.ft2)
                Remote SQL: SELECT (sum("C 1") / 1000), c2 FROM "S 1"."T 1" WHERE ((c2 < 6)) GROUP BY 2
-(9 rows)
+ Query Identifier: -7764616372804551950
+(10 rows)
 
 select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
  s  
@@ -3824,7 +3919,8 @@
                      Output: c2, ((c2 % 2)), (sum(c2))
                      Relations: Aggregate on (public.ft2)
                      Remote SQL: SELECT c2, (c2 % 2), sum(c2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
-(12 rows)
+ Query Identifier: 757744878404027692
+(13 rows)
 
 select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
  c2 | sum | count 
@@ -3857,7 +3953,8 @@
                      Output: c2, ((c2 % 2))
                      Relations: Aggregate on (public.ft1)
                      Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
-(12 rows)
+ Query Identifier: -4389753848787315987
+(13 rows)
 
 select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
  c2 |  array_agg  
@@ -3890,7 +3987,8 @@
                      Output: c2, ((c2 % 2))
                      Relations: Aggregate on (public.ft1)
                      Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
-(12 rows)
+ Query Identifier: 2714691856417227744
+(13 rows)
 
 select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
  c2 |  array_agg  
@@ -3919,7 +4017,8 @@
    Output: t1.c3, t2.c3
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1.c3, r2.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2."C 1" = 2)) AND ((r1."C 1" = 1))))
-(4 rows)
+ Query Identifier: -2365112312415275213
+(5 rows)
 
 EXECUTE st1(1, 1);
   c3   |  c3   
@@ -3953,7 +4052,8 @@
                      Output: t2.c3
                      Filter: (date(t2.c4) = '01-17-1970'::date)
                      Remote SQL: SELECT c3, c4 FROM "S 1"."T 1" WHERE (("C 1" > 10))
-(15 rows)
+ Query Identifier: 8074925392302903878
+(16 rows)
 
 EXECUTE st2(10, 20);
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -3986,7 +4086,8 @@
                ->  Foreign Scan on public.ft2 t2
                      Output: t2.c3
                      Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE (("C 1" > 10)) AND ((date(c5) = '1970-01-17'::date))
-(14 rows)
+ Query Identifier: 8074925392302903878
+(15 rows)
 
 EXECUTE st3(10, 20);
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4007,7 +4108,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -7003050999629281410
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4015,7 +4117,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -7003050999629281410
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4023,7 +4126,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -7003050999629281410
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4031,7 +4135,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -7003050999629281410
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4039,7 +4144,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -7003050999629281410
+(4 rows)
 
 -- once we try it enough times, should switch to generic plan
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
@@ -4048,7 +4154,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
-(3 rows)
+ Query Identifier: -7003050999629281410
+(4 rows)
 
 -- value of $1 should not be sent to remote
 PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
@@ -4059,7 +4166,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 3956684188828249929
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4068,7 +4176,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 3956684188828249929
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4077,7 +4186,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 3956684188828249929
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4086,7 +4196,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 3956684188828249929
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4095,7 +4206,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 3956684188828249929
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                               QUERY PLAN                                               
@@ -4104,7 +4216,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = $1)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
-(4 rows)
+ Query Identifier: 3956684188828249929
+(5 rows)
 
 EXECUTE st5('foo', 1);
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4120,7 +4233,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
-(3 rows)
+ Query Identifier: 1379822370132450121
+(4 rows)
 
 PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
@@ -4131,7 +4245,8 @@
    Batch Size: 1
    ->  Result
          Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
-(5 rows)
+ Query Identifier: 7609231821340639266
+(6 rows)
 
 ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
 ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 0');
@@ -4141,7 +4256,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 0" WHERE (("C 1" = c2))
-(3 rows)
+ Query Identifier: 1379822370132450121
+(4 rows)
 
 EXECUTE st6;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4165,7 +4281,8 @@
    Batch Size: 1
    ->  Result
          Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
-(5 rows)
+ Query Identifier: 7609231821340639266
+(6 rows)
 
 ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
 ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 1');
@@ -4177,7 +4294,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
-(4 rows)
+ Query Identifier: 3623014928691164139
+(5 rows)
 
 ALTER SERVER loopback OPTIONS (DROP extensions);
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
@@ -4189,7 +4307,8 @@
          Output: c3
          Filter: (t1.c1 === t1.c2)
          Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: 3623014928691164139
+(7 rows)
 
 EXECUTE st8;
  count 
@@ -4218,7 +4337,8 @@
          Output: c1, c2, c3, c4, c5, c6, c7, c8
          Filter: (t1.tableoid = '1259'::oid)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: 4875082250752327056
+(7 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4233,7 +4353,8 @@
  Foreign Scan on public.ft1 t1
    Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 5089503226726798371
+(4 rows)
 
 SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
  tableoid | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4248,7 +4369,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'))
-(3 rows)
+ Query Identifier: -729679028507535264
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4263,7 +4385,8 @@
  Foreign Scan on public.ft1 t1
    Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 4766672000151775568
+(4 rows)
 
 SELECT ctid, * FROM ft1 t1 LIMIT 1;
  ctid  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4345,7 +4468,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c8 = 'foo')) LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 5561391430484376472
+(4 rows)
 
 SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4360,7 +4484,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (('foo' = c8)) LIMIT 1::bigint
-(3 rows)
+ Query Identifier: -398456466868808072
+(4 rows)
 
 SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4435,7 +4560,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
-(3 rows)
+ Query Identifier: 827302453423880277
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                QUERY PLAN                               
@@ -4443,7 +4569,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
-(3 rows)
+ Query Identifier: -7640082492816548050
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                QUERY PLAN                               
@@ -4451,7 +4578,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f2 = 'foo'))
-(3 rows)
+ Query Identifier: 827302453423880277
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                QUERY PLAN                               
@@ -4459,7 +4587,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f3 = 'foo'))
-(3 rows)
+ Query Identifier: -160748024624609702
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 f, loct3 l
   where f.f3 = l.f3 and l.f1 = 'foo';
@@ -4473,7 +4602,8 @@
    ->  Foreign Scan on public.ft3 f
          Output: f.f1, f.f2, f.f3
          Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE (($1::character varying(10) = f3))
-(8 rows)
+ Query Identifier: -3861538100278558331
+(9 rows)
 
 -- can't be sent to remote
 explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
@@ -4483,7 +4613,8 @@
    Output: f1, f2, f3
    Filter: ((ft3.f1)::text = 'foo'::text)
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: 7846270492276011754
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                     QUERY PLAN                     
@@ -4492,7 +4623,8 @@
    Output: f1, f2, f3
    Filter: (ft3.f1 = 'foo'::text COLLATE "C")
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -6609201750297115703
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                     QUERY PLAN                     
@@ -4501,7 +4633,8 @@
    Output: f1, f2, f3
    Filter: ((ft3.f2)::text = 'foo'::text)
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -7640082492816548050
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                     QUERY PLAN                     
@@ -4510,7 +4643,8 @@
    Output: f1, f2, f3
    Filter: (ft3.f2 = 'foo'::text COLLATE "C")
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -6609201750297115703
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 f, loct3 l
   where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
@@ -4528,7 +4662,8 @@
          ->  Index Scan using loct3_f1_key on public.loct3 l
                Output: l.f1, l.f2, l.f3
                Index Cond: (l.f1 = 'foo'::text)
-(12 rows)
+ Query Identifier: -5807817535465622515
+(13 rows)
 
 -- ===================================================================
 -- test writable foreign table stuff
@@ -4545,7 +4680,8 @@
          ->  Foreign Scan on public.ft2 ft2_1
                Output: (ft2_1.c1 + 1000), (ft2_1.c2 + 100), (ft2_1.c3 || ft2_1.c3)
                Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" LIMIT 20::bigint
-(8 rows)
+ Query Identifier: -8977724053920078741
+(9 rows)
 
 INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
 INSERT INTO ft2 (c1,c2,c3)
@@ -4565,7 +4701,8 @@
  Update on public.ft2
    ->  Foreign Update on public.ft2
          Remote SQL: UPDATE "S 1"."T 1" SET c2 = (c2 + 300), c3 = (c3 || '_update3') WHERE ((("C 1" % 10) = 3))
-(3 rows)
+ Query Identifier: -1818884165731077037
+(4 rows)
 
 UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
 EXPLAIN (verbose, costs off)
@@ -4576,7 +4713,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    ->  Foreign Update on public.ft2
          Remote SQL: UPDATE "S 1"."T 1" SET c2 = (c2 + 400), c3 = (c3 || '_update7') WHERE ((("C 1" % 10) = 7)) RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
-(4 rows)
+ Query Identifier: -5975532887897191514
+(5 rows)
 
 UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
   c1  | c2  |         c3         |              c4              |            c5            | c6 |     c7     | c8  
@@ -4688,15 +4826,10 @@
 EXPLAIN (verbose, costs off)
 UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
-                                                                                                QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Update on public.ft2
-   ->  Foreign Update
-         Remote SQL: UPDATE "S 1"."T 1" r1 SET c2 = (r1.c2 + 500), c3 = (r1.c3 || '_update9'), c7 = 'ft2       '::character(10) FROM "S 1"."T 1" r2 WHERE ((r1.c2 = r2."C 1")) AND (((r2."C 1" % 10) = 9))
-(3 rows)
-
+ERROR:  cache lookup failed for type 1042
 UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
+ERROR:  cache lookup failed for type 1042
 EXPLAIN (verbose, costs off)
   DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;                               -- can be pushed down
                                          QUERY PLAN                                         
@@ -4705,7 +4838,8 @@
    Output: c1, c4
    ->  Foreign Delete on public.ft2
          Remote SQL: DELETE FROM "S 1"."T 1" WHERE ((("C 1" % 10) = 5)) RETURNING "C 1", c4
-(4 rows)
+ Query Identifier: 7139148743928486131
+(5 rows)
 
 DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;
   c1  |              c4              
@@ -4822,7 +4956,8 @@
  Delete on public.ft2
    ->  Foreign Delete
          Remote SQL: DELETE FROM "S 1"."T 1" r1 USING "S 1"."T 1" r2 WHERE ((r1.c2 = r2."C 1")) AND (((r2."C 1" % 10) = 2))
-(3 rows)
+ Query Identifier: -2794451787984265126
+(4 rows)
 
 DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
 SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
@@ -4834,7 +4969,7 @@
     6 |   6 | 00006              | Wed Jan 07 00:00:00 1970 PST
     7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 PST
     8 |   8 | 00008              | Fri Jan 09 00:00:00 1970 PST
-    9 | 509 | 00009_update9      | Sat Jan 10 00:00:00 1970 PST
+    9 |   9 | 00009              | Sat Jan 10 00:00:00 1970 PST
    10 |   0 | 00010              | Sun Jan 11 00:00:00 1970 PST
    11 |   1 | 00011              | Mon Jan 12 00:00:00 1970 PST
    13 | 303 | 00013_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -4842,7 +4977,7 @@
    16 |   6 | 00016              | Sat Jan 17 00:00:00 1970 PST
    17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 PST
    18 |   8 | 00018              | Mon Jan 19 00:00:00 1970 PST
-   19 | 509 | 00019_update9      | Tue Jan 20 00:00:00 1970 PST
+   19 |   9 | 00019              | Tue Jan 20 00:00:00 1970 PST
    20 |   0 | 00020              | Wed Jan 21 00:00:00 1970 PST
    21 |   1 | 00021              | Thu Jan 22 00:00:00 1970 PST
    23 | 303 | 00023_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -4850,7 +4985,7 @@
    26 |   6 | 00026              | Tue Jan 27 00:00:00 1970 PST
    27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 PST
    28 |   8 | 00028              | Thu Jan 29 00:00:00 1970 PST
-   29 | 509 | 00029_update9      | Fri Jan 30 00:00:00 1970 PST
+   29 |   9 | 00029              | Fri Jan 30 00:00:00 1970 PST
    30 |   0 | 00030              | Sat Jan 31 00:00:00 1970 PST
    31 |   1 | 00031              | Sun Feb 01 00:00:00 1970 PST
    33 | 303 | 00033_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -4858,7 +4993,7 @@
    36 |   6 | 00036              | Fri Feb 06 00:00:00 1970 PST
    37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 PST
    38 |   8 | 00038              | Sun Feb 08 00:00:00 1970 PST
-   39 | 509 | 00039_update9      | Mon Feb 09 00:00:00 1970 PST
+   39 |   9 | 00039              | Mon Feb 09 00:00:00 1970 PST
    40 |   0 | 00040              | Tue Feb 10 00:00:00 1970 PST
    41 |   1 | 00041              | Wed Feb 11 00:00:00 1970 PST
    43 | 303 | 00043_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -4866,7 +5001,7 @@
    46 |   6 | 00046              | Mon Feb 16 00:00:00 1970 PST
    47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 PST
    48 |   8 | 00048              | Wed Feb 18 00:00:00 1970 PST
-   49 | 509 | 00049_update9      | Thu Feb 19 00:00:00 1970 PST
+   49 |   9 | 00049              | Thu Feb 19 00:00:00 1970 PST
    50 |   0 | 00050              | Fri Feb 20 00:00:00 1970 PST
    51 |   1 | 00051              | Sat Feb 21 00:00:00 1970 PST
    53 | 303 | 00053_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -4874,7 +5009,7 @@
    56 |   6 | 00056              | Thu Feb 26 00:00:00 1970 PST
    57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 PST
    58 |   8 | 00058              | Sat Feb 28 00:00:00 1970 PST
-   59 | 509 | 00059_update9      | Sun Mar 01 00:00:00 1970 PST
+   59 |   9 | 00059              | Sun Mar 01 00:00:00 1970 PST
    60 |   0 | 00060              | Mon Mar 02 00:00:00 1970 PST
    61 |   1 | 00061              | Tue Mar 03 00:00:00 1970 PST
    63 | 303 | 00063_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -4882,7 +5017,7 @@
    66 |   6 | 00066              | Sun Mar 08 00:00:00 1970 PST
    67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 PST
    68 |   8 | 00068              | Tue Mar 10 00:00:00 1970 PST
-   69 | 509 | 00069_update9      | Wed Mar 11 00:00:00 1970 PST
+   69 |   9 | 00069              | Wed Mar 11 00:00:00 1970 PST
    70 |   0 | 00070              | Thu Mar 12 00:00:00 1970 PST
    71 |   1 | 00071              | Fri Mar 13 00:00:00 1970 PST
    73 | 303 | 00073_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -4890,7 +5025,7 @@
    76 |   6 | 00076              | Wed Mar 18 00:00:00 1970 PST
    77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 PST
    78 |   8 | 00078              | Fri Mar 20 00:00:00 1970 PST
-   79 | 509 | 00079_update9      | Sat Mar 21 00:00:00 1970 PST
+   79 |   9 | 00079              | Sat Mar 21 00:00:00 1970 PST
    80 |   0 | 00080              | Sun Mar 22 00:00:00 1970 PST
    81 |   1 | 00081              | Mon Mar 23 00:00:00 1970 PST
    83 | 303 | 00083_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -4898,7 +5033,7 @@
    86 |   6 | 00086              | Sat Mar 28 00:00:00 1970 PST
    87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 PST
    88 |   8 | 00088              | Mon Mar 30 00:00:00 1970 PST
-   89 | 509 | 00089_update9      | Tue Mar 31 00:00:00 1970 PST
+   89 |   9 | 00089              | Tue Mar 31 00:00:00 1970 PST
    90 |   0 | 00090              | Wed Apr 01 00:00:00 1970 PST
    91 |   1 | 00091              | Thu Apr 02 00:00:00 1970 PST
    93 | 303 | 00093_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -4906,7 +5041,7 @@
    96 |   6 | 00096              | Tue Apr 07 00:00:00 1970 PST
    97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 PST
    98 |   8 | 00098              | Thu Apr 09 00:00:00 1970 PST
-   99 | 509 | 00099_update9      | Fri Apr 10 00:00:00 1970 PST
+   99 |   9 | 00099              | Fri Apr 10 00:00:00 1970 PST
   100 |   0 | 00100              | Thu Jan 01 00:00:00 1970 PST
   101 |   1 | 00101              | Fri Jan 02 00:00:00 1970 PST
   103 | 303 | 00103_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -4914,7 +5049,7 @@
   106 |   6 | 00106              | Wed Jan 07 00:00:00 1970 PST
   107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 PST
   108 |   8 | 00108              | Fri Jan 09 00:00:00 1970 PST
-  109 | 509 | 00109_update9      | Sat Jan 10 00:00:00 1970 PST
+  109 |   9 | 00109              | Sat Jan 10 00:00:00 1970 PST
   110 |   0 | 00110              | Sun Jan 11 00:00:00 1970 PST
   111 |   1 | 00111              | Mon Jan 12 00:00:00 1970 PST
   113 | 303 | 00113_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -4922,7 +5057,7 @@
   116 |   6 | 00116              | Sat Jan 17 00:00:00 1970 PST
   117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 PST
   118 |   8 | 00118              | Mon Jan 19 00:00:00 1970 PST
-  119 | 509 | 00119_update9      | Tue Jan 20 00:00:00 1970 PST
+  119 |   9 | 00119              | Tue Jan 20 00:00:00 1970 PST
   120 |   0 | 00120              | Wed Jan 21 00:00:00 1970 PST
   121 |   1 | 00121              | Thu Jan 22 00:00:00 1970 PST
   123 | 303 | 00123_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -4930,7 +5065,7 @@
   126 |   6 | 00126              | Tue Jan 27 00:00:00 1970 PST
   127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 PST
   128 |   8 | 00128              | Thu Jan 29 00:00:00 1970 PST
-  129 | 509 | 00129_update9      | Fri Jan 30 00:00:00 1970 PST
+  129 |   9 | 00129              | Fri Jan 30 00:00:00 1970 PST
   130 |   0 | 00130              | Sat Jan 31 00:00:00 1970 PST
   131 |   1 | 00131              | Sun Feb 01 00:00:00 1970 PST
   133 | 303 | 00133_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -4938,7 +5073,7 @@
   136 |   6 | 00136              | Fri Feb 06 00:00:00 1970 PST
   137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 PST
   138 |   8 | 00138              | Sun Feb 08 00:00:00 1970 PST
-  139 | 509 | 00139_update9      | Mon Feb 09 00:00:00 1970 PST
+  139 |   9 | 00139              | Mon Feb 09 00:00:00 1970 PST
   140 |   0 | 00140              | Tue Feb 10 00:00:00 1970 PST
   141 |   1 | 00141              | Wed Feb 11 00:00:00 1970 PST
   143 | 303 | 00143_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -4946,7 +5081,7 @@
   146 |   6 | 00146              | Mon Feb 16 00:00:00 1970 PST
   147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 PST
   148 |   8 | 00148              | Wed Feb 18 00:00:00 1970 PST
-  149 | 509 | 00149_update9      | Thu Feb 19 00:00:00 1970 PST
+  149 |   9 | 00149              | Thu Feb 19 00:00:00 1970 PST
   150 |   0 | 00150              | Fri Feb 20 00:00:00 1970 PST
   151 |   1 | 00151              | Sat Feb 21 00:00:00 1970 PST
   153 | 303 | 00153_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -4954,7 +5089,7 @@
   156 |   6 | 00156              | Thu Feb 26 00:00:00 1970 PST
   157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 PST
   158 |   8 | 00158              | Sat Feb 28 00:00:00 1970 PST
-  159 | 509 | 00159_update9      | Sun Mar 01 00:00:00 1970 PST
+  159 |   9 | 00159              | Sun Mar 01 00:00:00 1970 PST
   160 |   0 | 00160              | Mon Mar 02 00:00:00 1970 PST
   161 |   1 | 00161              | Tue Mar 03 00:00:00 1970 PST
   163 | 303 | 00163_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -4962,7 +5097,7 @@
   166 |   6 | 00166              | Sun Mar 08 00:00:00 1970 PST
   167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 PST
   168 |   8 | 00168              | Tue Mar 10 00:00:00 1970 PST
-  169 | 509 | 00169_update9      | Wed Mar 11 00:00:00 1970 PST
+  169 |   9 | 00169              | Wed Mar 11 00:00:00 1970 PST
   170 |   0 | 00170              | Thu Mar 12 00:00:00 1970 PST
   171 |   1 | 00171              | Fri Mar 13 00:00:00 1970 PST
   173 | 303 | 00173_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -4970,7 +5105,7 @@
   176 |   6 | 00176              | Wed Mar 18 00:00:00 1970 PST
   177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 PST
   178 |   8 | 00178              | Fri Mar 20 00:00:00 1970 PST
-  179 | 509 | 00179_update9      | Sat Mar 21 00:00:00 1970 PST
+  179 |   9 | 00179              | Sat Mar 21 00:00:00 1970 PST
   180 |   0 | 00180              | Sun Mar 22 00:00:00 1970 PST
   181 |   1 | 00181              | Mon Mar 23 00:00:00 1970 PST
   183 | 303 | 00183_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -4978,7 +5113,7 @@
   186 |   6 | 00186              | Sat Mar 28 00:00:00 1970 PST
   187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 PST
   188 |   8 | 00188              | Mon Mar 30 00:00:00 1970 PST
-  189 | 509 | 00189_update9      | Tue Mar 31 00:00:00 1970 PST
+  189 |   9 | 00189              | Tue Mar 31 00:00:00 1970 PST
   190 |   0 | 00190              | Wed Apr 01 00:00:00 1970 PST
   191 |   1 | 00191              | Thu Apr 02 00:00:00 1970 PST
   193 | 303 | 00193_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -4986,7 +5121,7 @@
   196 |   6 | 00196              | Tue Apr 07 00:00:00 1970 PST
   197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 PST
   198 |   8 | 00198              | Thu Apr 09 00:00:00 1970 PST
-  199 | 509 | 00199_update9      | Fri Apr 10 00:00:00 1970 PST
+  199 |   9 | 00199              | Fri Apr 10 00:00:00 1970 PST
   200 |   0 | 00200              | Thu Jan 01 00:00:00 1970 PST
   201 |   1 | 00201              | Fri Jan 02 00:00:00 1970 PST
   203 | 303 | 00203_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -4994,7 +5129,7 @@
   206 |   6 | 00206              | Wed Jan 07 00:00:00 1970 PST
   207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 PST
   208 |   8 | 00208              | Fri Jan 09 00:00:00 1970 PST
-  209 | 509 | 00209_update9      | Sat Jan 10 00:00:00 1970 PST
+  209 |   9 | 00209              | Sat Jan 10 00:00:00 1970 PST
   210 |   0 | 00210              | Sun Jan 11 00:00:00 1970 PST
   211 |   1 | 00211              | Mon Jan 12 00:00:00 1970 PST
   213 | 303 | 00213_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5002,7 +5137,7 @@
   216 |   6 | 00216              | Sat Jan 17 00:00:00 1970 PST
   217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 PST
   218 |   8 | 00218              | Mon Jan 19 00:00:00 1970 PST
-  219 | 509 | 00219_update9      | Tue Jan 20 00:00:00 1970 PST
+  219 |   9 | 00219              | Tue Jan 20 00:00:00 1970 PST
   220 |   0 | 00220              | Wed Jan 21 00:00:00 1970 PST
   221 |   1 | 00221              | Thu Jan 22 00:00:00 1970 PST
   223 | 303 | 00223_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5010,7 +5145,7 @@
   226 |   6 | 00226              | Tue Jan 27 00:00:00 1970 PST
   227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 PST
   228 |   8 | 00228              | Thu Jan 29 00:00:00 1970 PST
-  229 | 509 | 00229_update9      | Fri Jan 30 00:00:00 1970 PST
+  229 |   9 | 00229              | Fri Jan 30 00:00:00 1970 PST
   230 |   0 | 00230              | Sat Jan 31 00:00:00 1970 PST
   231 |   1 | 00231              | Sun Feb 01 00:00:00 1970 PST
   233 | 303 | 00233_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5018,7 +5153,7 @@
   236 |   6 | 00236              | Fri Feb 06 00:00:00 1970 PST
   237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 PST
   238 |   8 | 00238              | Sun Feb 08 00:00:00 1970 PST
-  239 | 509 | 00239_update9      | Mon Feb 09 00:00:00 1970 PST
+  239 |   9 | 00239              | Mon Feb 09 00:00:00 1970 PST
   240 |   0 | 00240              | Tue Feb 10 00:00:00 1970 PST
   241 |   1 | 00241              | Wed Feb 11 00:00:00 1970 PST
   243 | 303 | 00243_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5026,7 +5161,7 @@
   246 |   6 | 00246              | Mon Feb 16 00:00:00 1970 PST
   247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 PST
   248 |   8 | 00248              | Wed Feb 18 00:00:00 1970 PST
-  249 | 509 | 00249_update9      | Thu Feb 19 00:00:00 1970 PST
+  249 |   9 | 00249              | Thu Feb 19 00:00:00 1970 PST
   250 |   0 | 00250              | Fri Feb 20 00:00:00 1970 PST
   251 |   1 | 00251              | Sat Feb 21 00:00:00 1970 PST
   253 | 303 | 00253_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5034,7 +5169,7 @@
   256 |   6 | 00256              | Thu Feb 26 00:00:00 1970 PST
   257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 PST
   258 |   8 | 00258              | Sat Feb 28 00:00:00 1970 PST
-  259 | 509 | 00259_update9      | Sun Mar 01 00:00:00 1970 PST
+  259 |   9 | 00259              | Sun Mar 01 00:00:00 1970 PST
   260 |   0 | 00260              | Mon Mar 02 00:00:00 1970 PST
   261 |   1 | 00261              | Tue Mar 03 00:00:00 1970 PST
   263 | 303 | 00263_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5042,7 +5177,7 @@
   266 |   6 | 00266              | Sun Mar 08 00:00:00 1970 PST
   267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 PST
   268 |   8 | 00268              | Tue Mar 10 00:00:00 1970 PST
-  269 | 509 | 00269_update9      | Wed Mar 11 00:00:00 1970 PST
+  269 |   9 | 00269              | Wed Mar 11 00:00:00 1970 PST
   270 |   0 | 00270              | Thu Mar 12 00:00:00 1970 PST
   271 |   1 | 00271              | Fri Mar 13 00:00:00 1970 PST
   273 | 303 | 00273_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5050,7 +5185,7 @@
   276 |   6 | 00276              | Wed Mar 18 00:00:00 1970 PST
   277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 PST
   278 |   8 | 00278              | Fri Mar 20 00:00:00 1970 PST
-  279 | 509 | 00279_update9      | Sat Mar 21 00:00:00 1970 PST
+  279 |   9 | 00279              | Sat Mar 21 00:00:00 1970 PST
   280 |   0 | 00280              | Sun Mar 22 00:00:00 1970 PST
   281 |   1 | 00281              | Mon Mar 23 00:00:00 1970 PST
   283 | 303 | 00283_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5058,7 +5193,7 @@
   286 |   6 | 00286              | Sat Mar 28 00:00:00 1970 PST
   287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 PST
   288 |   8 | 00288              | Mon Mar 30 00:00:00 1970 PST
-  289 | 509 | 00289_update9      | Tue Mar 31 00:00:00 1970 PST
+  289 |   9 | 00289              | Tue Mar 31 00:00:00 1970 PST
   290 |   0 | 00290              | Wed Apr 01 00:00:00 1970 PST
   291 |   1 | 00291              | Thu Apr 02 00:00:00 1970 PST
   293 | 303 | 00293_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5066,7 +5201,7 @@
   296 |   6 | 00296              | Tue Apr 07 00:00:00 1970 PST
   297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 PST
   298 |   8 | 00298              | Thu Apr 09 00:00:00 1970 PST
-  299 | 509 | 00299_update9      | Fri Apr 10 00:00:00 1970 PST
+  299 |   9 | 00299              | Fri Apr 10 00:00:00 1970 PST
   300 |   0 | 00300              | Thu Jan 01 00:00:00 1970 PST
   301 |   1 | 00301              | Fri Jan 02 00:00:00 1970 PST
   303 | 303 | 00303_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5074,7 +5209,7 @@
   306 |   6 | 00306              | Wed Jan 07 00:00:00 1970 PST
   307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 PST
   308 |   8 | 00308              | Fri Jan 09 00:00:00 1970 PST
-  309 | 509 | 00309_update9      | Sat Jan 10 00:00:00 1970 PST
+  309 |   9 | 00309              | Sat Jan 10 00:00:00 1970 PST
   310 |   0 | 00310              | Sun Jan 11 00:00:00 1970 PST
   311 |   1 | 00311              | Mon Jan 12 00:00:00 1970 PST
   313 | 303 | 00313_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5082,7 +5217,7 @@
   316 |   6 | 00316              | Sat Jan 17 00:00:00 1970 PST
   317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 PST
   318 |   8 | 00318              | Mon Jan 19 00:00:00 1970 PST
-  319 | 509 | 00319_update9      | Tue Jan 20 00:00:00 1970 PST
+  319 |   9 | 00319              | Tue Jan 20 00:00:00 1970 PST
   320 |   0 | 00320              | Wed Jan 21 00:00:00 1970 PST
   321 |   1 | 00321              | Thu Jan 22 00:00:00 1970 PST
   323 | 303 | 00323_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5090,7 +5225,7 @@
   326 |   6 | 00326              | Tue Jan 27 00:00:00 1970 PST
   327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 PST
   328 |   8 | 00328              | Thu Jan 29 00:00:00 1970 PST
-  329 | 509 | 00329_update9      | Fri Jan 30 00:00:00 1970 PST
+  329 |   9 | 00329              | Fri Jan 30 00:00:00 1970 PST
   330 |   0 | 00330              | Sat Jan 31 00:00:00 1970 PST
   331 |   1 | 00331              | Sun Feb 01 00:00:00 1970 PST
   333 | 303 | 00333_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5098,7 +5233,7 @@
   336 |   6 | 00336              | Fri Feb 06 00:00:00 1970 PST
   337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 PST
   338 |   8 | 00338              | Sun Feb 08 00:00:00 1970 PST
-  339 | 509 | 00339_update9      | Mon Feb 09 00:00:00 1970 PST
+  339 |   9 | 00339              | Mon Feb 09 00:00:00 1970 PST
   340 |   0 | 00340              | Tue Feb 10 00:00:00 1970 PST
   341 |   1 | 00341              | Wed Feb 11 00:00:00 1970 PST
   343 | 303 | 00343_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5106,7 +5241,7 @@
   346 |   6 | 00346              | Mon Feb 16 00:00:00 1970 PST
   347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 PST
   348 |   8 | 00348              | Wed Feb 18 00:00:00 1970 PST
-  349 | 509 | 00349_update9      | Thu Feb 19 00:00:00 1970 PST
+  349 |   9 | 00349              | Thu Feb 19 00:00:00 1970 PST
   350 |   0 | 00350              | Fri Feb 20 00:00:00 1970 PST
   351 |   1 | 00351              | Sat Feb 21 00:00:00 1970 PST
   353 | 303 | 00353_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5114,7 +5249,7 @@
   356 |   6 | 00356              | Thu Feb 26 00:00:00 1970 PST
   357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 PST
   358 |   8 | 00358              | Sat Feb 28 00:00:00 1970 PST
-  359 | 509 | 00359_update9      | Sun Mar 01 00:00:00 1970 PST
+  359 |   9 | 00359              | Sun Mar 01 00:00:00 1970 PST
   360 |   0 | 00360              | Mon Mar 02 00:00:00 1970 PST
   361 |   1 | 00361              | Tue Mar 03 00:00:00 1970 PST
   363 | 303 | 00363_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5122,7 +5257,7 @@
   366 |   6 | 00366              | Sun Mar 08 00:00:00 1970 PST
   367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 PST
   368 |   8 | 00368              | Tue Mar 10 00:00:00 1970 PST
-  369 | 509 | 00369_update9      | Wed Mar 11 00:00:00 1970 PST
+  369 |   9 | 00369              | Wed Mar 11 00:00:00 1970 PST
   370 |   0 | 00370              | Thu Mar 12 00:00:00 1970 PST
   371 |   1 | 00371              | Fri Mar 13 00:00:00 1970 PST
   373 | 303 | 00373_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5130,7 +5265,7 @@
   376 |   6 | 00376              | Wed Mar 18 00:00:00 1970 PST
   377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 PST
   378 |   8 | 00378              | Fri Mar 20 00:00:00 1970 PST
-  379 | 509 | 00379_update9      | Sat Mar 21 00:00:00 1970 PST
+  379 |   9 | 00379              | Sat Mar 21 00:00:00 1970 PST
   380 |   0 | 00380              | Sun Mar 22 00:00:00 1970 PST
   381 |   1 | 00381              | Mon Mar 23 00:00:00 1970 PST
   383 | 303 | 00383_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5138,7 +5273,7 @@
   386 |   6 | 00386              | Sat Mar 28 00:00:00 1970 PST
   387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 PST
   388 |   8 | 00388              | Mon Mar 30 00:00:00 1970 PST
-  389 | 509 | 00389_update9      | Tue Mar 31 00:00:00 1970 PST
+  389 |   9 | 00389              | Tue Mar 31 00:00:00 1970 PST
   390 |   0 | 00390              | Wed Apr 01 00:00:00 1970 PST
   391 |   1 | 00391              | Thu Apr 02 00:00:00 1970 PST
   393 | 303 | 00393_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5146,7 +5281,7 @@
   396 |   6 | 00396              | Tue Apr 07 00:00:00 1970 PST
   397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 PST
   398 |   8 | 00398              | Thu Apr 09 00:00:00 1970 PST
-  399 | 509 | 00399_update9      | Fri Apr 10 00:00:00 1970 PST
+  399 |   9 | 00399              | Fri Apr 10 00:00:00 1970 PST
   400 |   0 | 00400              | Thu Jan 01 00:00:00 1970 PST
   401 |   1 | 00401              | Fri Jan 02 00:00:00 1970 PST
   403 | 303 | 00403_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5154,7 +5289,7 @@
   406 |   6 | 00406              | Wed Jan 07 00:00:00 1970 PST
   407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 PST
   408 |   8 | 00408              | Fri Jan 09 00:00:00 1970 PST
-  409 | 509 | 00409_update9      | Sat Jan 10 00:00:00 1970 PST
+  409 |   9 | 00409              | Sat Jan 10 00:00:00 1970 PST
   410 |   0 | 00410              | Sun Jan 11 00:00:00 1970 PST
   411 |   1 | 00411              | Mon Jan 12 00:00:00 1970 PST
   413 | 303 | 00413_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5162,7 +5297,7 @@
   416 |   6 | 00416              | Sat Jan 17 00:00:00 1970 PST
   417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 PST
   418 |   8 | 00418              | Mon Jan 19 00:00:00 1970 PST
-  419 | 509 | 00419_update9      | Tue Jan 20 00:00:00 1970 PST
+  419 |   9 | 00419              | Tue Jan 20 00:00:00 1970 PST
   420 |   0 | 00420              | Wed Jan 21 00:00:00 1970 PST
   421 |   1 | 00421              | Thu Jan 22 00:00:00 1970 PST
   423 | 303 | 00423_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5170,7 +5305,7 @@
   426 |   6 | 00426              | Tue Jan 27 00:00:00 1970 PST
   427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 PST
   428 |   8 | 00428              | Thu Jan 29 00:00:00 1970 PST
-  429 | 509 | 00429_update9      | Fri Jan 30 00:00:00 1970 PST
+  429 |   9 | 00429              | Fri Jan 30 00:00:00 1970 PST
   430 |   0 | 00430              | Sat Jan 31 00:00:00 1970 PST
   431 |   1 | 00431              | Sun Feb 01 00:00:00 1970 PST
   433 | 303 | 00433_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5178,7 +5313,7 @@
   436 |   6 | 00436              | Fri Feb 06 00:00:00 1970 PST
   437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 PST
   438 |   8 | 00438              | Sun Feb 08 00:00:00 1970 PST
-  439 | 509 | 00439_update9      | Mon Feb 09 00:00:00 1970 PST
+  439 |   9 | 00439              | Mon Feb 09 00:00:00 1970 PST
   440 |   0 | 00440              | Tue Feb 10 00:00:00 1970 PST
   441 |   1 | 00441              | Wed Feb 11 00:00:00 1970 PST
   443 | 303 | 00443_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5186,7 +5321,7 @@
   446 |   6 | 00446              | Mon Feb 16 00:00:00 1970 PST
   447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 PST
   448 |   8 | 00448              | Wed Feb 18 00:00:00 1970 PST
-  449 | 509 | 00449_update9      | Thu Feb 19 00:00:00 1970 PST
+  449 |   9 | 00449              | Thu Feb 19 00:00:00 1970 PST
   450 |   0 | 00450              | Fri Feb 20 00:00:00 1970 PST
   451 |   1 | 00451              | Sat Feb 21 00:00:00 1970 PST
   453 | 303 | 00453_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5194,7 +5329,7 @@
   456 |   6 | 00456              | Thu Feb 26 00:00:00 1970 PST
   457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 PST
   458 |   8 | 00458              | Sat Feb 28 00:00:00 1970 PST
-  459 | 509 | 00459_update9      | Sun Mar 01 00:00:00 1970 PST
+  459 |   9 | 00459              | Sun Mar 01 00:00:00 1970 PST
   460 |   0 | 00460              | Mon Mar 02 00:00:00 1970 PST
   461 |   1 | 00461              | Tue Mar 03 00:00:00 1970 PST
   463 | 303 | 00463_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5202,7 +5337,7 @@
   466 |   6 | 00466              | Sun Mar 08 00:00:00 1970 PST
   467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 PST
   468 |   8 | 00468              | Tue Mar 10 00:00:00 1970 PST
-  469 | 509 | 00469_update9      | Wed Mar 11 00:00:00 1970 PST
+  469 |   9 | 00469              | Wed Mar 11 00:00:00 1970 PST
   470 |   0 | 00470              | Thu Mar 12 00:00:00 1970 PST
   471 |   1 | 00471              | Fri Mar 13 00:00:00 1970 PST
   473 | 303 | 00473_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5210,7 +5345,7 @@
   476 |   6 | 00476              | Wed Mar 18 00:00:00 1970 PST
   477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 PST
   478 |   8 | 00478              | Fri Mar 20 00:00:00 1970 PST
-  479 | 509 | 00479_update9      | Sat Mar 21 00:00:00 1970 PST
+  479 |   9 | 00479              | Sat Mar 21 00:00:00 1970 PST
   480 |   0 | 00480              | Sun Mar 22 00:00:00 1970 PST
   481 |   1 | 00481              | Mon Mar 23 00:00:00 1970 PST
   483 | 303 | 00483_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5218,7 +5353,7 @@
   486 |   6 | 00486              | Sat Mar 28 00:00:00 1970 PST
   487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 PST
   488 |   8 | 00488              | Mon Mar 30 00:00:00 1970 PST
-  489 | 509 | 00489_update9      | Tue Mar 31 00:00:00 1970 PST
+  489 |   9 | 00489              | Tue Mar 31 00:00:00 1970 PST
   490 |   0 | 00490              | Wed Apr 01 00:00:00 1970 PST
   491 |   1 | 00491              | Thu Apr 02 00:00:00 1970 PST
   493 | 303 | 00493_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5226,7 +5361,7 @@
   496 |   6 | 00496              | Tue Apr 07 00:00:00 1970 PST
   497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 PST
   498 |   8 | 00498              | Thu Apr 09 00:00:00 1970 PST
-  499 | 509 | 00499_update9      | Fri Apr 10 00:00:00 1970 PST
+  499 |   9 | 00499              | Fri Apr 10 00:00:00 1970 PST
   500 |   0 | 00500              | Thu Jan 01 00:00:00 1970 PST
   501 |   1 | 00501              | Fri Jan 02 00:00:00 1970 PST
   503 | 303 | 00503_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5234,7 +5369,7 @@
   506 |   6 | 00506              | Wed Jan 07 00:00:00 1970 PST
   507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 PST
   508 |   8 | 00508              | Fri Jan 09 00:00:00 1970 PST
-  509 | 509 | 00509_update9      | Sat Jan 10 00:00:00 1970 PST
+  509 |   9 | 00509              | Sat Jan 10 00:00:00 1970 PST
   510 |   0 | 00510              | Sun Jan 11 00:00:00 1970 PST
   511 |   1 | 00511              | Mon Jan 12 00:00:00 1970 PST
   513 | 303 | 00513_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5242,7 +5377,7 @@
   516 |   6 | 00516              | Sat Jan 17 00:00:00 1970 PST
   517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 PST
   518 |   8 | 00518              | Mon Jan 19 00:00:00 1970 PST
-  519 | 509 | 00519_update9      | Tue Jan 20 00:00:00 1970 PST
+  519 |   9 | 00519              | Tue Jan 20 00:00:00 1970 PST
   520 |   0 | 00520              | Wed Jan 21 00:00:00 1970 PST
   521 |   1 | 00521              | Thu Jan 22 00:00:00 1970 PST
   523 | 303 | 00523_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5250,7 +5385,7 @@
   526 |   6 | 00526              | Tue Jan 27 00:00:00 1970 PST
   527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 PST
   528 |   8 | 00528              | Thu Jan 29 00:00:00 1970 PST
-  529 | 509 | 00529_update9      | Fri Jan 30 00:00:00 1970 PST
+  529 |   9 | 00529              | Fri Jan 30 00:00:00 1970 PST
   530 |   0 | 00530              | Sat Jan 31 00:00:00 1970 PST
   531 |   1 | 00531              | Sun Feb 01 00:00:00 1970 PST
   533 | 303 | 00533_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5258,7 +5393,7 @@
   536 |   6 | 00536              | Fri Feb 06 00:00:00 1970 PST
   537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 PST
   538 |   8 | 00538              | Sun Feb 08 00:00:00 1970 PST
-  539 | 509 | 00539_update9      | Mon Feb 09 00:00:00 1970 PST
+  539 |   9 | 00539              | Mon Feb 09 00:00:00 1970 PST
   540 |   0 | 00540              | Tue Feb 10 00:00:00 1970 PST
   541 |   1 | 00541              | Wed Feb 11 00:00:00 1970 PST
   543 | 303 | 00543_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5266,7 +5401,7 @@
   546 |   6 | 00546              | Mon Feb 16 00:00:00 1970 PST
   547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 PST
   548 |   8 | 00548              | Wed Feb 18 00:00:00 1970 PST
-  549 | 509 | 00549_update9      | Thu Feb 19 00:00:00 1970 PST
+  549 |   9 | 00549              | Thu Feb 19 00:00:00 1970 PST
   550 |   0 | 00550              | Fri Feb 20 00:00:00 1970 PST
   551 |   1 | 00551              | Sat Feb 21 00:00:00 1970 PST
   553 | 303 | 00553_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5274,7 +5409,7 @@
   556 |   6 | 00556              | Thu Feb 26 00:00:00 1970 PST
   557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 PST
   558 |   8 | 00558              | Sat Feb 28 00:00:00 1970 PST
-  559 | 509 | 00559_update9      | Sun Mar 01 00:00:00 1970 PST
+  559 |   9 | 00559              | Sun Mar 01 00:00:00 1970 PST
   560 |   0 | 00560              | Mon Mar 02 00:00:00 1970 PST
   561 |   1 | 00561              | Tue Mar 03 00:00:00 1970 PST
   563 | 303 | 00563_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5282,7 +5417,7 @@
   566 |   6 | 00566              | Sun Mar 08 00:00:00 1970 PST
   567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 PST
   568 |   8 | 00568              | Tue Mar 10 00:00:00 1970 PST
-  569 | 509 | 00569_update9      | Wed Mar 11 00:00:00 1970 PST
+  569 |   9 | 00569              | Wed Mar 11 00:00:00 1970 PST
   570 |   0 | 00570              | Thu Mar 12 00:00:00 1970 PST
   571 |   1 | 00571              | Fri Mar 13 00:00:00 1970 PST
   573 | 303 | 00573_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5290,7 +5425,7 @@
   576 |   6 | 00576              | Wed Mar 18 00:00:00 1970 PST
   577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 PST
   578 |   8 | 00578              | Fri Mar 20 00:00:00 1970 PST
-  579 | 509 | 00579_update9      | Sat Mar 21 00:00:00 1970 PST
+  579 |   9 | 00579              | Sat Mar 21 00:00:00 1970 PST
   580 |   0 | 00580              | Sun Mar 22 00:00:00 1970 PST
   581 |   1 | 00581              | Mon Mar 23 00:00:00 1970 PST
   583 | 303 | 00583_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5298,7 +5433,7 @@
   586 |   6 | 00586              | Sat Mar 28 00:00:00 1970 PST
   587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 PST
   588 |   8 | 00588              | Mon Mar 30 00:00:00 1970 PST
-  589 | 509 | 00589_update9      | Tue Mar 31 00:00:00 1970 PST
+  589 |   9 | 00589              | Tue Mar 31 00:00:00 1970 PST
   590 |   0 | 00590              | Wed Apr 01 00:00:00 1970 PST
   591 |   1 | 00591              | Thu Apr 02 00:00:00 1970 PST
   593 | 303 | 00593_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5306,7 +5441,7 @@
   596 |   6 | 00596              | Tue Apr 07 00:00:00 1970 PST
   597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 PST
   598 |   8 | 00598              | Thu Apr 09 00:00:00 1970 PST
-  599 | 509 | 00599_update9      | Fri Apr 10 00:00:00 1970 PST
+  599 |   9 | 00599              | Fri Apr 10 00:00:00 1970 PST
   600 |   0 | 00600              | Thu Jan 01 00:00:00 1970 PST
   601 |   1 | 00601              | Fri Jan 02 00:00:00 1970 PST
   603 | 303 | 00603_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5314,7 +5449,7 @@
   606 |   6 | 00606              | Wed Jan 07 00:00:00 1970 PST
   607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 PST
   608 |   8 | 00608              | Fri Jan 09 00:00:00 1970 PST
-  609 | 509 | 00609_update9      | Sat Jan 10 00:00:00 1970 PST
+  609 |   9 | 00609              | Sat Jan 10 00:00:00 1970 PST
   610 |   0 | 00610              | Sun Jan 11 00:00:00 1970 PST
   611 |   1 | 00611              | Mon Jan 12 00:00:00 1970 PST
   613 | 303 | 00613_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5322,7 +5457,7 @@
   616 |   6 | 00616              | Sat Jan 17 00:00:00 1970 PST
   617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 PST
   618 |   8 | 00618              | Mon Jan 19 00:00:00 1970 PST
-  619 | 509 | 00619_update9      | Tue Jan 20 00:00:00 1970 PST
+  619 |   9 | 00619              | Tue Jan 20 00:00:00 1970 PST
   620 |   0 | 00620              | Wed Jan 21 00:00:00 1970 PST
   621 |   1 | 00621              | Thu Jan 22 00:00:00 1970 PST
   623 | 303 | 00623_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5330,7 +5465,7 @@
   626 |   6 | 00626              | Tue Jan 27 00:00:00 1970 PST
   627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 PST
   628 |   8 | 00628              | Thu Jan 29 00:00:00 1970 PST
-  629 | 509 | 00629_update9      | Fri Jan 30 00:00:00 1970 PST
+  629 |   9 | 00629              | Fri Jan 30 00:00:00 1970 PST
   630 |   0 | 00630              | Sat Jan 31 00:00:00 1970 PST
   631 |   1 | 00631              | Sun Feb 01 00:00:00 1970 PST
   633 | 303 | 00633_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5338,7 +5473,7 @@
   636 |   6 | 00636              | Fri Feb 06 00:00:00 1970 PST
   637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 PST
   638 |   8 | 00638              | Sun Feb 08 00:00:00 1970 PST
-  639 | 509 | 00639_update9      | Mon Feb 09 00:00:00 1970 PST
+  639 |   9 | 00639              | Mon Feb 09 00:00:00 1970 PST
   640 |   0 | 00640              | Tue Feb 10 00:00:00 1970 PST
   641 |   1 | 00641              | Wed Feb 11 00:00:00 1970 PST
   643 | 303 | 00643_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5346,7 +5481,7 @@
   646 |   6 | 00646              | Mon Feb 16 00:00:00 1970 PST
   647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 PST
   648 |   8 | 00648              | Wed Feb 18 00:00:00 1970 PST
-  649 | 509 | 00649_update9      | Thu Feb 19 00:00:00 1970 PST
+  649 |   9 | 00649              | Thu Feb 19 00:00:00 1970 PST
   650 |   0 | 00650              | Fri Feb 20 00:00:00 1970 PST
   651 |   1 | 00651              | Sat Feb 21 00:00:00 1970 PST
   653 | 303 | 00653_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5354,7 +5489,7 @@
   656 |   6 | 00656              | Thu Feb 26 00:00:00 1970 PST
   657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 PST
   658 |   8 | 00658              | Sat Feb 28 00:00:00 1970 PST
-  659 | 509 | 00659_update9      | Sun Mar 01 00:00:00 1970 PST
+  659 |   9 | 00659              | Sun Mar 01 00:00:00 1970 PST
   660 |   0 | 00660              | Mon Mar 02 00:00:00 1970 PST
   661 |   1 | 00661              | Tue Mar 03 00:00:00 1970 PST
   663 | 303 | 00663_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5362,7 +5497,7 @@
   666 |   6 | 00666              | Sun Mar 08 00:00:00 1970 PST
   667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 PST
   668 |   8 | 00668              | Tue Mar 10 00:00:00 1970 PST
-  669 | 509 | 00669_update9      | Wed Mar 11 00:00:00 1970 PST
+  669 |   9 | 00669              | Wed Mar 11 00:00:00 1970 PST
   670 |   0 | 00670              | Thu Mar 12 00:00:00 1970 PST
   671 |   1 | 00671              | Fri Mar 13 00:00:00 1970 PST
   673 | 303 | 00673_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5370,7 +5505,7 @@
   676 |   6 | 00676              | Wed Mar 18 00:00:00 1970 PST
   677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 PST
   678 |   8 | 00678              | Fri Mar 20 00:00:00 1970 PST
-  679 | 509 | 00679_update9      | Sat Mar 21 00:00:00 1970 PST
+  679 |   9 | 00679              | Sat Mar 21 00:00:00 1970 PST
   680 |   0 | 00680              | Sun Mar 22 00:00:00 1970 PST
   681 |   1 | 00681              | Mon Mar 23 00:00:00 1970 PST
   683 | 303 | 00683_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5378,7 +5513,7 @@
   686 |   6 | 00686              | Sat Mar 28 00:00:00 1970 PST
   687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 PST
   688 |   8 | 00688              | Mon Mar 30 00:00:00 1970 PST
-  689 | 509 | 00689_update9      | Tue Mar 31 00:00:00 1970 PST
+  689 |   9 | 00689              | Tue Mar 31 00:00:00 1970 PST
   690 |   0 | 00690              | Wed Apr 01 00:00:00 1970 PST
   691 |   1 | 00691              | Thu Apr 02 00:00:00 1970 PST
   693 | 303 | 00693_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5386,7 +5521,7 @@
   696 |   6 | 00696              | Tue Apr 07 00:00:00 1970 PST
   697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 PST
   698 |   8 | 00698              | Thu Apr 09 00:00:00 1970 PST
-  699 | 509 | 00699_update9      | Fri Apr 10 00:00:00 1970 PST
+  699 |   9 | 00699              | Fri Apr 10 00:00:00 1970 PST
   700 |   0 | 00700              | Thu Jan 01 00:00:00 1970 PST
   701 |   1 | 00701              | Fri Jan 02 00:00:00 1970 PST
   703 | 303 | 00703_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5394,7 +5529,7 @@
   706 |   6 | 00706              | Wed Jan 07 00:00:00 1970 PST
   707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 PST
   708 |   8 | 00708              | Fri Jan 09 00:00:00 1970 PST
-  709 | 509 | 00709_update9      | Sat Jan 10 00:00:00 1970 PST
+  709 |   9 | 00709              | Sat Jan 10 00:00:00 1970 PST
   710 |   0 | 00710              | Sun Jan 11 00:00:00 1970 PST
   711 |   1 | 00711              | Mon Jan 12 00:00:00 1970 PST
   713 | 303 | 00713_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5402,7 +5537,7 @@
   716 |   6 | 00716              | Sat Jan 17 00:00:00 1970 PST
   717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 PST
   718 |   8 | 00718              | Mon Jan 19 00:00:00 1970 PST
-  719 | 509 | 00719_update9      | Tue Jan 20 00:00:00 1970 PST
+  719 |   9 | 00719              | Tue Jan 20 00:00:00 1970 PST
   720 |   0 | 00720              | Wed Jan 21 00:00:00 1970 PST
   721 |   1 | 00721              | Thu Jan 22 00:00:00 1970 PST
   723 | 303 | 00723_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5410,7 +5545,7 @@
   726 |   6 | 00726              | Tue Jan 27 00:00:00 1970 PST
   727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 PST
   728 |   8 | 00728              | Thu Jan 29 00:00:00 1970 PST
-  729 | 509 | 00729_update9      | Fri Jan 30 00:00:00 1970 PST
+  729 |   9 | 00729              | Fri Jan 30 00:00:00 1970 PST
   730 |   0 | 00730              | Sat Jan 31 00:00:00 1970 PST
   731 |   1 | 00731              | Sun Feb 01 00:00:00 1970 PST
   733 | 303 | 00733_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5418,7 +5553,7 @@
   736 |   6 | 00736              | Fri Feb 06 00:00:00 1970 PST
   737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 PST
   738 |   8 | 00738              | Sun Feb 08 00:00:00 1970 PST
-  739 | 509 | 00739_update9      | Mon Feb 09 00:00:00 1970 PST
+  739 |   9 | 00739              | Mon Feb 09 00:00:00 1970 PST
   740 |   0 | 00740              | Tue Feb 10 00:00:00 1970 PST
   741 |   1 | 00741              | Wed Feb 11 00:00:00 1970 PST
   743 | 303 | 00743_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5426,7 +5561,7 @@
   746 |   6 | 00746              | Mon Feb 16 00:00:00 1970 PST
   747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 PST
   748 |   8 | 00748              | Wed Feb 18 00:00:00 1970 PST
-  749 | 509 | 00749_update9      | Thu Feb 19 00:00:00 1970 PST
+  749 |   9 | 00749              | Thu Feb 19 00:00:00 1970 PST
   750 |   0 | 00750              | Fri Feb 20 00:00:00 1970 PST
   751 |   1 | 00751              | Sat Feb 21 00:00:00 1970 PST
   753 | 303 | 00753_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5434,7 +5569,7 @@
   756 |   6 | 00756              | Thu Feb 26 00:00:00 1970 PST
   757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 PST
   758 |   8 | 00758              | Sat Feb 28 00:00:00 1970 PST
-  759 | 509 | 00759_update9      | Sun Mar 01 00:00:00 1970 PST
+  759 |   9 | 00759              | Sun Mar 01 00:00:00 1970 PST
   760 |   0 | 00760              | Mon Mar 02 00:00:00 1970 PST
   761 |   1 | 00761              | Tue Mar 03 00:00:00 1970 PST
   763 | 303 | 00763_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5442,7 +5577,7 @@
   766 |   6 | 00766              | Sun Mar 08 00:00:00 1970 PST
   767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 PST
   768 |   8 | 00768              | Tue Mar 10 00:00:00 1970 PST
-  769 | 509 | 00769_update9      | Wed Mar 11 00:00:00 1970 PST
+  769 |   9 | 00769              | Wed Mar 11 00:00:00 1970 PST
   770 |   0 | 00770              | Thu Mar 12 00:00:00 1970 PST
   771 |   1 | 00771              | Fri Mar 13 00:00:00 1970 PST
   773 | 303 | 00773_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5450,7 +5585,7 @@
   776 |   6 | 00776              | Wed Mar 18 00:00:00 1970 PST
   777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 PST
   778 |   8 | 00778              | Fri Mar 20 00:00:00 1970 PST
-  779 | 509 | 00779_update9      | Sat Mar 21 00:00:00 1970 PST
+  779 |   9 | 00779              | Sat Mar 21 00:00:00 1970 PST
   780 |   0 | 00780              | Sun Mar 22 00:00:00 1970 PST
   781 |   1 | 00781              | Mon Mar 23 00:00:00 1970 PST
   783 | 303 | 00783_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5458,7 +5593,7 @@
   786 |   6 | 00786              | Sat Mar 28 00:00:00 1970 PST
   787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 PST
   788 |   8 | 00788              | Mon Mar 30 00:00:00 1970 PST
-  789 | 509 | 00789_update9      | Tue Mar 31 00:00:00 1970 PST
+  789 |   9 | 00789              | Tue Mar 31 00:00:00 1970 PST
   790 |   0 | 00790              | Wed Apr 01 00:00:00 1970 PST
   791 |   1 | 00791              | Thu Apr 02 00:00:00 1970 PST
   793 | 303 | 00793_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5466,7 +5601,7 @@
   796 |   6 | 00796              | Tue Apr 07 00:00:00 1970 PST
   797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 PST
   798 |   8 | 00798              | Thu Apr 09 00:00:00 1970 PST
-  799 | 509 | 00799_update9      | Fri Apr 10 00:00:00 1970 PST
+  799 |   9 | 00799              | Fri Apr 10 00:00:00 1970 PST
   800 |   0 | 00800              | Thu Jan 01 00:00:00 1970 PST
   801 |   1 | 00801              | Fri Jan 02 00:00:00 1970 PST
   803 | 303 | 00803_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5474,7 +5609,7 @@
   806 |   6 | 00806              | Wed Jan 07 00:00:00 1970 PST
   807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 PST
   808 |   8 | 00808              | Fri Jan 09 00:00:00 1970 PST
-  809 | 509 | 00809_update9      | Sat Jan 10 00:00:00 1970 PST
+  809 |   9 | 00809              | Sat Jan 10 00:00:00 1970 PST
   810 |   0 | 00810              | Sun Jan 11 00:00:00 1970 PST
   811 |   1 | 00811              | Mon Jan 12 00:00:00 1970 PST
   813 | 303 | 00813_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5482,7 +5617,7 @@
   816 |   6 | 00816              | Sat Jan 17 00:00:00 1970 PST
   817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 PST
   818 |   8 | 00818              | Mon Jan 19 00:00:00 1970 PST
-  819 | 509 | 00819_update9      | Tue Jan 20 00:00:00 1970 PST
+  819 |   9 | 00819              | Tue Jan 20 00:00:00 1970 PST
   820 |   0 | 00820              | Wed Jan 21 00:00:00 1970 PST
   821 |   1 | 00821              | Thu Jan 22 00:00:00 1970 PST
   823 | 303 | 00823_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5490,7 +5625,7 @@
   826 |   6 | 00826              | Tue Jan 27 00:00:00 1970 PST
   827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 PST
   828 |   8 | 00828              | Thu Jan 29 00:00:00 1970 PST
-  829 | 509 | 00829_update9      | Fri Jan 30 00:00:00 1970 PST
+  829 |   9 | 00829              | Fri Jan 30 00:00:00 1970 PST
   830 |   0 | 00830              | Sat Jan 31 00:00:00 1970 PST
   831 |   1 | 00831              | Sun Feb 01 00:00:00 1970 PST
   833 | 303 | 00833_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5498,7 +5633,7 @@
   836 |   6 | 00836              | Fri Feb 06 00:00:00 1970 PST
   837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 PST
   838 |   8 | 00838              | Sun Feb 08 00:00:00 1970 PST
-  839 | 509 | 00839_update9      | Mon Feb 09 00:00:00 1970 PST
+  839 |   9 | 00839              | Mon Feb 09 00:00:00 1970 PST
   840 |   0 | 00840              | Tue Feb 10 00:00:00 1970 PST
   841 |   1 | 00841              | Wed Feb 11 00:00:00 1970 PST
   843 | 303 | 00843_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5506,7 +5641,7 @@
   846 |   6 | 00846              | Mon Feb 16 00:00:00 1970 PST
   847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 PST
   848 |   8 | 00848              | Wed Feb 18 00:00:00 1970 PST
-  849 | 509 | 00849_update9      | Thu Feb 19 00:00:00 1970 PST
+  849 |   9 | 00849              | Thu Feb 19 00:00:00 1970 PST
   850 |   0 | 00850              | Fri Feb 20 00:00:00 1970 PST
   851 |   1 | 00851              | Sat Feb 21 00:00:00 1970 PST
   853 | 303 | 00853_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5514,7 +5649,7 @@
   856 |   6 | 00856              | Thu Feb 26 00:00:00 1970 PST
   857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 PST
   858 |   8 | 00858              | Sat Feb 28 00:00:00 1970 PST
-  859 | 509 | 00859_update9      | Sun Mar 01 00:00:00 1970 PST
+  859 |   9 | 00859              | Sun Mar 01 00:00:00 1970 PST
   860 |   0 | 00860              | Mon Mar 02 00:00:00 1970 PST
   861 |   1 | 00861              | Tue Mar 03 00:00:00 1970 PST
   863 | 303 | 00863_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5522,7 +5657,7 @@
   866 |   6 | 00866              | Sun Mar 08 00:00:00 1970 PST
   867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 PST
   868 |   8 | 00868              | Tue Mar 10 00:00:00 1970 PST
-  869 | 509 | 00869_update9      | Wed Mar 11 00:00:00 1970 PST
+  869 |   9 | 00869              | Wed Mar 11 00:00:00 1970 PST
   870 |   0 | 00870              | Thu Mar 12 00:00:00 1970 PST
   871 |   1 | 00871              | Fri Mar 13 00:00:00 1970 PST
   873 | 303 | 00873_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5530,7 +5665,7 @@
   876 |   6 | 00876              | Wed Mar 18 00:00:00 1970 PST
   877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 PST
   878 |   8 | 00878              | Fri Mar 20 00:00:00 1970 PST
-  879 | 509 | 00879_update9      | Sat Mar 21 00:00:00 1970 PST
+  879 |   9 | 00879              | Sat Mar 21 00:00:00 1970 PST
   880 |   0 | 00880              | Sun Mar 22 00:00:00 1970 PST
   881 |   1 | 00881              | Mon Mar 23 00:00:00 1970 PST
   883 | 303 | 00883_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5538,7 +5673,7 @@
   886 |   6 | 00886              | Sat Mar 28 00:00:00 1970 PST
   887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 PST
   888 |   8 | 00888              | Mon Mar 30 00:00:00 1970 PST
-  889 | 509 | 00889_update9      | Tue Mar 31 00:00:00 1970 PST
+  889 |   9 | 00889              | Tue Mar 31 00:00:00 1970 PST
   890 |   0 | 00890              | Wed Apr 01 00:00:00 1970 PST
   891 |   1 | 00891              | Thu Apr 02 00:00:00 1970 PST
   893 | 303 | 00893_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5546,7 +5681,7 @@
   896 |   6 | 00896              | Tue Apr 07 00:00:00 1970 PST
   897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 PST
   898 |   8 | 00898              | Thu Apr 09 00:00:00 1970 PST
-  899 | 509 | 00899_update9      | Fri Apr 10 00:00:00 1970 PST
+  899 |   9 | 00899              | Fri Apr 10 00:00:00 1970 PST
   900 |   0 | 00900              | Thu Jan 01 00:00:00 1970 PST
   901 |   1 | 00901              | Fri Jan 02 00:00:00 1970 PST
   903 | 303 | 00903_update3      | Sun Jan 04 00:00:00 1970 PST
@@ -5554,7 +5689,7 @@
   906 |   6 | 00906              | Wed Jan 07 00:00:00 1970 PST
   907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 PST
   908 |   8 | 00908              | Fri Jan 09 00:00:00 1970 PST
-  909 | 509 | 00909_update9      | Sat Jan 10 00:00:00 1970 PST
+  909 |   9 | 00909              | Sat Jan 10 00:00:00 1970 PST
   910 |   0 | 00910              | Sun Jan 11 00:00:00 1970 PST
   911 |   1 | 00911              | Mon Jan 12 00:00:00 1970 PST
   913 | 303 | 00913_update3      | Wed Jan 14 00:00:00 1970 PST
@@ -5562,7 +5697,7 @@
   916 |   6 | 00916              | Sat Jan 17 00:00:00 1970 PST
   917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 PST
   918 |   8 | 00918              | Mon Jan 19 00:00:00 1970 PST
-  919 | 509 | 00919_update9      | Tue Jan 20 00:00:00 1970 PST
+  919 |   9 | 00919              | Tue Jan 20 00:00:00 1970 PST
   920 |   0 | 00920              | Wed Jan 21 00:00:00 1970 PST
   921 |   1 | 00921              | Thu Jan 22 00:00:00 1970 PST
   923 | 303 | 00923_update3      | Sat Jan 24 00:00:00 1970 PST
@@ -5570,7 +5705,7 @@
   926 |   6 | 00926              | Tue Jan 27 00:00:00 1970 PST
   927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 PST
   928 |   8 | 00928              | Thu Jan 29 00:00:00 1970 PST
-  929 | 509 | 00929_update9      | Fri Jan 30 00:00:00 1970 PST
+  929 |   9 | 00929              | Fri Jan 30 00:00:00 1970 PST
   930 |   0 | 00930              | Sat Jan 31 00:00:00 1970 PST
   931 |   1 | 00931              | Sun Feb 01 00:00:00 1970 PST
   933 | 303 | 00933_update3      | Tue Feb 03 00:00:00 1970 PST
@@ -5578,7 +5713,7 @@
   936 |   6 | 00936              | Fri Feb 06 00:00:00 1970 PST
   937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 PST
   938 |   8 | 00938              | Sun Feb 08 00:00:00 1970 PST
-  939 | 509 | 00939_update9      | Mon Feb 09 00:00:00 1970 PST
+  939 |   9 | 00939              | Mon Feb 09 00:00:00 1970 PST
   940 |   0 | 00940              | Tue Feb 10 00:00:00 1970 PST
   941 |   1 | 00941              | Wed Feb 11 00:00:00 1970 PST
   943 | 303 | 00943_update3      | Fri Feb 13 00:00:00 1970 PST
@@ -5586,7 +5721,7 @@
   946 |   6 | 00946              | Mon Feb 16 00:00:00 1970 PST
   947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 PST
   948 |   8 | 00948              | Wed Feb 18 00:00:00 1970 PST
-  949 | 509 | 00949_update9      | Thu Feb 19 00:00:00 1970 PST
+  949 |   9 | 00949              | Thu Feb 19 00:00:00 1970 PST
   950 |   0 | 00950              | Fri Feb 20 00:00:00 1970 PST
   951 |   1 | 00951              | Sat Feb 21 00:00:00 1970 PST
   953 | 303 | 00953_update3      | Mon Feb 23 00:00:00 1970 PST
@@ -5594,7 +5729,7 @@
   956 |   6 | 00956              | Thu Feb 26 00:00:00 1970 PST
   957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 PST
   958 |   8 | 00958              | Sat Feb 28 00:00:00 1970 PST
-  959 | 509 | 00959_update9      | Sun Mar 01 00:00:00 1970 PST
+  959 |   9 | 00959              | Sun Mar 01 00:00:00 1970 PST
   960 |   0 | 00960              | Mon Mar 02 00:00:00 1970 PST
   961 |   1 | 00961              | Tue Mar 03 00:00:00 1970 PST
   963 | 303 | 00963_update3      | Thu Mar 05 00:00:00 1970 PST
@@ -5602,7 +5737,7 @@
   966 |   6 | 00966              | Sun Mar 08 00:00:00 1970 PST
   967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 PST
   968 |   8 | 00968              | Tue Mar 10 00:00:00 1970 PST
-  969 | 509 | 00969_update9      | Wed Mar 11 00:00:00 1970 PST
+  969 |   9 | 00969              | Wed Mar 11 00:00:00 1970 PST
   970 |   0 | 00970              | Thu Mar 12 00:00:00 1970 PST
   971 |   1 | 00971              | Fri Mar 13 00:00:00 1970 PST
   973 | 303 | 00973_update3      | Sun Mar 15 00:00:00 1970 PST
@@ -5610,7 +5745,7 @@
   976 |   6 | 00976              | Wed Mar 18 00:00:00 1970 PST
   977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 PST
   978 |   8 | 00978              | Fri Mar 20 00:00:00 1970 PST
-  979 | 509 | 00979_update9      | Sat Mar 21 00:00:00 1970 PST
+  979 |   9 | 00979              | Sat Mar 21 00:00:00 1970 PST
   980 |   0 | 00980              | Sun Mar 22 00:00:00 1970 PST
   981 |   1 | 00981              | Mon Mar 23 00:00:00 1970 PST
   983 | 303 | 00983_update3      | Wed Mar 25 00:00:00 1970 PST
@@ -5618,7 +5753,7 @@
   986 |   6 | 00986              | Sat Mar 28 00:00:00 1970 PST
   987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 PST
   988 |   8 | 00988              | Mon Mar 30 00:00:00 1970 PST
-  989 | 509 | 00989_update9      | Tue Mar 31 00:00:00 1970 PST
+  989 |   9 | 00989              | Tue Mar 31 00:00:00 1970 PST
   990 |   0 | 00990              | Wed Apr 01 00:00:00 1970 PST
   991 |   1 | 00991              | Thu Apr 02 00:00:00 1970 PST
   993 | 303 | 00993_update3      | Sat Apr 04 00:00:00 1970 PST
@@ -5626,7 +5761,7 @@
   996 |   6 | 00996              | Tue Apr 07 00:00:00 1970 PST
   997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 PST
   998 |   8 | 00998              | Thu Apr 09 00:00:00 1970 PST
-  999 | 509 | 00999_update9      | Fri Apr 10 00:00:00 1970 PST
+  999 |   9 | 00999              | Fri Apr 10 00:00:00 1970 PST
  1000 |   0 | 01000              | Thu Jan 01 00:00:00 1970 PST
  1001 | 101 | 0000100001         | 
  1003 | 403 | 0000300003_update3 | 
@@ -5634,7 +5769,7 @@
  1006 | 106 | 0000600006         | 
  1007 | 507 | 0000700007_update7 | 
  1008 | 108 | 0000800008         | 
- 1009 | 609 | 0000900009_update9 | 
+ 1009 | 109 | 0000900009         | 
  1010 | 100 | 0001000010         | 
  1011 | 101 | 0001100011         | 
  1013 | 403 | 0001300013_update3 | 
@@ -5642,7 +5777,7 @@
  1016 | 106 | 0001600016         | 
  1017 | 507 | 0001700017_update7 | 
  1018 | 108 | 0001800018         | 
- 1019 | 609 | 0001900019_update9 | 
+ 1019 | 109 | 0001900019         | 
  1020 | 100 | 0002000020         | 
  1101 | 201 | aaa                | 
  1103 | 503 | ccc_update3        | 
@@ -5659,7 +5794,8 @@
    Batch Size: 1
    ->  Result
          Output: 1200, 999, NULL::integer, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
-(6 rows)
+ Query Identifier: 4377966521720091157
+(7 rows)
 
 INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
  tableoid 
@@ -5675,7 +5811,8 @@
    Output: (tableoid)::regclass
    ->  Foreign Update on public.ft2
          Remote SQL: UPDATE "S 1"."T 1" SET c3 = 'bar'::text WHERE (("C 1" = 1200))
-(4 rows)
+ Query Identifier: 7841247842092716510
+(5 rows)
 
 UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
  tableoid 
@@ -5691,7 +5828,8 @@
    Output: (tableoid)::regclass
    ->  Foreign Delete on public.ft2
          Remote SQL: DELETE FROM "S 1"."T 1" WHERE (("C 1" = 1200))
-(4 rows)
+ Query Identifier: -5289070976271155062
+(5 rows)
 
 DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;
  tableoid 
@@ -5713,7 +5851,8 @@
    Output: ft2.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.*, ft4.c1, ft4.c2, ft4.c3
    ->  Foreign Update
          Remote SQL: UPDATE "S 1"."T 1" r1 SET c3 = 'foo'::text FROM ("S 1"."T 3" r2 INNER JOIN "S 1"."T 4" r3 ON (TRUE)) WHERE ((r2.c1 = r3.c1)) AND ((r1.c2 = r2.c1)) AND ((r1."C 1" > 1200)) RETURNING r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2.c1, r2.c2, r2.c3) END, r2.c1, r2.c2, r2.c3
-(4 rows)
+ Query Identifier: 8286347606304071714
+(5 rows)
 
 UPDATE ft2 SET c3 = 'foo'
   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
@@ -5750,7 +5889,8 @@
    Output: 100
    ->  Foreign Delete
          Remote SQL: DELETE FROM "S 1"."T 1" r1 USING ("S 1"."T 3" r2 LEFT JOIN "S 1"."T 4" r3 ON (((r2.c1 = r3.c1)))) WHERE ((r1.c2 = r2.c1)) AND ((r1."C 1" > 1200)) AND (((r1."C 1" % 10) = 0))
-(4 rows)
+ Query Identifier: -8860193298727051051
+(5 rows)
 
 DELETE FROM ft2
   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
@@ -5790,7 +5930,8 @@
            ->  Foreign Scan on public.ft2 src
                  Output: (src.c2 * 10), src.c7
                  Remote SQL: SELECT c2, c7 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
-(9 rows)
+ Query Identifier: 8496265262991776952
+(10 rows)
 
 UPDATE ft2 AS target SET (c2, c7) = (
     SELECT c2 * 10, c7
@@ -5826,7 +5967,8 @@
                      ->  Foreign Scan on public.ft2 t
                            Output: t.*, t.c1
                            Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(17 rows)
+ Query Identifier: 6790575437448937262
+(18 rows)
 
 UPDATE ft2 d SET c2 = CASE WHEN random() >= 0 THEN d.c2 ELSE 0 END
   FROM ft2 AS t WHERE d.c1 = t.c1 AND d.c1 > 1000;
@@ -5846,7 +5988,8 @@
          Output: 'bar'::text, ctid, ft2.*
          Filter: (postgres_fdw_abs(ft2.c1) > 2000)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
-(7 rows)
+ Query Identifier: 2033309010278189844
+(8 rows)
 
 UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
   c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 
@@ -5894,7 +6037,8 @@
                            ->  Foreign Scan on public.ft5
                                  Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
                                  Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
-(24 rows)
+ Query Identifier: -9029092091669757479
+(25 rows)
 
 UPDATE ft2 SET c3 = 'baz'
   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
@@ -5934,7 +6078,8 @@
                ->  Foreign Scan on public.ft5
                      Output: ft5.*, ft5.c1
                      Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
-(22 rows)
+ Query Identifier: -3730314658569367706
+(23 rows)
 
 DELETE FROM ft2
   USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
@@ -6102,16 +6247,18 @@
    1 |   100
    4 |   100
    6 |   100
+   9 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
  c2  | count 
@@ -6120,16 +6267,18 @@
    1 |   100
    4 |   100
    6 |   100
+   9 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 begin;
 update ft2 set c2 = 42 where c2 = 0;
@@ -6139,17 +6288,19 @@
    1 |   100
    4 |   100
    6 |   100
+   9 |   100
   42 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 savepoint s1;
 update ft2 set c2 = 44 where c2 = 4;
@@ -6158,18 +6309,20 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 release savepoint s1;
 select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
@@ -6177,18 +6330,20 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 savepoint s2;
 update ft2 set c2 = 46 where c2 = 6;
@@ -6196,6 +6351,7 @@
  c2  | count 
 -----+-------
    1 |   100
+   9 |   100
   42 |   100
   44 |   100
   46 |   100
@@ -6203,12 +6359,13 @@
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 rollback to savepoint s2;
 select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
@@ -6216,18 +6373,20 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 release savepoint s2;
 select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
@@ -6235,18 +6394,20 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 savepoint s3;
 update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
@@ -6259,18 +6420,20 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 release savepoint s3;
 select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
@@ -6278,18 +6441,20 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 -- none of the above is committed yet remotely
 select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
@@ -6299,16 +6464,18 @@
    1 |   100
    4 |   100
    6 |   100
+   9 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 commit;
 select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
@@ -6316,36 +6483,40 @@
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
  c2  | count 
 -----+-------
    1 |   100
    6 |   100
+   9 |   100
   42 |   100
   44 |   100
  100 |     2
  101 |     2
  104 |     2
  106 |     2
+ 109 |     2
  201 |     1
  204 |     1
  303 |   100
  403 |     2
  407 |   100
-(13 rows)
+(15 rows)
 
 VACUUM ANALYZE "S 1"."T 1";
 -- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
@@ -6357,7 +6528,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 795::bigint
-(3 rows)
+ Query Identifier: 3839038239500972477
+(4 rows)
 
 SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
   c1  | c2  |         c3         |              c4              |            c5            |  c6  |     c7     | c8  
@@ -6381,7 +6553,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
-(3 rows)
+ Query Identifier: -8542417004690028840
+(4 rows)
 
 SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
   c1  | c2  |       c3        |              c4              |            c5            | c6 |     c7     | c8  
@@ -6391,11 +6564,11 @@
  1103 | 503 | ccc_update3     |                              |                          |    | ft2        | 
  1104 | 204 | ddd             |                              |                          |    | ft2        | 
  1208 | 818 | fff_trig_update |                              |                          |    | ft2        | 
-    9 | 509 | 00009_update9   | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | ft2        | foo
-   19 | 509 | 00019_update9   | Tue Jan 20 00:00:00 1970 PST | Tue Jan 20 00:00:00 1970 | 9  | ft2        | foo
-   29 | 509 | 00029_update9   | Fri Jan 30 00:00:00 1970 PST | Fri Jan 30 00:00:00 1970 | 9  | ft2        | foo
-   39 | 509 | 00039_update9   | Mon Feb 09 00:00:00 1970 PST | Mon Feb 09 00:00:00 1970 | 9  | ft2        | foo
-   49 | 509 | 00049_update9   | Thu Feb 19 00:00:00 1970 PST | Thu Feb 19 00:00:00 1970 | 9  | ft2        | foo
+    9 |   9 | 00009           | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo
+   19 |   9 | 00019           | Tue Jan 20 00:00:00 1970 PST | Tue Jan 20 00:00:00 1970 | 9  | 9          | foo
+   29 |   9 | 00029           | Fri Jan 30 00:00:00 1970 PST | Fri Jan 30 00:00:00 1970 | 9  | 9          | foo
+   39 |   9 | 00039           | Mon Feb 09 00:00:00 1970 PST | Mon Feb 09 00:00:00 1970 | 9  | 9          | foo
+   49 |   9 | 00049           | Thu Feb 19 00:00:00 1970 PST | Thu Feb 19 00:00:00 1970 | 9  | 9          | foo
 (10 rows)
 
 -- ORDER BY ASC NULLS FIRST options
@@ -6405,7 +6578,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 ASC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
-(3 rows)
+ Query Identifier: 8018138700201742425
+(4 rows)
 
 SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
   c1  | c2  |        c3         |              c4              |            c5            |  c6  |     c7     | c8  
@@ -6434,7 +6608,8 @@
    Output: (count(*))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 < 0))
-(4 rows)
+ Query Identifier: 8282036732948811528
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 < 0;
  count 
@@ -6444,13 +6619,14 @@
 
 SET constraint_exclusion = 'on';
 EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
-           QUERY PLAN           
---------------------------------
+              QUERY PLAN               
+---------------------------------------
  Aggregate
    Output: count(*)
    ->  Result
          One-Time Filter: false
-(4 rows)
+ Query Identifier: 8282036732948811528
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 < 0;
  count 
@@ -6478,7 +6654,8 @@
    Output: (count(*))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 >= 0))
-(4 rows)
+ Query Identifier: -3855890430872312250
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 >= 0;
  count 
@@ -6488,13 +6665,14 @@
 
 SET constraint_exclusion = 'on';
 EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
-           QUERY PLAN           
---------------------------------
+               QUERY PLAN               
+----------------------------------------
  Aggregate
    Output: count(*)
    ->  Result
          One-Time Filter: false
-(4 rows)
+ Query Identifier: -3855890430872312250
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 >= 0;
  count 
@@ -6540,7 +6718,8 @@
    Batch Size: 1
    ->  Result
          Output: 0, 5
-(5 rows)
+ Query Identifier: -1752242745132365923
+(6 rows)
 
 INSERT INTO rw_view VALUES (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6554,7 +6733,8 @@
    Batch Size: 1
    ->  Result
          Output: 0, 15
-(5 rows)
+ Query Identifier: -1752242745132365923
+(6 rows)
 
 INSERT INTO rw_view VALUES (0, 15); -- ok
 SELECT * FROM foreign_tbl;
@@ -6572,7 +6752,8 @@
    ->  Foreign Scan on public.foreign_tbl
          Output: (foreign_tbl.b + 5), foreign_tbl.ctid, foreign_tbl.*
          Remote SQL: SELECT a, b, ctid FROM public.base_tbl WHERE ((a < b)) FOR UPDATE
-(5 rows)
+ Query Identifier: 7256146098491240051
+(6 rows)
 
 UPDATE rw_view SET b = b + 5; -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6586,7 +6767,8 @@
    ->  Foreign Scan on public.foreign_tbl
          Output: (foreign_tbl.b + 15), foreign_tbl.ctid, foreign_tbl.*
          Remote SQL: SELECT a, b, ctid FROM public.base_tbl WHERE ((a < b)) FOR UPDATE
-(5 rows)
+ Query Identifier: 7256146098491240051
+(6 rows)
 
 UPDATE rw_view SET b = b + 15; -- ok
 SELECT * FROM foreign_tbl;
@@ -6606,7 +6788,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, "*VALUES*".column2
-(5 rows)
+ Query Identifier: 7906914380537122013
+(6 rows)
 
 INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6650,24 +6833,26 @@
 
 EXPLAIN (VERBOSE, COSTS OFF)
 INSERT INTO rw_view VALUES (0, 5);
-         QUERY PLAN          
------------------------------
+               QUERY PLAN               
+----------------------------------------
  Insert on public.parent_tbl
    ->  Result
          Output: 0, 5
-(3 rows)
+ Query Identifier: -1752242745132365923
+(4 rows)
 
 INSERT INTO rw_view VALUES (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
 DETAIL:  Failing row contains (10, 5).
 EXPLAIN (VERBOSE, COSTS OFF)
 INSERT INTO rw_view VALUES (0, 15);
-         QUERY PLAN          
------------------------------
+               QUERY PLAN               
+----------------------------------------
  Insert on public.parent_tbl
    ->  Result
          Output: 0, 15
-(3 rows)
+ Query Identifier: -1752242745132365923
+(4 rows)
 
 INSERT INTO rw_view VALUES (0, 15); -- ok
 SELECT * FROM foreign_tbl;
@@ -6686,7 +6871,8 @@
    ->  Foreign Scan on public.foreign_tbl parent_tbl_1
          Output: (parent_tbl_1.b + 5), parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
          Remote SQL: SELECT a, b, ctid FROM public.child_tbl WHERE ((a < b)) FOR UPDATE
-(6 rows)
+ Query Identifier: 7256146098491240051
+(7 rows)
 
 UPDATE rw_view SET b = b + 5; -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6701,7 +6887,8 @@
    ->  Foreign Scan on public.foreign_tbl parent_tbl_1
          Output: (parent_tbl_1.b + 15), parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
          Remote SQL: SELECT a, b, ctid FROM public.child_tbl WHERE ((a < b)) FOR UPDATE
-(6 rows)
+ Query Identifier: 7256146098491240051
+(7 rows)
 
 UPDATE rw_view SET b = b + 15; -- ok
 SELECT * FROM foreign_tbl;
@@ -6719,7 +6906,8 @@
  Insert on public.parent_tbl
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, "*VALUES*".column2
-(3 rows)
+ Query Identifier: 7906914380537122013
+(4 rows)
 
 INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6791,9 +6979,12 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, NULL::integer
-(5 rows)
+ Query Identifier: 8540631732624585992
+(6 rows)
 
 insert into grem1 (a) values (1), (2);
+ERROR:  cache lookup failed for type 23
+CONTEXT:  remote SQL command: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT)
 explain (verbose, costs off)
 update grem1 set a = 22 where a = 2;
                                      QUERY PLAN                                     
@@ -6803,39 +6994,35 @@
    ->  Foreign Scan on public.grem1
          Output: 22, ctid, grem1.*
          Remote SQL: SELECT a, b, ctid FROM public.gloc1 WHERE ((a = 2)) FOR UPDATE
-(5 rows)
+ Query Identifier: -3095659881746383382
+(6 rows)
 
 update grem1 set a = 22 where a = 2;
 select * from gloc1;
- a  | b  
-----+----
-  1 |  2
- 22 | 44
-(2 rows)
+ a | b 
+---+---
+(0 rows)
 
 select * from grem1;
- a  | b  
-----+----
-  1 |  2
- 22 | 44
-(2 rows)
+ a | b 
+---+---
+(0 rows)
 
 delete from grem1;
 -- test copy from
 copy grem1 from stdin;
+ERROR:  cache lookup failed for type 23
+CONTEXT:  remote SQL command: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT)
+COPY grem1, line 1: "1"
 select * from gloc1;
  a | b 
 ---+---
- 1 | 2
- 2 | 4
-(2 rows)
+(0 rows)
 
 select * from grem1;
  a | b 
 ---+---
- 1 | 2
- 2 | 4
-(2 rows)
+(0 rows)
 
 delete from grem1;
 -- test batch insert
@@ -6849,22 +7036,21 @@
    Batch Size: 10
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, NULL::integer
-(5 rows)
+ Query Identifier: 8540631732624585992
+(6 rows)
 
 insert into grem1 (a) values (1), (2);
+ERROR:  cache lookup failed for type 23
+CONTEXT:  remote SQL command: INSERT INTO public.gloc1(a, b) VALUES ($1, DEFAULT), ($2, DEFAULT)
 select * from gloc1;
  a | b 
 ---+---
- 1 | 2
- 2 | 4
-(2 rows)
+(0 rows)
 
 select * from grem1;
  a | b 
 ---+---
- 1 | 2
- 2 | 4
-(2 rows)
+(0 rows)
 
 delete from grem1;
 -- batch insert with foreign partitions.
@@ -7133,7 +7319,8 @@
    ->  Foreign Scan on public.rem1
          Output: 10, ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: 2629171471075056531
+(6 rows)
 
 UPDATE rem1 set f1 = 10;
 SELECT * from loc1;
@@ -7270,7 +7457,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1 WHERE false;     -- currently can't be pushed down
@@ -7281,7 +7469,8 @@
    ->  Result
          Output: ctid
          One-Time Filter: false
-(5 rows)
+ Query Identifier: -6678230234250402560
+(6 rows)
 
 -- Test with statement-level triggers
 CREATE TRIGGER trig_stmt_before
@@ -7294,7 +7483,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 1401734327828433392
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7303,7 +7493,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 DROP TRIGGER trig_stmt_before ON rem1;
 CREATE TRIGGER trig_stmt_after
@@ -7316,7 +7507,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 1401734327828433392
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7325,7 +7517,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 DROP TRIGGER trig_stmt_after ON rem1;
 -- Test with row-level ON INSERT triggers
@@ -7339,7 +7532,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 1401734327828433392
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7348,7 +7542,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 DROP TRIGGER trig_row_before_insert ON rem1;
 CREATE TRIGGER trig_row_after_insert
@@ -7361,7 +7556,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 1401734327828433392
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7370,7 +7566,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 DROP TRIGGER trig_row_after_insert ON rem1;
 -- Test with row-level ON UPDATE triggers
@@ -7386,7 +7583,8 @@
    ->  Foreign Scan on public.rem1
          Output: ''::text, ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: 1401734327828433392
+(6 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7395,7 +7593,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 DROP TRIGGER trig_row_before_update ON rem1;
 CREATE TRIGGER trig_row_after_update
@@ -7410,7 +7609,8 @@
    ->  Foreign Scan on public.rem1
          Output: ''::text, ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: 1401734327828433392
+(6 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7419,7 +7619,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -6151648191424008796
+(4 rows)
 
 DROP TRIGGER trig_row_after_update ON rem1;
 -- Test with row-level ON DELETE triggers
@@ -7433,7 +7634,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 1401734327828433392
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can't be pushed down
@@ -7444,7 +7646,8 @@
    ->  Foreign Scan on public.rem1
          Output: ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: -6151648191424008796
+(6 rows)
 
 DROP TRIGGER trig_row_before_delete ON rem1;
 CREATE TRIGGER trig_row_after_delete
@@ -7457,7 +7660,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 1401734327828433392
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can't be pushed down
@@ -7468,7 +7672,8 @@
    ->  Foreign Scan on public.rem1
          Output: ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: -6151648191424008796
+(6 rows)
 
 DROP TRIGGER trig_row_after_delete ON rem1;
 -- ===================================================================
@@ -7666,7 +7871,8 @@
                            ->  Foreign Scan on public.foo2 foo_2
                                  Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
-(23 rows)
+ Query Identifier: 7434498093289287600
+(24 rows)
 
 select * from bar where f1 in (select f1 from foo) for update;
  f1 | f2 
@@ -7704,7 +7910,8 @@
                            ->  Foreign Scan on public.foo2 foo_2
                                  Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
-(23 rows)
+ Query Identifier: 7658592843988360138
+(24 rows)
 
 select * from bar where f1 in (select f1 from foo) for share;
  f1 | f2 
@@ -7750,7 +7957,8 @@
                            ->  Foreign Scan on public.foo2child foo2_2
                                  Output: foo2_2.*, foo2_2.f1, foo2_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3 FROM public.loct4
-(24 rows)
+ Query Identifier: 5225029843390073822
+(25 rows)
 
 select * from bar where f1 in (select f1 from foo2) for share;
  f1 | f2 
@@ -7791,7 +7999,8 @@
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
                            ->  Seq Scan on public.foo2child foo2_2
                                  Output: foo2_2.*, foo2_2.f1, foo2_2.ctid, foo2_2.tableoid
-(23 rows)
+ Query Identifier: 5225029843390073822
+(24 rows)
 
 select * from bar where f1 in (select f1 from foo2) for share;
  f1 | f2 
@@ -7831,7 +8040,8 @@
                            ->  Foreign Scan on public.foo2 foo_2
                                  Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
-(25 rows)
+ Query Identifier: -8016092094147529170
+(26 rows)
 
 update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
 select tableoid::regclass, * from bar order by 1,2;
@@ -7883,7 +8093,8 @@
                      ->  Foreign Scan on public.foo2 foo_3
                            Output: ROW((foo_3.f1 + 3)), (foo_3.f1 + 3)
                            Remote SQL: SELECT f1 FROM public.loct1
-(30 rows)
+ Query Identifier: 981401514448954700
+(31 rows)
 
 update bar set f2 = f2 + 100
 from
@@ -7936,7 +8147,8 @@
                            Remote SQL: SELECT f1, f2 FROM public.loct1 ORDER BY f1 ASC NULLS LAST
                ->  Index Only Scan using i_loct1_f1 on public.loct1
                      Output: loct1.f1
-(17 rows)
+ Query Identifier: 7054404268044028335
+(18 rows)
 
 select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
  f1 | f1 
@@ -7976,7 +8188,8 @@
                            Remote SQL: SELECT f1, f2 FROM public.loct1 ORDER BY f1 ASC NULLS LAST
                ->  Index Only Scan using i_loct1_f1 on public.loct1
                      Output: loct1.f1
-(17 rows)
+ Query Identifier: -4446930674633888384
+(18 rows)
 
 select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
  f1 | f1 
@@ -8021,7 +8234,8 @@
                Index Cond: (foo_1.f1 < 5)
          ->  Foreign Delete on public.foo2 foo_2
                Remote SQL: DELETE FROM public.loct1 WHERE ((f1 < 5)) RETURNING f1, f2
-(10 rows)
+ Query Identifier: 7695245227644533147
+(11 rows)
 
 delete from foo where f1 < 5 returning *;
  f1 | f2 
@@ -8048,7 +8262,8 @@
                      Output: bar_1.f2, bar_1.tableoid, bar_1.ctid, NULL::record
                ->  Foreign Update on public.bar2 bar_2
                      Remote SQL: UPDATE public.loct2 SET f2 = (f2 + 100) RETURNING f1, f2
-(11 rows)
+ Query Identifier: -9197141784004072077
+(12 rows)
 
 update bar set f2 = f2 + 100 returning *;
  f1 | f2  
@@ -8084,7 +8299,8 @@
                ->  Foreign Scan on public.bar2 bar_2
                      Output: bar_2.f2, bar_2.tableoid, bar_2.ctid, bar_2.*
                      Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
-(12 rows)
+ Query Identifier: 4013751665738340827
+(13 rows)
 
 update bar set f2 = f2 + 100;
 NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2
@@ -8114,7 +8330,8 @@
          ->  Foreign Scan on public.bar2 bar_2
                Output: bar_2.tableoid, bar_2.ctid, bar_2.*
                Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 WHERE ((f2 < 400)) FOR UPDATE
-(11 rows)
+ Query Identifier: -2984167311043137022
+(12 rows)
 
 delete from bar where f2 < 400;
 NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON bar2
@@ -8166,7 +8383,8 @@
                ->  Foreign Scan on public.remt2
                      Output: remt2.b, remt2.*, remt2.a
                      Remote SQL: SELECT a, b FROM public.loct2
-(19 rows)
+ Query Identifier: 3271356167117566109
+(20 rows)
 
 update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
  a |   b    | a |  b  
@@ -8198,7 +8416,8 @@
                ->  Foreign Scan on public.remt2
                      Output: remt2.*, remt2.a
                      Remote SQL: SELECT a, b FROM public.loct2
-(19 rows)
+ Query Identifier: -7200235370667188075
+(20 rows)
 
 delete from parent using remt2 where parent.a = remt2.a returning parent;
    parent   
@@ -8424,7 +8643,8 @@
          ->  Seq Scan on public.locp utrtest_2
                Output: 1, utrtest_2.tableoid, utrtest_2.ctid, NULL::record
                Filter: ((utrtest_2.a = 1) OR (utrtest_2.a = 2))
-(10 rows)
+ Query Identifier: 7601867087927693570
+(11 rows)
 
 -- The new values are concatenated with ' triggered !'
 update utrtest set a = 1 where a = 1 or a = 2 returning *;
@@ -8442,7 +8662,8 @@
    ->  Seq Scan on public.locp utrtest_1
          Output: 1, utrtest_1.tableoid, utrtest_1.ctid
          Filter: (utrtest_1.a = 2)
-(6 rows)
+ Query Identifier: -1035394979367695361
+(7 rows)
 
 -- The new values are concatenated with ' triggered !'
 update utrtest set a = 1 where a = 2 returning *;
@@ -8472,7 +8693,8 @@
                Remote SQL: UPDATE public.loct SET a = 1 RETURNING a, b
          ->  Seq Scan on public.locp utrtest_2
                Output: 1, utrtest_2.tableoid, utrtest_2.ctid, NULL::record
-(9 rows)
+ Query Identifier: 5632269156258520979
+(10 rows)
 
 update utrtest set a = 1 returning *;
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -8502,7 +8724,8 @@
                Output: "*VALUES*".*, "*VALUES*".column1
                ->  Values Scan on "*VALUES*"
                      Output: "*VALUES*".*, "*VALUES*".column1
-(18 rows)
+ Query Identifier: 4051078901447838103
+(19 rows)
 
 update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -8532,7 +8755,8 @@
                Output: 3, utrtest_1.tableoid, utrtest_1.ctid, NULL::record
          ->  Foreign Update on public.remp utrtest_2
                Remote SQL: UPDATE public.loct SET a = 3 RETURNING a, b
-(9 rows)
+ Query Identifier: 5632269156258520979
+(10 rows)
 
 update utrtest set a = 3 returning *; -- ERROR
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -8559,7 +8783,8 @@
                Output: "*VALUES*".*, "*VALUES*".column1
                ->  Values Scan on "*VALUES*"
                      Output: "*VALUES*".*, "*VALUES*".column1
-(18 rows)
+ Query Identifier: 4051078901447838103
+(19 rows)
 
 update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -9003,61 +9228,7 @@
 (7 rows)
 
 \d import_dest1.*
-                         Foreign table "import_dest1.t1"
- Column |       Type        | Collation | Nullable | Default |    FDW options     
---------+-------------------+-----------+----------+---------+--------------------
- c1     | integer           |           |          |         | (column_name 'c1')
- c2     | character varying |           | not null |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't1')
-
-                         Foreign table "import_dest1.t2"
- Column |       Type        | Collation | Nullable | Default |    FDW options     
---------+-------------------+-----------+----------+---------+--------------------
- c1     | integer           |           |          |         | (column_name 'c1')
- c2     | character varying |           |          |         | (column_name 'c2')
- c3     | text              | POSIX     |          |         | (column_name 'c3')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't2')
-
-                             Foreign table "import_dest1.t3"
- Column |           Type           | Collation | Nullable | Default |    FDW options     
---------+--------------------------+-----------+----------+---------+--------------------
- c1     | timestamp with time zone |           |          |         | (column_name 'c1')
- c2     | typ1                     |           |          |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't3')
-
-                    Foreign table "import_dest1.t4"
- Column |  Type   | Collation | Nullable | Default |    FDW options     
---------+---------+-----------+----------+---------+--------------------
- c1     | integer |           |          |         | (column_name 'c1')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't4')
-
-                           Foreign table "import_dest1.x 4"
- Column |         Type          | Collation | Nullable | Default |     FDW options     
---------+-----------------------+-----------+----------+---------+---------------------
- c1     | double precision      |           |          |         | (column_name 'c1')
- C 2    | text                  |           |          |         | (column_name 'C 2')
- c3     | character varying(42) |           |          |         | (column_name 'c3')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 4')
-
-               Foreign table "import_dest1.x 5"
- Column | Type | Collation | Nullable | Default | FDW options 
---------+------+-----------+----------+---------+-------------
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 5')
-
-                                  Foreign table "import_dest1.x 6"
- Column |  Type   | Collation | Nullable |               Default               |    FDW options     
---------+---------+-----------+----------+-------------------------------------+--------------------
- c1     | integer |           |          |                                     | (column_name 'c1')
- c2     | integer |           |          | generated always as (c1 * 2) stored | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 6')
-
+ERROR:  cache lookup failed for type 18
 -- Options
 CREATE SCHEMA import_dest2;
 IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest2
@@ -9076,61 +9247,7 @@
 (7 rows)
 
 \d import_dest2.*
-                         Foreign table "import_dest2.t1"
- Column |       Type        | Collation | Nullable | Default |    FDW options     
---------+-------------------+-----------+----------+---------+--------------------
- c1     | integer           |           |          |         | (column_name 'c1')
- c2     | character varying |           | not null |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't1')
-
-                         Foreign table "import_dest2.t2"
- Column |       Type        | Collation | Nullable | Default |    FDW options     
---------+-------------------+-----------+----------+---------+--------------------
- c1     | integer           |           |          | 42      | (column_name 'c1')
- c2     | character varying |           |          |         | (column_name 'c2')
- c3     | text              | POSIX     |          |         | (column_name 'c3')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't2')
-
-                             Foreign table "import_dest2.t3"
- Column |           Type           | Collation | Nullable | Default |    FDW options     
---------+--------------------------+-----------+----------+---------+--------------------
- c1     | timestamp with time zone |           |          | now()   | (column_name 'c1')
- c2     | typ1                     |           |          |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't3')
-
-                    Foreign table "import_dest2.t4"
- Column |  Type   | Collation | Nullable | Default |    FDW options     
---------+---------+-----------+----------+---------+--------------------
- c1     | integer |           |          |         | (column_name 'c1')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't4')
-
-                           Foreign table "import_dest2.x 4"
- Column |         Type          | Collation | Nullable | Default |     FDW options     
---------+-----------------------+-----------+----------+---------+---------------------
- c1     | double precision      |           |          |         | (column_name 'c1')
- C 2    | text                  |           |          |         | (column_name 'C 2')
- c3     | character varying(42) |           |          |         | (column_name 'c3')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 4')
-
-               Foreign table "import_dest2.x 5"
- Column | Type | Collation | Nullable | Default | FDW options 
---------+------+-----------+----------+---------+-------------
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 5')
-
-                                  Foreign table "import_dest2.x 6"
- Column |  Type   | Collation | Nullable |               Default               |    FDW options     
---------+---------+-----------+----------+-------------------------------------+--------------------
- c1     | integer |           |          |                                     | (column_name 'c1')
- c2     | integer |           |          | generated always as (c1 * 2) stored | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 6')
-
+ERROR:  cache lookup failed for type 18
 CREATE SCHEMA import_dest3;
 IMPORT FOREIGN SCHEMA import_source FROM SERVER loopback INTO import_dest3
   OPTIONS (import_collate 'false', import_generated 'false', import_not_null 'false');
@@ -9148,61 +9265,7 @@
 (7 rows)
 
 \d import_dest3.*
-                         Foreign table "import_dest3.t1"
- Column |       Type        | Collation | Nullable | Default |    FDW options     
---------+-------------------+-----------+----------+---------+--------------------
- c1     | integer           |           |          |         | (column_name 'c1')
- c2     | character varying |           |          |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't1')
-
-                         Foreign table "import_dest3.t2"
- Column |       Type        | Collation | Nullable | Default |    FDW options     
---------+-------------------+-----------+----------+---------+--------------------
- c1     | integer           |           |          |         | (column_name 'c1')
- c2     | character varying |           |          |         | (column_name 'c2')
- c3     | text              |           |          |         | (column_name 'c3')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't2')
-
-                             Foreign table "import_dest3.t3"
- Column |           Type           | Collation | Nullable | Default |    FDW options     
---------+--------------------------+-----------+----------+---------+--------------------
- c1     | timestamp with time zone |           |          |         | (column_name 'c1')
- c2     | typ1                     |           |          |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't3')
-
-                    Foreign table "import_dest3.t4"
- Column |  Type   | Collation | Nullable | Default |    FDW options     
---------+---------+-----------+----------+---------+--------------------
- c1     | integer |           |          |         | (column_name 'c1')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 't4')
-
-                           Foreign table "import_dest3.x 4"
- Column |         Type          | Collation | Nullable | Default |     FDW options     
---------+-----------------------+-----------+----------+---------+---------------------
- c1     | double precision      |           |          |         | (column_name 'c1')
- C 2    | text                  |           |          |         | (column_name 'C 2')
- c3     | character varying(42) |           |          |         | (column_name 'c3')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 4')
-
-               Foreign table "import_dest3.x 5"
- Column | Type | Collation | Nullable | Default | FDW options 
---------+------+-----------+----------+---------+-------------
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 5')
-
-                    Foreign table "import_dest3.x 6"
- Column |  Type   | Collation | Nullable | Default |    FDW options     
---------+---------+-----------+----------+---------+--------------------
- c1     | integer |           |          |         | (column_name 'c1')
- c2     | integer |           |          |         | (column_name 'c2')
-Server: loopback
-FDW options: (schema_name 'import_source', table_name 'x 6')
-
+ERROR:  cache lookup failed for type 18
 -- Check LIMIT TO and EXCEPT
 CREATE SCHEMA import_dest4;
 IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch, t4_part)
@@ -9386,7 +9449,8 @@
    Output: t1.a, fprt2.b, fprt2.c
    Relations: (public.ftprt1_p1 t1) LEFT JOIN (public.ftprt2_p1 fprt2)
    Remote SQL: SELECT r5.a, r6.b, r6.c FROM (public.fprt1_p1 r5 LEFT JOIN public.fprt2_p1 r6 ON (((r5.a = r6.b)) AND ((r5.b = r6.a)) AND ((r6.a < 10)))) WHERE ((r5.a < 10)) ORDER BY r5.a ASC NULLS LAST, r6.b ASC NULLS LAST, r6.c ASC NULLS LAST
-(4 rows)
+ Query Identifier: 8642607224997577514
+(5 rows)
 
 SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
  a | b |  c   
@@ -9621,7 +9685,8 @@
                ->  Foreign Scan on public.fpagg_tab_p3 t1_2
                      Output: t1_2.a, t1_2.*, t1_2.b
                      Remote SQL: SELECT a, b, c FROM public.pagg_tab_p3
-(25 rows)
+ Query Identifier: -1017586563594590102
+(26 rows)
 
 SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
  a  | count 
@@ -10127,7 +10192,8 @@
    ->  Function Scan on pg_catalog.generate_series i
          Output: i.i
          Function Call: generate_series(1, 10)
-(6 rows)
+ Query Identifier: 2554715400923931208
+(7 rows)
 
 INSERT INTO ftable SELECT * FROM generate_series(1, 10) i;
 INSERT INTO ftable SELECT * FROM generate_series(11, 31) i;
@@ -10162,7 +10228,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1
-(5 rows)
+ Query Identifier: 7816838350015932079
+(6 rows)
 
 INSERT INTO ftable VALUES (1), (2);
 SELECT COUNT(*) FROM ftable;
@@ -10184,7 +10251,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1
-(5 rows)
+ Query Identifier: 7816838350015932079
+(6 rows)
 
 INSERT INTO ftable VALUES (3), (4);
 NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable
@@ -10482,7 +10550,8 @@
          ->  Async Foreign Scan on public.async_p2 async_pt_2
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE (((b % 100) = 0))
-(8 rows)
+ Query Identifier: 9037694801003342341
+(9 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10525,7 +10594,8 @@
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                Filter: (async_pt_2.b === 505)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(10 rows)
+ Query Identifier: 8267730065659622134
+(11 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10550,7 +10620,8 @@
                Output: async_pt_2.a, async_pt_2.b, ('AAA'::text || async_pt_2.c)
                Filter: (async_pt_2.b === 505)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(10 rows)
+ Query Identifier: -1881568883074804336
+(11 rows)
 
 INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10585,7 +10656,8 @@
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                Filter: (async_pt_3.b === 505)
                Remote SQL: SELECT a, b, c FROM public.base_tbl3
-(14 rows)
+ Query Identifier: 8267730065659622134
+(15 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10620,7 +10692,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                Filter: (async_pt_3.b === 505)
-(13 rows)
+ Query Identifier: 8267730065659622134
+(14 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10659,7 +10732,8 @@
                      ->  Seq Scan on public.async_p3 t1_3
                            Output: t1_3.a, t1_3.b, t1_3.c
                            Filter: ((t1_3.b % 100) = 0)
-(20 rows)
+ Query Identifier: 8339004883812581365
+(21 rows)
 
 INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
 SELECT * FROM join_tbl ORDER BY a1;
@@ -10722,7 +10796,8 @@
                      ->  Seq Scan on public.async_p3 t1_3
                            Output: t1_3.a, t1_3.b, t1_3.c
                            Filter: ((t1_3.b % 100) = 0)
-(20 rows)
+ Query Identifier: 5008439608550661072
+(21 rows)
 
 INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
 SELECT * FROM join_tbl ORDER BY a1;
@@ -10784,7 +10859,8 @@
                      Remote SQL: SELECT a, b, c FROM public.base_tbl2
                ->  Seq Scan on public.async_p3 t2_3
                      Output: t2_3.a, t2_3.b, t2_3.c
-(16 rows)
+ Query Identifier: -61144969293980773
+(17 rows)
 
 INSERT INTO join_tbl SELECT * FROM async_p1 t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
 SELECT * FROM join_tbl ORDER BY a1;
@@ -10816,7 +10892,8 @@
    ->  Async Foreign Scan on public.async_p2 async_pt_2
          Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
          Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((a < 3000))
-(7 rows)
+ Query Identifier: -8022319298310928741
+(8 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM async_pt WHERE a < 2000;
@@ -10825,7 +10902,8 @@
  Foreign Scan on public.async_p1 async_pt
    Output: async_pt.a, async_pt.b, async_pt.c
    Remote SQL: SELECT a, b, c FROM public.base_tbl1 WHERE ((a < 2000))
-(3 rows)
+ Query Identifier: -8022319298310928741
+(4 rows)
 
 -- Test interaction of async execution with run-time partition pruning
 SET plan_cache_mode TO force_generic_plan;
@@ -10846,7 +10924,8 @@
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                Filter: (async_pt_2.b === $2)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((a < $1::integer))
-(11 rows)
+ Query Identifier: 623567805412848023
+(12 rows)
 
 EXECUTE async_pt_query (3000, 505);
 SELECT * FROM result_tbl ORDER BY a;
@@ -10868,7 +10947,8 @@
                Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
                Filter: (async_pt_1.b === $2)
                Remote SQL: SELECT a, b, c FROM public.base_tbl1 WHERE ((a < $1::integer))
-(7 rows)
+ Query Identifier: 623567805412848023
+(8 rows)
 
 EXECUTE async_pt_query (2000, 505);
 SELECT * FROM result_tbl ORDER BY a;
@@ -10909,7 +10989,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                Filter: (local_tbl.a = async_pt_3.a)
-(15 rows)
+ Query Identifier: 2252463998917575866
+(16 rows)
 
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
@@ -10957,7 +11038,8 @@
                ->  Async Foreign Scan on public.async_p2
                      Output: async_p2.a, async_p2.b, ('AAA'::text || async_p2.c)
                      Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((b < 10))
-(11 rows)
+ Query Identifier: 3277701680302380649
+(12 rows)
 
 INSERT INTO result_tbl
 (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
@@ -10996,7 +11078,8 @@
          ->  Async Foreign Scan on public.async_p2
                Output: async_p2.a, async_p2.b, ('AAA'::text || async_p2.c)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((b < 10))
-(8 rows)
+ Query Identifier: 482472323451712751
+(9 rows)
 
 INSERT INTO result_tbl
 (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
@@ -11044,7 +11127,8 @@
          One-Time Filter: (CURRENT_USER = SESSION_USER)
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
-(18 rows)
+ Query Identifier: -1193418558250190833
+(19 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 (SELECT * FROM async_p1 WHERE CURRENT_USER = SESSION_USER)
@@ -11065,7 +11149,8 @@
          ->  Foreign Scan on public.async_p2
                Output: async_p2.a, async_p2.b, async_p2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(13 rows)
+ Query Identifier: 2246737277885847004
+(14 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ((SELECT * FROM async_p1 WHERE b < 10) UNION ALL (SELECT * FROM async_p2 WHERE b < 10)) s WHERE CURRENT_USER = SESSION_USER;
@@ -11084,7 +11169,8 @@
          ->  Foreign Scan on public.async_p2
                Output: async_p2.a, async_p2.b, async_p2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((b < 10))
-(13 rows)
+ Query Identifier: 6367619713369424259
+(14 rows)
 
 -- Test that pending requests are processed properly
 SET enable_mergejoin TO false;
@@ -11113,7 +11199,8 @@
          ->  Foreign Scan on public.async_p2 t2
                Output: t2.a, t2.b, t2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(20 rows)
+ Query Identifier: -6586264648020636475
+(21 rows)
 
 SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
   a   |  b  |  c   |  a   |  b  |  c   
@@ -11148,7 +11235,8 @@
          ->  Async Foreign Scan on public.async_p2 async_pt_2
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c, $0
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((a < 3000))
-(20 rows)
+ Query Identifier: -5002679584446191286
+(21 rows)
 
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
@@ -11192,7 +11280,8 @@
          ->  Seq Scan on public.async_p3 t1_3
                Output: t1_3.a, t1_3.b, t1_3.c
                Filter: (t1_3.b === 505)
-(14 rows)
+ Query Identifier: 251728851078859606
+(15 rows)
 
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
@@ -11236,7 +11325,8 @@
          ->  Async Foreign Scan on public.remote_tbl
                Output: remote_tbl.a, remote_tbl.b, remote_tbl.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl3
-(9 rows)
+ Query Identifier: -6081711332589736590
+(10 rows)
 
 INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
 SELECT * FROM insert_tbl ORDER BY a;
@@ -11275,7 +11365,8 @@
                      Filter: (async_pt_3.b === 505)
          ->  CTE Scan on t
                Output: t.a, t.b, t.c
-(23 rows)
+ Query Identifier: -599449104909158216
+(24 rows)
 
 WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
 INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
@@ -11313,7 +11404,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: (async_pt_3.c || async_pt_3.c), async_pt_3.tableoid, async_pt_3.ctid, NULL::record
                Filter: (async_pt_3.b = 0)
-(13 rows)
+ Query Identifier: -2185590204161536392
+(14 rows)
 
 UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
   a   | b |    c     
@@ -11340,7 +11432,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.tableoid, async_pt_3.ctid
                Filter: (async_pt_3.b = 0)
-(13 rows)
+ Query Identifier: -246831014356241221
+(14 rows)
 
 DELETE FROM async_pt WHERE b = 0 RETURNING *;
   a   | b |    c     
@@ -11393,7 +11486,8 @@
                        Remote SQL: SELECT NULL FROM public.base_tbl
                  ->  Async Foreign Scan on public.foreign_tbl2 foreign_tbl_2
                        Remote SQL: SELECT NULL FROM public.base_tbl
-(11 rows)
+ Query Identifier: -6788780457698308882
+(12 rows)
 
 SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
  a 
