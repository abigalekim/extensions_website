diff -U3 /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/expected/postgres_fdw.out /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/results/postgres_fdw.out
--- /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/expected/postgres_fdw.out	2023-05-08 21:13:20.000000000 +0000
+++ /home/abigalek/pgext-cli-python/postgresql-15.3/contrib/postgres_fdw/results/postgres_fdw.out	2023-07-26 04:52:25.589623322 +0000
@@ -298,7 +298,8 @@
          ->  Foreign Scan on public.ft1 t1
                Output: c1, c2, c3, c4, c5, c6, c7, c8, tableoid
                Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(8 rows)
+ Query Identifier: -8486492409700585543
+(9 rows)
 
 SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -322,7 +323,8 @@
  Foreign Scan on public.ft1 t1
    Output: t1.*, c3, c1
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c3 ASC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(3 rows)
+ Query Identifier: 5581316297432935108
+(4 rows)
 
 SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                              t1                                             
@@ -352,7 +354,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c7 >= '1')) AND (("C 1" = 101)) AND ((c6 = '1'))
-(3 rows)
+ Query Identifier: -2896903094120746455
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -367,7 +370,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 101)) FOR UPDATE
-(3 rows)
+ Query Identifier: -9130384284827282693
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -381,7 +385,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8, t1.*
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 102)) FOR SHARE
-(3 rows)
+ Query Identifier: 9103187087487742884
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
  c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -461,7 +466,8 @@
                Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
                Output: t2."C 1"
-(11 rows)
+ Query Identifier: 1515926431972450993
+(12 rows)
 
 SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
  c1  | C 1 
@@ -495,7 +501,8 @@
                Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t2
                Output: t2."C 1"
-(11 rows)
+ Query Identifier: -8989538532220948564
+(12 rows)
 
 SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
  c1  | C 1 
@@ -530,7 +537,8 @@
                Remote SQL: SELECT r3."C 1" FROM ("S 1"."T 1" r2 INNER JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r2."C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
                Output: t1."C 1"
-(12 rows)
+ Query Identifier: -6494724902886962564
+(13 rows)
 
 SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
  C 1 
@@ -566,7 +574,8 @@
                Remote SQL: SELECT r3."C 1", r2."C 1" FROM ("S 1"."T 1" r3 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r3."C 1")))) ORDER BY r3."C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
                Output: t1."C 1"
-(12 rows)
+ Query Identifier: -5091081514407728140
+(13 rows)
 
 SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
  C 1 | c1  | c1  
@@ -600,7 +609,8 @@
                Remote SQL: SELECT r2."C 1", r3."C 1" FROM ("S 1"."T 1" r2 FULL JOIN "S 1"."T 1" r3 ON (((r2."C 1" = r3."C 1")))) ORDER BY r3."C 1" ASC NULLS LAST
          ->  Index Only Scan using t1_pkey on "S 1"."T 1" t1
                Output: t1."C 1"
-(12 rows)
+ Query Identifier: 4013034223125190091
+(13 rows)
 
 SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
  C 1 | c1  | c1  
@@ -635,7 +645,8 @@
  Foreign Scan on public.ft_empty
    Output: c1, c2
    Remote SQL: SELECT c1, c2 FROM public.loct_empty ORDER BY c1 ASC NULLS LAST
-(3 rows)
+ Query Identifier: -8241060337862344351
+(4 rows)
 
 -- ===================================================================
 -- WHERE with remotely-executable conditions
@@ -646,7 +657,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -3538097840084776826
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                   QUERY PLAN                                                  
@@ -654,7 +666,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 100)) AND ((c2 = 0))
-(3 rows)
+ Query Identifier: -2572428366896272058
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                            QUERY PLAN                                            
@@ -662,7 +675,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NULL))
-(3 rows)
+ Query Identifier: 3984549880879851457
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                              QUERY PLAN                                              
@@ -670,7 +684,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NOT NULL))
-(3 rows)
+ Query Identifier: -4943297837203492446
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                      QUERY PLAN                                                      
@@ -678,7 +693,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((round(abs("C 1"), 0) = 1::numeric))
-(3 rows)
+ Query Identifier: 4153589849909846029
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                              QUERY PLAN                                              
@@ -686,7 +702,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = (- "C 1")))
-(3 rows)
+ Query Identifier: -4290744000587936030
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                  QUERY PLAN                                                                 
@@ -694,7 +711,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" IS NOT NULL) IS DISTINCT FROM ("C 1" IS NOT NULL)))
-(3 rows)
+ Query Identifier: 4823898946686107403
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                         QUERY PLAN                                                         
@@ -702,7 +720,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ANY (ARRAY[c2, 1, ("C 1" + 0)])))
-(3 rows)
+ Query Identifier: -4398314328852518527
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                                                       QUERY PLAN                                                      
@@ -710,7 +729,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ((ARRAY["C 1", c2, 3])[1])))
-(3 rows)
+ Query Identifier: 1336463372719039297
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                               QUERY PLAN                                               
@@ -718,7 +738,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c6 = E'foo''s\\bar'))
-(3 rows)
+ Query Identifier: -212442219118382059
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                QUERY PLAN                                
@@ -727,7 +748,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(4 rows)
+ Query Identifier: -2487647053157985503
+(5 rows)
 
 -- parameterized remote path for foreign table
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -742,7 +764,8 @@
    ->  Foreign Scan on public.ft2 b
          Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
-(8 rows)
+ Query Identifier: 8342991393482585207
+(9 rows)
 
 SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -766,7 +789,8 @@
          Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8
          Filter: (upper((a.c7)::text) = (b.c7)::text)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
-(10 rows)
+ Query Identifier: -1737899428002215065
+(11 rows)
 
 SELECT * FROM ft2 a, ft2 b
 WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
@@ -905,7 +929,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2, c3, c4, c5, c6, c7, c8, random()
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -8818477332042956536
+(7 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
@@ -917,7 +942,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2, c3, c4, c5, c6, c7, c8, c3
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -1310155581616470154
+(7 rows)
 
 -- user-defined operator/function
 CREATE FUNCTION postgres_fdw_abs(int) RETURNS int AS $$
@@ -940,7 +966,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = abs(c2)))
-(4 rows)
+ Query Identifier: 5043266921009843790
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
  count 
@@ -956,7 +983,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = c2))
-(4 rows)
+ Query Identifier: 5709598263419248302
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
  count 
@@ -975,7 +1003,8 @@
          Output: c3
          Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
          Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: 8531850383775146524
+(7 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
  count 
@@ -993,7 +1022,8 @@
          Output: c3
          Filter: (t1.c1 === t1.c2)
          Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -3318293697121592480
+(7 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
  count 
@@ -1012,7 +1042,8 @@
          Output: c1, c2, c3, c4, c5, c6, c7, c8
          Filter: (t1.c1 === t1.c2)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(6 rows)
+ Query Identifier: 1080461269182472389
+(7 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -1033,7 +1064,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = public.postgres_fdw_abs(c2)))
-(4 rows)
+ Query Identifier: 8531850383775146524
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
  count 
@@ -1049,7 +1081,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
-(4 rows)
+ Query Identifier: -3318293697121592480
+(5 rows)
 
 SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
  count 
@@ -1065,7 +1098,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2)) ORDER BY c2 ASC NULLS LAST LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 1080461269182472389
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -1081,7 +1115,8 @@
  Foreign Scan on public.ft2
    Output: c1, c2, c3
    Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" WHERE (((CASE WHEN ("C 1" > 990) THEN "C 1" ELSE NULL::integer END) < 1000)) ORDER BY "C 1" ASC NULLS LAST
-(3 rows)
+ Query Identifier: -7540932627799166106
+(4 rows)
 
 SELECT c1,c2,c3 FROM ft2 WHERE CASE WHEN c1 > 990 THEN c1 END < 1000 ORDER BY c1;
  c1  | c2 |  c3   
@@ -1105,7 +1140,8 @@
  Foreign Scan on public.ft2
    Output: c1, c2, c3
    Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" WHERE (((CASE (CASE WHEN (c2 > 0) THEN c2 ELSE NULL::integer END) WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END) > 600)) ORDER BY "C 1" ASC NULLS LAST
-(3 rows)
+ Query Identifier: 3662820368878230591
+(4 rows)
 
 SELECT c1,c2,c3 FROM ft2 WHERE CASE CASE WHEN c2 > 0 THEN c2 END WHEN 100 THEN 601 WHEN c2 THEN c2 ELSE 0 END > 600 ORDER BY c1;
  c1 | c2 | c3 
@@ -1120,7 +1156,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" > (CASE mod("C 1", 4) WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)))
-(3 rows)
+ Query Identifier: -4793480782172936609
+(4 rows)
 
 -- CASE cannot be pushed down because of unshippable arg clause
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -1131,7 +1168,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (ft1.c1 > CASE (random())::integer WHEN 0 THEN 1 WHEN 2 THEN 50 ELSE 100 END)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(4 rows)
+ Query Identifier: 5877807059399363456
+(5 rows)
 
 -- these are shippable
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -1141,7 +1179,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((CASE c6 WHEN 'foo'::text THEN true ELSE (c3 < 'bar') END))
-(3 rows)
+ Query Identifier: -8636426411694107394
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ft1 WHERE CASE c3 WHEN c6 THEN true ELSE c3 < 'bar' END;
@@ -1150,7 +1189,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((CASE c3 WHEN c6 THEN true ELSE (c3 < 'bar') END))
-(3 rows)
+ Query Identifier: 7732174583681749623
+(4 rows)
 
 -- but this is not because of collation
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -1161,7 +1201,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: CASE (ft1.c3)::text WHEN ft1.c6 THEN true ELSE (ft1.c3 < 'bar'::text) END
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(4 rows)
+ Query Identifier: 9147818790116851884
+(5 rows)
 
 -- check schema-qualification of regconfig constant
 CREATE TEXT SEARCH CONFIGURATION public.custom_search
@@ -1174,7 +1215,8 @@
  Foreign Scan on public.ft1
    Output: c1, to_tsvector('custom_search'::regconfig, c3)
    Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1" WHERE (("C 1" = 642)) AND ((length(to_tsvector('public.custom_search'::regconfig, c3)) > 0))
-(3 rows)
+ Query Identifier: -2108619730475018190
+(4 rows)
 
 SELECT c1, to_tsvector('custom_search'::regconfig, c3) FROM ft1
 WHERE c1 = 642 AND length(to_tsvector('custom_search'::regconfig, c3)) > 0;
@@ -1199,7 +1241,8 @@
    Output: t1.c1, t2.c1, t1.c3
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(4 rows)
+ Query Identifier: 4502392877718455124
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
  c1  | c1  
@@ -1225,7 +1268,8 @@
    Output: t1.c1, t2.c2, t3.c3, t1.c3
    Relations: ((public.ft1 t1) INNER JOIN (public.ft2 t2)) INNER JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3, r1.c3 FROM (("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) INNER JOIN "S 1"."T 3" r4 ON (((r1."C 1" = r4.c1)))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -2786288213233176088
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1251,7 +1295,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft4 t1) LEFT JOIN (public.ft5 t2)
    Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -6639391852572438406
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c1 
@@ -1277,7 +1322,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -5083383798092397196
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1305,7 +1351,8 @@
    Output: t1.c1, t1.c2, ft5.c1, ft5.c2
    Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
    Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE ((r1.c1 < 10))
-(4 rows)
+ Query Identifier: -1480559202806222085
+(5 rows)
 
 SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
  c1 | c2 | c1 | c2 
@@ -1327,7 +1374,8 @@
    Output: t1.c1, t1.c2, ft5.c1, ft5.c2
    Relations: (public.ft4 t1) LEFT JOIN (public.ft5)
    Remote SQL: SELECT r1.c1, r1.c2, r4.c1, r4.c2 FROM ("S 1"."T 3" r1 LEFT JOIN "S 1"."T 4" r4 ON (((r1.c1 = r4.c1)) AND ((r4.c1 < 10)))) WHERE (((r4.c1 < 10) OR (r4.c1 IS NULL))) AND ((r1.c1 < 10))
-(4 rows)
+ Query Identifier: -4932674851381890314
+(5 rows)
 
 SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
 			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
@@ -1348,7 +1396,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft4 t2) LEFT JOIN (public.ft5 t1)
    Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r2 LEFT JOIN "S 1"."T 4" r1 ON (((r1.c1 = r2.c1)))) ORDER BY r2.c1 ASC NULLS LAST, r1.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -7318461894003567802
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
  c1 | c1 
@@ -1374,7 +1423,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -3459803679651609479
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1400,7 +1450,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
    Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 45::bigint
-(4 rows)
+ Query Identifier: -5581413573878679883
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
  c1  | c1 
@@ -1427,7 +1478,8 @@
    Output: ft4.c1, ft5.c1
    Relations: (public.ft4) FULL JOIN (public.ft5)
    Remote SQL: SELECT s4.c1, s5.c1 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1) ON (((s4.c1 = s5.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s5.c1 ASC NULLS LAST
-(4 rows)
+ Query Identifier: -5702974133806822093
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
  c1 | c1 
@@ -1450,7 +1502,8 @@
    Output: 1
    Relations: (public.ft4) FULL JOIN (public.ft5)
    Remote SQL: SELECT NULL FROM ((SELECT NULL FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4 FULL JOIN (SELECT NULL FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5 ON (TRUE)) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -6295536957955998385
+(5 rows)
 
 SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
  ?column? 
@@ -1477,7 +1530,8 @@
    Output: ft4.c1, t2.c1, t3.c1
    Relations: (public.ft4) FULL JOIN ((public.ft4 t2) LEFT JOIN (public.ft5 t3))
    Remote SQL: SELECT s4.c1, s8.c1, s8.c2 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT r5.c1, r6.c1 FROM ("S 1"."T 3" r5 LEFT JOIN "S 1"."T 4" r6 ON (((r5.c1 = r6.c1)))) WHERE ((r5.c1 >= 50)) AND ((r5.c1 <= 60))) s8(c1, c2) ON (((s4.c1 = s8.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s8.c1 ASC NULLS LAST, s8.c2 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 7708078637851348964
+(5 rows)
 
 SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
  c1 | a  | b  
@@ -1499,7 +1553,8 @@
    Output: ft4.c1, ft4_1.c1, ft5.c1
    Relations: (public.ft4) FULL JOIN ((public.ft4 ft4_1) FULL JOIN (public.ft5))
    Remote SQL: SELECT s4.c1, s10.c1, s10.c2 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT s8.c1, s9.c1 FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s8(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s9(c1) ON (((s8.c1 = s9.c1)))) WHERE (((s8.c1 IS NULL) OR (s8.c1 IS NOT NULL)))) s10(c1, c2) ON (((s4.c1 = s10.c1)))) ORDER BY s4.c1 ASC NULLS LAST, s10.c1 ASC NULLS LAST, s10.c2 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 4135333543200563228
+(5 rows)
 
 SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
  c1 | a  | b  
@@ -1547,7 +1602,8 @@
                ->  Seq Scan on "S 1"."T 3"
                      Output: "T 3".c1, "T 3".ctid
                      Filter: ("T 3".c1 = 50)
-(28 rows)
+ Query Identifier: -6088722627629861178
+(29 rows)
 
 SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
  c1 | a  | b  
@@ -1571,7 +1627,8 @@
    Output: t1.c1, t2.c1, t3.c1
    Relations: ((public.ft4 t1) INNER JOIN (public.ft5 t2)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1.c1, r2.c1, r4.c1 FROM (("S 1"."T 3" r1 INNER JOIN "S 1"."T 4" r2 ON (((r1.c1 = (r2.c1 + 1))) AND ((r1.c1 >= 50)) AND ((r1.c1 <= 60)))) FULL JOIN "S 1"."T 3" r4 ON (((r2.c1 = r4.c1)))) ORDER BY r1.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST, r4.c1 ASC NULLS LAST LIMIT 10::bigint
-(4 rows)
+ Query Identifier: 5580159689202535412
+(5 rows)
 
 SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
  c1 | c1 | c1 
@@ -1597,7 +1654,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 726302180867143419
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1623,7 +1681,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft4 t3) LEFT JOIN (public.ft2 t2)) LEFT JOIN (public.ft2 t1)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 3" r4 LEFT JOIN "S 1"."T 1" r2 ON (((r2."C 1" = r4.c1)))) LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -2794813324893775579
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1649,7 +1708,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -3045321396465756318
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1675,7 +1735,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) FULL JOIN (public.ft2 t2)) LEFT JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -5423329328477699285
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1701,7 +1762,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t1) LEFT JOIN (public.ft2 t2)) FULL JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r1 LEFT JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) FULL JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -2958809646864094428
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1728,7 +1790,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: ((public.ft2 t2) LEFT JOIN (public.ft2 t1)) LEFT JOIN (public.ft4 t3)
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM (("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1")))) LEFT JOIN "S 1"."T 3" r4 ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 2135582250805186714
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1755,7 +1818,8 @@
    Output: t1.c1, t2.c2, t3.c3
    Relations: (public.ft4 t3) LEFT JOIN ((public.ft2 t1) INNER JOIN (public.ft2 t2))
    Remote SQL: SELECT r1."C 1", r2.c2, r4.c3 FROM ("S 1"."T 3" r4 LEFT JOIN ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ON (((r2."C 1" = r4.c1)))) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 815287422890830372
+(5 rows)
 
 SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
  c1 | c2 |   c3   
@@ -1786,7 +1850,8 @@
                Output: t1.c1, t2.c1
                Relations: (public.ft4 t1) FULL JOIN (public.ft5 t2)
                Remote SQL: SELECT r1.c1, r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 = r2.c1) OR (r1.c1 IS NULL)))
-(9 rows)
+ Query Identifier: 1083794379941391370
+(10 rows)
 
 SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c1 
@@ -1812,7 +1877,8 @@
    Output: t1.c1, t2.c2, t1.c3
    Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) WHERE ((public.postgres_fdw_abs(r1."C 1") > 0)) LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: -239113056855902987
+(5 rows)
 
 ALTER SERVER loopback OPTIONS (DROP extensions);
 -- full outer join + WHERE clause with shippable extensions not set
@@ -1827,7 +1893,8 @@
          Filter: (postgres_fdw_abs(t1.c1) > 0)
          Relations: (public.ft1 t1) FULL JOIN (public.ft2 t2)
          Remote SQL: SELECT r1."C 1", r2.c2, r1.c3 FROM ("S 1"."T 1" r1 FULL JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(7 rows)
+ Query Identifier: -239113056855902987
+(8 rows)
 
 ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
 -- join two tables with FOR UPDATE clause
@@ -1840,7 +1907,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR UPDATE OF r1
-(4 rows)
+ Query Identifier: 507492082977295065
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
  c1  | c1  
@@ -1865,7 +1933,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR UPDATE OF r1 FOR UPDATE OF r2
-(4 rows)
+ Query Identifier: 6907427516113769243
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
  c1  | c1  
@@ -1891,7 +1960,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR SHARE OF r1
-(4 rows)
+ Query Identifier: 4908443375810722041
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
  c1  | c1  
@@ -1916,7 +1986,8 @@
    Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint FOR SHARE OF r1 FOR SHARE OF r2
-(4 rows)
+ Query Identifier: 8105274288121841661
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
  c1  | c1  
@@ -1950,7 +2021,8 @@
          Sort Key: t.c1_3, t.c1_1
          ->  CTE Scan on t
                Output: t.c1_1, t.c2_1, t.c1_3
-(12 rows)
+ Query Identifier: 8762792685319310744
+(13 rows)
 
 WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
  c1_1 | c2_1 
@@ -1976,7 +2048,8 @@
    Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1.ctid, CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8) END, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2."C 1", r2.c2, r2.c3, r2.c4, r2.c5, r2.c6, r2.c7, r2.c8) END, r1."C 1", r1.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")))) ORDER BY r1.c3 ASC NULLS LAST, r1."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(4 rows)
+ Query Identifier: 9197984003949347205
+(5 rows)
 
 -- SEMI JOIN, not pushed down
 EXPLAIN (VERBOSE, COSTS OFF)
@@ -1994,7 +2067,8 @@
          ->  Foreign Scan on public.ft2 t2
                Output: t2.c1
                Remote SQL: SELECT "C 1" FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
-(11 rows)
+ Query Identifier: 5296381235410150763
+(12 rows)
 
 SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
  c1  
@@ -2027,7 +2101,8 @@
          ->  Foreign Scan on public.ft2 t2
                Output: t2.c2
                Remote SQL: SELECT c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(11 rows)
+ Query Identifier: -8129410856131873882
+(12 rows)
 
 SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
  c1  
@@ -2053,7 +2128,8 @@
    Output: t1.c1, t2.c1
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (TRUE)) ORDER BY r1."C 1" ASC NULLS LAST, r2."C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 100::bigint
-(4 rows)
+ Query Identifier: -2760264015404234284
+(5 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
  c1 | c1  
@@ -2088,7 +2164,8 @@
                ->  Foreign Scan on public.ft5 t1
                      Output: t1.c1, t1.c2, t1.c3
                      Remote SQL: SELECT c1 FROM "S 1"."T 4" ORDER BY c1 ASC NULLS LAST
-(13 rows)
+ Query Identifier: 4596702575276563478
+(14 rows)
 
 SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
  c1 | c1 
@@ -2121,7 +2198,8 @@
                      ->  Foreign Scan on public.ft2 t2
                            Output: t2.c1, t2.c8
                            Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
-(20 rows)
+ Query Identifier: 6304344610631698083
+(21 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
  c1 | c1  
@@ -2160,7 +2238,8 @@
                            Output: t1.c1, t1.c3
                            Filter: (t1.c8 = 'foo'::user_enum)
                            Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
-(17 rows)
+ Query Identifier: -762274360885686418
+(18 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
  c1  | c1  
@@ -2195,7 +2274,8 @@
                Filter: (t1.c8 = t2.c8)
                Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
                Remote SQL: SELECT r1."C 1", r2."C 1", r1.c3, r1.c8, r2.c8 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(10 rows)
+ Query Identifier: -8459283822864448349
+(11 rows)
 
 SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
  c1  | c1  
@@ -2237,7 +2317,8 @@
                                  Output: t1_1.c1, t2_1.c1
                                  Relations: (public.ft1 t1_1) INNER JOIN (public.ft2 t2_1)
                                  Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(20 rows)
+ Query Identifier: 3121423355391799931
+(21 rows)
 
 SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
  t1c1 |         avg          
@@ -2276,7 +2357,8 @@
                                  Output: t2.c1, t3.c1
                                  Relations: (public.ft1 t2) INNER JOIN (public.ft2 t3)
                                  Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1")) AND ((r1.c2 = $1::integer))))
-(17 rows)
+ Query Identifier: -6627223937968626357
+(18 rows)
 
 SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
  C 1 
@@ -2311,7 +2393,8 @@
          ->  Foreign Scan on public.ft1
                Output: 13
                Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE (("C 1" = 13))
-(11 rows)
+ Query Identifier: -2471418849676516190
+(12 rows)
 
 SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
  a  | c1 
@@ -2341,7 +2424,8 @@
                Output: ft1.c1, ft2.c1, 13
                Relations: (public.ft1) INNER JOIN (public.ft2)
                Remote SQL: SELECT r4."C 1", r5."C 1" FROM ("S 1"."T 1" r4 INNER JOIN "S 1"."T 1" r5 ON (((r5."C 1" = 12)) AND ((r4."C 1" = 12)))) ORDER BY r4."C 1" ASC NULLS LAST
-(12 rows)
+ Query Identifier: -6903208783759011795
+(13 rows)
 
 SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
  c1 | a  | b  | c  
@@ -2361,7 +2445,8 @@
    Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
    Relations: (public.ft5) INNER JOIN (public.ft4)
    Remote SQL: SELECT CASE WHEN (r1.*)::text IS NOT NULL THEN ROW(r1.c1, r1.c2, r1.c3) END, r1.c1, r1.c2, r1.c3, r2.c1, r2.c2 FROM ("S 1"."T 4" r1 INNER JOIN "S 1"."T 3" r2 ON (((r1.c1 = r2.c1)) AND ((r2.c1 >= 10)) AND ((r2.c1 <= 30)))) ORDER BY r1.c1 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 5976067758838411196
+(5 rows)
 
 SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
       ft5       | c1 | c2 |   c3   | c1 | c2 
@@ -2431,7 +2516,8 @@
                                  Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" FOR UPDATE
          ->  Index Scan using local_tbl_pkey on public.local_tbl
                Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.ctid
-(47 rows)
+ Query Identifier: -2264810852366945910
+(48 rows)
 
 SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
     AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
@@ -2486,7 +2572,8 @@
                                              ->  Foreign Scan on public.ft2
                                                    Output: ft2.*, ft2.c1, ft2.c3
                                                    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(29 rows)
+ Query Identifier: -5541545772110109497
+(30 rows)
 
 ALTER SERVER loopback OPTIONS (DROP extensions);
 ALTER SERVER loopback OPTIONS (ADD fdw_startup_cost '10000.0');
@@ -2526,7 +2613,8 @@
                                        ->  Foreign Scan on public.ft2
                                              Output: ft2.*, ft2.c1, ft2.c2, postgres_fdw_abs(ft2.c2)
                                              Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
-(32 rows)
+ Query Identifier: -1374059117739337913
+(33 rows)
 
 ALTER SERVER loopback OPTIONS (DROP fdw_startup_cost);
 ALTER SERVER loopback OPTIONS (ADD extensions 'postgres_fdw');
@@ -2559,7 +2647,8 @@
                      ->  Foreign Scan on public.ft5
                            Output: ft5.c2, ft5.c1
                            Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
-(16 rows)
+ Query Identifier: 1761975803095446417
+(17 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2585,7 +2674,8 @@
    Output: ft4.c1, ft5.c2, ft5.c1
    Relations: (public.ft4) LEFT JOIN (public.ft5)
    Remote SQL: SELECT r6.c1, r9.c2, r9.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r9 ON (((r6.c1 = r9.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r9.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 1761975803095446417
+(5 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2622,7 +2712,8 @@
                      ->  Foreign Scan on public.ft5 t2
                            Output: t2.c2, t2.c1
                            Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
-(16 rows)
+ Query Identifier: 3599313231266522435
+(17 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2648,7 +2739,8 @@
    Output: ft4.c1, t2.c2, t2.c1
    Relations: (public.ft4) LEFT JOIN (public.ft5 t2)
    Remote SQL: SELECT r6.c1, r2.c2, r2.c1 FROM ("S 1"."T 3" r6 LEFT JOIN "S 1"."T 4" r2 ON (((r6.c1 = r2.c1)))) ORDER BY r6.c1 ASC NULLS LAST, r2.c1 ASC NULLS LAST LIMIT 10::bigint OFFSET 10::bigint
-(4 rows)
+ Query Identifier: 3599313231266522435
+(5 rows)
 
 SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
  c1 | c2 
@@ -2681,7 +2773,8 @@
    Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(c6), sum("C 1"), avg("C 1"), min(c2), max("C 1"), stddev(c2), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 7 ORDER BY count(c6) ASC NULLS LAST, sum("C 1") ASC NULLS LAST
-(4 rows)
+ Query Identifier: -7629901552105136676
+(5 rows)
 
 select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
  count |  sum  |         avg          | min | max  | stddev | sum2  
@@ -2701,7 +2794,8 @@
    Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(c6), sum("C 1"), avg("C 1"), min(c2), max("C 1"), stddev(c2), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 7 ORDER BY count(c6) ASC NULLS LAST, sum("C 1") ASC NULLS LAST LIMIT 1::bigint
-(4 rows)
+ Query Identifier: 2064179401130234982
+(5 rows)
 
 select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
  count |  sum  |         avg          | min | max | stddev | sum2  
@@ -2719,7 +2813,8 @@
    ->  Foreign Scan on public.ft1
          Output: c1
          Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
-(5 rows)
+ Query Identifier: 3659478951342348453
+(6 rows)
 
 -- Aggregate over join query
 explain (verbose, costs off)
@@ -2730,7 +2825,8 @@
    Output: (count(*)), (sum(t1.c1)), (avg(t2.c1))
    Relations: Aggregate on ((public.ft1 t1) INNER JOIN (public.ft1 t2))
    Remote SQL: SELECT count(*), sum(r1."C 1"), avg(r2."C 1") FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2.c2 = 6)) AND ((r1.c2 = 6))))
-(4 rows)
+ Query Identifier: 5296434276427444388
+(5 rows)
 
 select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
  count |   sum   |         avg          
@@ -2750,7 +2846,8 @@
          Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
          Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
          Remote SQL: SELECT r1."C 1", r2."C 1" FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r1."C 1" = r2."C 1"))))
-(7 rows)
+ Query Identifier: 7627275433943864515
+(8 rows)
 
 -- GROUP BY clause having expressions
 explain (verbose, costs off)
@@ -2761,7 +2858,8 @@
    Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT (c2 / 2), (sum(c2) * (c2 / 2)) FROM "S 1"."T 1" GROUP BY 1 ORDER BY (c2 / 2) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 2571438689882265883
+(5 rows)
 
 select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
  ?column? | ?column? 
@@ -2784,7 +2882,8 @@
          Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c2, sum("C 1"), sqrt("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 ORDER BY c2 ASC NULLS LAST, sum("C 1") ASC NULLS LAST
-(6 rows)
+ Query Identifier: -8978059619981014878
+(7 rows)
 
 select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
  count | sum  
@@ -2804,7 +2903,8 @@
          Output: (c2 * ((random() <= '1'::double precision))::integer), ((sum(c1) * c2)), c2
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT (sum("C 1") * c2), c2 FROM "S 1"."T 1" GROUP BY 2
-(7 rows)
+ Query Identifier: 3592392316985706432
+(8 rows)
 
 select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
  sum1 |  sum2  
@@ -2835,7 +2935,8 @@
          ->  Foreign Scan on public.ft2
                Output: (c2 * ((random() <= '1'::double precision))::integer)
                Remote SQL: SELECT c2 FROM "S 1"."T 1"
-(9 rows)
+ Query Identifier: 3351814362393411273
+(10 rows)
 
 -- GROUP BY clause in various forms, cardinal, alias and constant expression
 explain (verbose, costs off)
@@ -2849,7 +2950,8 @@
          Output: (count(c2)), c2, 5, 7.0, 9
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT count(c2), c2, 5, 7.0, 9 FROM "S 1"."T 1" GROUP BY 2, 3, 5
-(7 rows)
+ Query Identifier: 7789225674382295501
+(8 rows)
 
 select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
   w  | x | y |  z  
@@ -2876,7 +2978,8 @@
    Output: c2, c2, (sum(c1))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT c2, c2, sum("C 1") FROM "S 1"."T 1" WHERE ((c2 > 6)) GROUP BY 1, 2 ORDER BY sum("C 1") ASC NULLS LAST
-(4 rows)
+ Query Identifier: -8681987653950465011
+(5 rows)
 
 select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
  c2 | c2 
@@ -2895,7 +2998,8 @@
    Output: c2, (sum(c1))
    Relations: Aggregate on (public.ft2)
    Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1 HAVING ((avg("C 1") < 500::numeric)) AND ((sum("C 1") < 49800)) ORDER BY c2 ASC NULLS LAST
-(4 rows)
+ Query Identifier: 1565439741474099348
+(5 rows)
 
 select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
  c2 |  sum  
@@ -2916,7 +3020,8 @@
          Filter: (((((avg(ft1.c1)) / (avg(ft1.c1))))::double precision * random()) <= '1'::double precision)
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c5, NULL::bigint, sqrt(c2), avg("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 HAVING ((avg("C 1") < 500::numeric))
-(7 rows)
+ Query Identifier: -7211400599333672268
+(8 rows)
 
 select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
  count 
@@ -2939,7 +3044,8 @@
          ->  Foreign Scan on public.ft1
                Output: c1, c2
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
-(10 rows)
+ Query Identifier: 6741161554745348446
+(11 rows)
 
 -- Remote aggregate in combination with a local Param (for the output
 -- of an initplan) can be trouble, per bug #15781
@@ -2953,7 +3059,8 @@
    Remote SQL: SELECT sum("C 1") FROM "S 1"."T 1"
    InitPlan 1 (returns $0)
      ->  Seq Scan on pg_catalog.pg_enum
-(6 rows)
+ Query Identifier: 7250723442514604853
+(7 rows)
 
 select exists(select 1 from pg_enum), sum(c1) from ft1;
  exists |  sum   
@@ -2973,7 +3080,8 @@
    ->  Foreign Scan on public.ft1
          Output: $0, ft1.c1
          Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
-(8 rows)
+ Query Identifier: 8752865140998532248
+(9 rows)
 
 select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
  exists |  sum   
@@ -2991,7 +3099,8 @@
    Output: (array_agg(c1 ORDER BY c1)), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) GROUP BY 2 ORDER BY array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST) ASC NULLS LAST
-(4 rows)
+ Query Identifier: -4530125927552538212
+(5 rows)
 
 select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
            array_agg            
@@ -3017,7 +3126,8 @@
    Output: (array_agg(c5 ORDER BY c1 DESC))
    Relations: Aggregate on (public.ft2)
    Remote SQL: SELECT array_agg(c5 ORDER BY "C 1" DESC NULLS FIRST) FROM "S 1"."T 1" WHERE (("C 1" < 50)) AND ((c2 = 6))
-(4 rows)
+ Query Identifier: 379038105135483763
+(5 rows)
 
 select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                 array_agg                                                                 
@@ -3034,7 +3144,8 @@
    Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT array_agg(DISTINCT (r1.c1 % 5)), (r2.c1 % 3) FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) GROUP BY 2 ORDER BY array_agg(DISTINCT (r1.c1 % 5)) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 1912291907392146166
+(5 rows)
 
 select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
   array_agg   
@@ -3052,7 +3163,8 @@
    Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) ASC NULLS LAST), (r2.c1 % 3) FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) GROUP BY 2 ORDER BY array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) ASC NULLS LAST) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 7687632945364462208
+(5 rows)
 
 select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
   array_agg   
@@ -3069,7 +3181,8 @@
    Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) DESC NULLS LAST), (r2.c1 % 3) FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) WHERE (((r1.c1 < 20) OR ((r1.c1 IS NULL) AND (r2.c1 < 5)))) GROUP BY 2 ORDER BY array_agg(DISTINCT (r1.c1 % 5) ORDER BY ((r1.c1 % 5)) DESC NULLS LAST) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 4827270256454561763
+(5 rows)
 
 select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
   array_agg   
@@ -3087,7 +3200,8 @@
    Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))), c2 FROM "S 1"."T 1" GROUP BY 2 ORDER BY sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))) ASC NULLS LAST
-(4 rows)
+ Query Identifier: -5304260718627781664
+(5 rows)
 
 select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
  sum 
@@ -3113,7 +3227,8 @@
    Output: (sum((c1 % 3))), (sum(DISTINCT (c1 % 3) ORDER BY (c1 % 3)) FILTER (WHERE ((c1 % 3) < 2))), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT sum(("C 1" % 3)), sum(DISTINCT ("C 1" % 3) ORDER BY (("C 1" % 3)) ASC NULLS LAST) FILTER (WHERE (("C 1" % 3) < 2)), c2 FROM "S 1"."T 1" WHERE ((c2 = 6)) GROUP BY 3
-(4 rows)
+ Query Identifier: 6046404401381009011
+(5 rows)
 
 select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
  sum | sum | c2 
@@ -3139,7 +3254,8 @@
                  ->  Foreign Scan on public.ft1 t1
                        Output: (count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                        Remote SQL: SELECT NULL FROM "S 1"."T 1" WHERE (("C 1" = 6))
-(13 rows)
+ Query Identifier: -2888841886407882590
+(14 rows)
 
 select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
  count 
@@ -3165,7 +3281,8 @@
                        Output: (count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                        Relations: Aggregate on (public.ft1 t1)
                        Remote SQL: SELECT count("C 1") FILTER (WHERE (($1::integer = 6) AND ($2::integer < 10))) FROM "S 1"."T 1" WHERE (("C 1" = 6))
-(13 rows)
+ Query Identifier: 3958514917367217251
+(14 rows)
 
 select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
  count 
@@ -3188,7 +3305,8 @@
          ->  Foreign Scan on public.ft1
                Output: c1, c2
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
-(9 rows)
+ Query Identifier: 643352825944158406
+(10 rows)
 
 explain (verbose, costs off)
 select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
@@ -3203,7 +3321,8 @@
      ->  Foreign Scan on public.ft1 ft1_1
            Output: ft1_1.c2
            Remote SQL: SELECT c2 FROM "S 1"."T 1" WHERE ((c2 < 5))
-(9 rows)
+ Query Identifier: -5119018345335273382
+(10 rows)
 
 -- Ordered-sets within aggregate
 explain (verbose, costs off)
@@ -3217,7 +3336,8 @@
          Output: c2, (rank('10'::character varying) WITHIN GROUP (ORDER BY c6)), (percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision)))
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c2, rank('10'::character varying) WITHIN GROUP (ORDER BY c6 ASC NULLS LAST), percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1 HAVING ((percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) < 500::double precision))
-(7 rows)
+ Query Identifier: -3583412379598234435
+(8 rows)
 
 select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
  c2 | rank | percentile_cont 
@@ -3238,7 +3358,8 @@
    Output: c1, (rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2)), c2
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT "C 1", rank("C 1", c2) WITHIN GROUP (ORDER BY "C 1" ASC NULLS LAST, c2 ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" = 6)) GROUP BY 1, 3
-(4 rows)
+ Query Identifier: 2397809316075477935
+(5 rows)
 
 select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
  c1 | rank 
@@ -3266,7 +3387,8 @@
    ->  Foreign Scan on public.ft1
          Output: c2, c1
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(6 rows)
+ Query Identifier: 281949721510971793
+(7 rows)
 
 -- Add function and aggregate into extension
 alter extension postgres_fdw add function least_accum(anyelement, variadic anyarray);
@@ -3284,7 +3406,8 @@
          Output: c2, (least_agg(VARIADIC ARRAY[c1]))
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT c2, public.least_agg(VARIADIC ARRAY["C 1"]) FROM "S 1"."T 1" WHERE ((c2 < 100)) GROUP BY 1
-(7 rows)
+ Query Identifier: 8064730692454825946
+(8 rows)
 
 select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
  c2 | least_agg 
@@ -3316,7 +3439,8 @@
    ->  Foreign Scan on public.ft1
          Output: c2, c1
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY c2 ASC NULLS LAST
-(6 rows)
+ Query Identifier: 281949721510971793
+(7 rows)
 
 -- Cleanup
 reset enable_hashagg;
@@ -3362,7 +3486,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
-(6 rows)
+ Query Identifier: 5862379770541341889
+(7 rows)
 
 -- This should not be pushed either.
 explain (verbose, costs off)
@@ -3375,7 +3500,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2, c3, c4, c5, c6, c7, c8
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: 105224565662493668
+(7 rows)
 
 -- Update local stats on ft2
 ANALYZE ft2;
@@ -3396,7 +3522,8 @@
    Output: (array_agg(c1 ORDER BY c1 USING <^ NULLS LAST)), c2
    Relations: Aggregate on (public.ft2)
    Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" USING OPERATOR(public.<^) NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6)) GROUP BY 2
-(4 rows)
+ Query Identifier: 5862379770541341889
+(5 rows)
 
 select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
            array_agg            
@@ -3412,7 +3539,8 @@
  Foreign Scan on public.ft2
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY "C 1" USING OPERATOR(public.<^) NULLS LAST
-(3 rows)
+ Query Identifier: 105224565662493668
+(4 rows)
 
 -- Remove from extension
 alter extension postgres_fdw drop operator class my_op_class using btree;
@@ -3433,7 +3561,8 @@
    ->  Foreign Scan on public.ft2
          Output: c1, c2
          Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
-(6 rows)
+ Query Identifier: 5862379770541341889
+(7 rows)
 
 -- Cleanup
 drop operator class my_op_class using btree;
@@ -3461,7 +3590,8 @@
                ->  Foreign Scan on public.ft2 t2
                      Output: t2.c2
                      Remote SQL: SELECT c2 FROM "S 1"."T 1"
-(13 rows)
+ Query Identifier: 2738872292668499519
+(14 rows)
 
 -- Subquery in FROM clause having aggregate
 explain (verbose, costs off)
@@ -3489,7 +3619,8 @@
                                  Output: ft1_1.c2, (sum(ft1_1.c1))
                                  Relations: Aggregate on (public.ft1 ft1_1)
                                  Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1
-(21 rows)
+ Query Identifier: 6868437174748660172
+(22 rows)
 
 select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
  count |   b   
@@ -3515,7 +3646,8 @@
    Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
    Relations: Aggregate on ((public.ft4 t1) FULL JOIN (public.ft5 t2))
    Remote SQL: SELECT avg(r1.c1), sum(r2.c1), r2.c1 FROM ("S 1"."T 3" r1 FULL JOIN "S 1"."T 4" r2 ON (((r1.c1 = r2.c1)))) GROUP BY 3 HAVING ((((avg(r1.c1) IS NULL) AND (sum(r2.c1) < 10)) OR (sum(r2.c1) IS NULL))) ORDER BY avg(r1.c1) ASC NULLS LAST, sum(r2.c1) ASC NULLS LAST
-(4 rows)
+ Query Identifier: 3034292383790060554
+(5 rows)
 
 select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
          avg         | sum 
@@ -3535,7 +3667,8 @@
    Output: (count(*)), (sum(ft4.c1)), (avg(ft5.c1))
    Relations: Aggregate on ((public.ft4) FULL JOIN (public.ft5))
    Remote SQL: SELECT count(*), sum(s4.c1), avg(s5.c1) FROM ((SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s4(c1) FULL JOIN (SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))) s5(c1) ON (((s4.c1 = s5.c1))))
-(4 rows)
+ Query Identifier: 2497061926200343859
+(5 rows)
 
 select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
  count | sum |         avg         
@@ -3556,7 +3689,8 @@
          Output: ((sum(c2)) * ((random() <= '1'::double precision))::integer)
          Relations: Aggregate on (public.ft1)
          Remote SQL: SELECT sum(c2) FROM "S 1"."T 1"
-(7 rows)
+ Query Identifier: 6267885764019401507
+(8 rows)
 
 select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
  sum  
@@ -3586,7 +3720,8 @@
                      Output: (sum((t2.c1 + t1."C 1"))), t2.c1
                      Relations: Aggregate on (public.ft2 t2)
                      Remote SQL: SELECT sum(("C 1" + $1::integer)), "C 1" FROM "S 1"."T 1" GROUP BY 2
-(16 rows)
+ Query Identifier: -7852270503780353097
+(17 rows)
 
 select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
  c2 | sum 
@@ -3626,7 +3761,8 @@
          ->  Foreign Scan on public.ft2 ref_3
                Output: ref_3.c3
                Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE ((c3 = '00001'))
-(15 rows)
+ Query Identifier: -7943378696103415073
+(16 rows)
 
 SELECT ref_0.c2, subq_1.*
 FROM
@@ -3674,7 +3810,8 @@
                            Output: 13, (avg(ft1.c1)), NULL::bigint
                            Relations: Aggregate on ((public.ft2) LEFT JOIN (public.ft1))
                            Remote SQL: SELECT 13, avg(r1."C 1"), NULL::bigint FROM ("S 1"."T 1" r2 LEFT JOIN "S 1"."T 1" r1 ON (((r1."C 1" = r2."C 1"))))
-(17 rows)
+ Query Identifier: 6694731811712564774
+(18 rows)
 
 select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
  sum | count 
@@ -3698,7 +3835,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c1
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(10 rows)
+ Query Identifier: 1297549460853508085
+(11 rows)
 
 select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
  c2 |  sum   
@@ -3723,7 +3861,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c1
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(10 rows)
+ Query Identifier: 1297549460853508085
+(11 rows)
 
 select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
  c2 |  sum   
@@ -3748,7 +3887,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c6, c1
                Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(10 rows)
+ Query Identifier: 5733908354553833515
+(11 rows)
 
 select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
  c2 | c6 |  sum  
@@ -3774,7 +3914,8 @@
          ->  Foreign Scan on public.ft1
                Output: c2, c1
                Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
-(9 rows)
+ Query Identifier: -8274967779844791824
+(10 rows)
 
 select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
  c2 |  sum  | grouping 
@@ -3798,7 +3939,8 @@
                Output: ((sum(c1) / 1000)), c2
                Relations: Aggregate on (public.ft2)
                Remote SQL: SELECT (sum("C 1") / 1000), c2 FROM "S 1"."T 1" WHERE ((c2 < 6)) GROUP BY 2
-(9 rows)
+ Query Identifier: 5323515068013592908
+(10 rows)
 
 select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
  s  
@@ -3824,7 +3966,8 @@
                      Output: c2, ((c2 % 2)), (sum(c2))
                      Relations: Aggregate on (public.ft2)
                      Remote SQL: SELECT c2, (c2 % 2), sum(c2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
-(12 rows)
+ Query Identifier: 1500742342139052019
+(13 rows)
 
 select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
  c2 | sum | count 
@@ -3857,7 +4000,8 @@
                      Output: c2, ((c2 % 2))
                      Relations: Aggregate on (public.ft1)
                      Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
-(12 rows)
+ Query Identifier: -2639487285781545293
+(13 rows)
 
 select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
  c2 |  array_agg  
@@ -3890,7 +4034,8 @@
                      Output: c2, ((c2 % 2))
                      Relations: Aggregate on (public.ft1)
                      Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
-(12 rows)
+ Query Identifier: 8247445217288950589
+(13 rows)
 
 select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
  c2 |  array_agg  
@@ -3919,7 +4064,8 @@
    Output: t1.c3, t2.c3
    Relations: (public.ft1 t1) INNER JOIN (public.ft2 t2)
    Remote SQL: SELECT r1.c3, r2.c3 FROM ("S 1"."T 1" r1 INNER JOIN "S 1"."T 1" r2 ON (((r2."C 1" = 2)) AND ((r1."C 1" = 1))))
-(4 rows)
+ Query Identifier: 1151883621808579290
+(5 rows)
 
 EXECUTE st1(1, 1);
   c3   |  c3   
@@ -3953,7 +4099,8 @@
                      Output: t2.c3
                      Filter: (date(t2.c4) = '01-17-1970'::date)
                      Remote SQL: SELECT c3, c4 FROM "S 1"."T 1" WHERE (("C 1" > 10))
-(15 rows)
+ Query Identifier: -9066830618270008861
+(16 rows)
 
 EXECUTE st2(10, 20);
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -3986,7 +4133,8 @@
                ->  Foreign Scan on public.ft2 t2
                      Output: t2.c3
                      Remote SQL: SELECT c3 FROM "S 1"."T 1" WHERE (("C 1" > 10)) AND ((date(c5) = '1970-01-17'::date))
-(14 rows)
+ Query Identifier: -1909727684737231791
+(15 rows)
 
 EXECUTE st3(10, 20);
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4007,7 +4155,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -3258251462498810454
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4015,7 +4164,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -3258251462498810454
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4023,7 +4173,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -3258251462498810454
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4031,7 +4182,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -3258251462498810454
+(4 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                          
@@ -4039,7 +4191,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(3 rows)
+ Query Identifier: -3258251462498810454
+(4 rows)
 
 -- once we try it enough times, should switch to generic plan
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
@@ -4048,7 +4201,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
-(3 rows)
+ Query Identifier: -3258251462498810454
+(4 rows)
 
 -- value of $1 should not be sent to remote
 PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
@@ -4059,7 +4213,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 7981359672026708955
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4068,7 +4223,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 7981359672026708955
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4077,7 +4233,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 7981359672026708955
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4086,7 +4243,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 7981359672026708955
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                          
@@ -4095,7 +4253,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = 'foo'::user_enum)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
-(4 rows)
+ Query Identifier: 7981359672026708955
+(5 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                               QUERY PLAN                                               
@@ -4104,7 +4263,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Filter: (t1.c8 = $1)
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
-(4 rows)
+ Query Identifier: 7981359672026708955
+(5 rows)
 
 EXECUTE st5('foo', 1);
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4120,7 +4280,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
-(3 rows)
+ Query Identifier: 426456319088356645
+(4 rows)
 
 PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
@@ -4131,7 +4292,8 @@
    Batch Size: 1
    ->  Result
          Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
-(5 rows)
+ Query Identifier: 1579330015641090063
+(6 rows)
 
 ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
 ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 0');
@@ -4141,7 +4303,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 0" WHERE (("C 1" = c2))
-(3 rows)
+ Query Identifier: 426456319088356645
+(4 rows)
 
 EXECUTE st6;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4165,7 +4328,8 @@
    Batch Size: 1
    ->  Result
          Output: NULL::integer, 1001, 101, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft1       '::character(10), NULL::user_enum
-(5 rows)
+ Query Identifier: 1579330015641090063
+(6 rows)
 
 ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
 ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 1');
@@ -4177,7 +4341,8 @@
    Output: (count(c3))
    Relations: Aggregate on (public.ft1 t1)
    Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
-(4 rows)
+ Query Identifier: -3318293697121592480
+(5 rows)
 
 ALTER SERVER loopback OPTIONS (DROP extensions);
 EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
@@ -4189,7 +4354,8 @@
          Output: c3
          Filter: (t1.c1 === t1.c2)
          Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -3318293697121592480
+(7 rows)
 
 EXECUTE st8;
  count 
@@ -4218,7 +4384,8 @@
          Output: c1, c2, c3, c4, c5, c6, c7, c8
          Filter: (t1.tableoid = '1259'::oid)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(6 rows)
+ Query Identifier: -2146418612502386193
+(7 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4233,7 +4400,8 @@
  Foreign Scan on public.ft1 t1
    Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 1872849352715402543
+(4 rows)
 
 SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
  tableoid | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4248,7 +4416,8 @@
  Foreign Scan on public.ft1 t1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'))
-(3 rows)
+ Query Identifier: -6173677358902651775
+(4 rows)
 
 SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4263,7 +4432,8 @@
  Foreign Scan on public.ft1 t1
    Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" LIMIT 1::bigint
-(3 rows)
+ Query Identifier: -4180335987880884378
+(4 rows)
 
 SELECT ctid, * FROM ft1 t1 LIMIT 1;
  ctid  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4345,7 +4515,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c8 = 'foo')) LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 1811451083120351374
+(4 rows)
 
 SELECT * FROM ft1 WHERE c8 = 'foo' LIMIT 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4360,7 +4531,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (('foo' = c8)) LIMIT 1::bigint
-(3 rows)
+ Query Identifier: 6203948590816973541
+(4 rows)
 
 SELECT * FROM ft1 WHERE 'foo' = c8 LIMIT 1;
  c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  
@@ -4435,7 +4607,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
-(3 rows)
+ Query Identifier: 1754482545400077519
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                QUERY PLAN                               
@@ -4443,7 +4616,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f1 = 'foo'))
-(3 rows)
+ Query Identifier: 2759033738326734581
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                QUERY PLAN                               
@@ -4451,7 +4625,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f2 = 'foo'))
-(3 rows)
+ Query Identifier: 4514422782942717490
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                QUERY PLAN                               
@@ -4459,7 +4634,8 @@
  Foreign Scan on public.ft3
    Output: f1, f2, f3
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE ((f3 = 'foo'))
-(3 rows)
+ Query Identifier: -4875785666417425994
+(4 rows)
 
 explain (verbose, costs off) select * from ft3 f, loct3 l
   where f.f3 = l.f3 and l.f1 = 'foo';
@@ -4473,7 +4649,8 @@
    ->  Foreign Scan on public.ft3 f
          Output: f.f1, f.f2, f.f3
          Remote SQL: SELECT f1, f2, f3 FROM public.loct3 WHERE (($1::character varying(10) = f3))
-(8 rows)
+ Query Identifier: 924234386360964396
+(9 rows)
 
 -- can't be sent to remote
 explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
@@ -4483,7 +4660,8 @@
    Output: f1, f2, f3
    Filter: ((ft3.f1)::text = 'foo'::text)
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -4949524233688357192
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                     QUERY PLAN                     
@@ -4492,7 +4670,8 @@
    Output: f1, f2, f3
    Filter: (ft3.f1 = 'foo'::text COLLATE "C")
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -7787772952422326275
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                     QUERY PLAN                     
@@ -4501,7 +4680,8 @@
    Output: f1, f2, f3
    Filter: ((ft3.f2)::text = 'foo'::text)
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -1447434929240244553
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                     QUERY PLAN                     
@@ -4510,7 +4690,8 @@
    Output: f1, f2, f3
    Filter: (ft3.f2 = 'foo'::text COLLATE "C")
    Remote SQL: SELECT f1, f2, f3 FROM public.loct3
-(4 rows)
+ Query Identifier: -3288656906359950971
+(5 rows)
 
 explain (verbose, costs off) select * from ft3 f, loct3 l
   where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
@@ -4528,7 +4709,8 @@
          ->  Index Scan using loct3_f1_key on public.loct3 l
                Output: l.f1, l.f2, l.f3
                Index Cond: (l.f1 = 'foo'::text)
-(12 rows)
+ Query Identifier: -3513089989558134236
+(13 rows)
 
 -- ===================================================================
 -- test writable foreign table stuff
@@ -4545,7 +4727,8 @@
          ->  Foreign Scan on public.ft2 ft2_1
                Output: (ft2_1.c1 + 1000), (ft2_1.c2 + 100), (ft2_1.c3 || ft2_1.c3)
                Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1" LIMIT 20::bigint
-(8 rows)
+ Query Identifier: -1991466732792783923
+(9 rows)
 
 INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
 INSERT INTO ft2 (c1,c2,c3)
@@ -4565,7 +4748,8 @@
  Update on public.ft2
    ->  Foreign Update on public.ft2
          Remote SQL: UPDATE "S 1"."T 1" SET c2 = (c2 + 300), c3 = (c3 || '_update3') WHERE ((("C 1" % 10) = 3))
-(3 rows)
+ Query Identifier: -1862916415065989356
+(4 rows)
 
 UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
 EXPLAIN (verbose, costs off)
@@ -4576,7 +4760,8 @@
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    ->  Foreign Update on public.ft2
          Remote SQL: UPDATE "S 1"."T 1" SET c2 = (c2 + 400), c3 = (c3 || '_update7') WHERE ((("C 1" % 10) = 7)) RETURNING "C 1", c2, c3, c4, c5, c6, c7, c8
-(4 rows)
+ Query Identifier: -6556028503590674336
+(5 rows)
 
 UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
   c1  | c2  |         c3         |              c4              |            c5            | c6 |     c7     | c8  
@@ -4693,7 +4878,8 @@
  Update on public.ft2
    ->  Foreign Update
          Remote SQL: UPDATE "S 1"."T 1" r1 SET c2 = (r1.c2 + 500), c3 = (r1.c3 || '_update9'), c7 = 'ft2       '::character(10) FROM "S 1"."T 1" r2 WHERE ((r1.c2 = r2."C 1")) AND (((r2."C 1" % 10) = 9))
-(3 rows)
+ Query Identifier: 1443069368146829174
+(4 rows)
 
 UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
@@ -4705,7 +4891,8 @@
    Output: c1, c4
    ->  Foreign Delete on public.ft2
          Remote SQL: DELETE FROM "S 1"."T 1" WHERE ((("C 1" % 10) = 5)) RETURNING "C 1", c4
-(4 rows)
+ Query Identifier: -1056773099929423529
+(5 rows)
 
 DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;
   c1  |              c4              
@@ -4822,7 +5009,8 @@
  Delete on public.ft2
    ->  Foreign Delete
          Remote SQL: DELETE FROM "S 1"."T 1" r1 USING "S 1"."T 1" r2 WHERE ((r1.c2 = r2."C 1")) AND (((r2."C 1" % 10) = 2))
-(3 rows)
+ Query Identifier: 7131403272432132269
+(4 rows)
 
 DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
 SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
@@ -5659,7 +5847,8 @@
    Batch Size: 1
    ->  Result
          Output: 1200, 999, NULL::integer, 'foo'::text, NULL::timestamp with time zone, NULL::timestamp without time zone, NULL::character varying, 'ft2       '::character(10), NULL::user_enum
-(6 rows)
+ Query Identifier: -4060230893840953954
+(7 rows)
 
 INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
  tableoid 
@@ -5675,7 +5864,8 @@
    Output: (tableoid)::regclass
    ->  Foreign Update on public.ft2
          Remote SQL: UPDATE "S 1"."T 1" SET c3 = 'bar'::text WHERE (("C 1" = 1200))
-(4 rows)
+ Query Identifier: -7674962074028065398
+(5 rows)
 
 UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
  tableoid 
@@ -5691,7 +5881,8 @@
    Output: (tableoid)::regclass
    ->  Foreign Delete on public.ft2
          Remote SQL: DELETE FROM "S 1"."T 1" WHERE (("C 1" = 1200))
-(4 rows)
+ Query Identifier: -3559250678745512238
+(5 rows)
 
 DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;
  tableoid 
@@ -5713,7 +5904,8 @@
    Output: ft2.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft4.*, ft4.c1, ft4.c2, ft4.c3
    ->  Foreign Update
          Remote SQL: UPDATE "S 1"."T 1" r1 SET c3 = 'foo'::text FROM ("S 1"."T 3" r2 INNER JOIN "S 1"."T 4" r3 ON (TRUE)) WHERE ((r2.c1 = r3.c1)) AND ((r1.c2 = r2.c1)) AND ((r1."C 1" > 1200)) RETURNING r1."C 1", r1.c2, r1.c3, r1.c4, r1.c5, r1.c6, r1.c7, r1.c8, CASE WHEN (r2.*)::text IS NOT NULL THEN ROW(r2.c1, r2.c2, r2.c3) END, r2.c1, r2.c2, r2.c3
-(4 rows)
+ Query Identifier: 597898621805816957
+(5 rows)
 
 UPDATE ft2 SET c3 = 'foo'
   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
@@ -5750,7 +5942,8 @@
    Output: 100
    ->  Foreign Delete
          Remote SQL: DELETE FROM "S 1"."T 1" r1 USING ("S 1"."T 3" r2 LEFT JOIN "S 1"."T 4" r3 ON (((r2.c1 = r3.c1)))) WHERE ((r1.c2 = r2.c1)) AND ((r1."C 1" > 1200)) AND (((r1."C 1" % 10) = 0))
-(4 rows)
+ Query Identifier: -6777020667942568305
+(5 rows)
 
 DELETE FROM ft2
   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
@@ -5790,7 +5983,8 @@
            ->  Foreign Scan on public.ft2 src
                  Output: (src.c2 * 10), src.c7
                  Remote SQL: SELECT c2, c7 FROM "S 1"."T 1" WHERE (($1::integer = "C 1"))
-(9 rows)
+ Query Identifier: -8198572582301052024
+(10 rows)
 
 UPDATE ft2 AS target SET (c2, c7) = (
     SELECT c2 * 10, c7
@@ -5826,7 +6020,8 @@
                      ->  Foreign Scan on public.ft2 t
                            Output: t.*, t.c1
                            Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
-(17 rows)
+ Query Identifier: -3275318016121608650
+(18 rows)
 
 UPDATE ft2 d SET c2 = CASE WHEN random() >= 0 THEN d.c2 ELSE 0 END
   FROM ft2 AS t WHERE d.c1 = t.c1 AND d.c1 > 1000;
@@ -5846,7 +6041,8 @@
          Output: 'bar'::text, ctid, ft2.*
          Filter: (postgres_fdw_abs(ft2.c1) > 2000)
          Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" FOR UPDATE
-(7 rows)
+ Query Identifier: 7181397614585268323
+(8 rows)
 
 UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
   c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 
@@ -5894,7 +6090,8 @@
                            ->  Foreign Scan on public.ft5
                                  Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
                                  Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
-(24 rows)
+ Query Identifier: 5929814284178808203
+(25 rows)
 
 UPDATE ft2 SET c3 = 'baz'
   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
@@ -5934,7 +6131,8 @@
                ->  Foreign Scan on public.ft5
                      Output: ft5.*, ft5.c1
                      Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
-(22 rows)
+ Query Identifier: -4615582097258987129
+(23 rows)
 
 DELETE FROM ft2
   USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
@@ -6357,7 +6555,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS LAST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 795::bigint
-(3 rows)
+ Query Identifier: 3631899889952434272
+(4 rows)
 
 SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
   c1  | c2  |         c3         |              c4              |            c5            |  c6  |     c7     | c8  
@@ -6381,7 +6580,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 DESC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
-(3 rows)
+ Query Identifier: -2972450843665104511
+(4 rows)
 
 SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
   c1  | c2  |       c3        |              c4              |            c5            | c6 |     c7     | c8  
@@ -6405,7 +6605,8 @@
  Foreign Scan on public.ft1
    Output: c1, c2, c3, c4, c5, c6, c7, c8
    Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" ORDER BY c6 ASC NULLS FIRST, "C 1" ASC NULLS LAST LIMIT 10::bigint OFFSET 15::bigint
-(3 rows)
+ Query Identifier: -1072204413800029394
+(4 rows)
 
 SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
   c1  | c2  |        c3         |              c4              |            c5            |  c6  |     c7     | c8  
@@ -6434,7 +6635,8 @@
    Output: (count(*))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 < 0))
-(4 rows)
+ Query Identifier: -196004421595872200
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 < 0;
  count 
@@ -6444,13 +6646,14 @@
 
 SET constraint_exclusion = 'on';
 EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
-           QUERY PLAN           
---------------------------------
+              QUERY PLAN               
+---------------------------------------
  Aggregate
    Output: count(*)
    ->  Result
          One-Time Filter: false
-(4 rows)
+ Query Identifier: -196004421595872200
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 < 0;
  count 
@@ -6478,7 +6681,8 @@
    Output: (count(*))
    Relations: Aggregate on (public.ft1)
    Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 >= 0))
-(4 rows)
+ Query Identifier: 2252264295058673023
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 >= 0;
  count 
@@ -6488,13 +6692,14 @@
 
 SET constraint_exclusion = 'on';
 EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
-           QUERY PLAN           
---------------------------------
+              QUERY PLAN               
+---------------------------------------
  Aggregate
    Output: count(*)
    ->  Result
          One-Time Filter: false
-(4 rows)
+ Query Identifier: 2252264295058673023
+(5 rows)
 
 SELECT count(*) FROM ft1 WHERE c2 >= 0;
  count 
@@ -6540,7 +6745,8 @@
    Batch Size: 1
    ->  Result
          Output: 0, 5
-(5 rows)
+ Query Identifier: 2472438949091290072
+(6 rows)
 
 INSERT INTO rw_view VALUES (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6554,7 +6760,8 @@
    Batch Size: 1
    ->  Result
          Output: 0, 15
-(5 rows)
+ Query Identifier: 2472438949091290072
+(6 rows)
 
 INSERT INTO rw_view VALUES (0, 15); -- ok
 SELECT * FROM foreign_tbl;
@@ -6572,7 +6779,8 @@
    ->  Foreign Scan on public.foreign_tbl
          Output: (foreign_tbl.b + 5), foreign_tbl.ctid, foreign_tbl.*
          Remote SQL: SELECT a, b, ctid FROM public.base_tbl WHERE ((a < b)) FOR UPDATE
-(5 rows)
+ Query Identifier: 8931266465114127296
+(6 rows)
 
 UPDATE rw_view SET b = b + 5; -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6586,7 +6794,8 @@
    ->  Foreign Scan on public.foreign_tbl
          Output: (foreign_tbl.b + 15), foreign_tbl.ctid, foreign_tbl.*
          Remote SQL: SELECT a, b, ctid FROM public.base_tbl WHERE ((a < b)) FOR UPDATE
-(5 rows)
+ Query Identifier: 8931266465114127296
+(6 rows)
 
 UPDATE rw_view SET b = b + 15; -- ok
 SELECT * FROM foreign_tbl;
@@ -6606,7 +6815,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, "*VALUES*".column2
-(5 rows)
+ Query Identifier: 1200078339984392098
+(6 rows)
 
 INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6650,24 +6860,26 @@
 
 EXPLAIN (VERBOSE, COSTS OFF)
 INSERT INTO rw_view VALUES (0, 5);
-         QUERY PLAN          
------------------------------
+               QUERY PLAN               
+----------------------------------------
  Insert on public.parent_tbl
    ->  Result
          Output: 0, 5
-(3 rows)
+ Query Identifier: -6642537630085577570
+(4 rows)
 
 INSERT INTO rw_view VALUES (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
 DETAIL:  Failing row contains (10, 5).
 EXPLAIN (VERBOSE, COSTS OFF)
 INSERT INTO rw_view VALUES (0, 15);
-         QUERY PLAN          
------------------------------
+               QUERY PLAN               
+----------------------------------------
  Insert on public.parent_tbl
    ->  Result
          Output: 0, 15
-(3 rows)
+ Query Identifier: -6642537630085577570
+(4 rows)
 
 INSERT INTO rw_view VALUES (0, 15); -- ok
 SELECT * FROM foreign_tbl;
@@ -6686,7 +6898,8 @@
    ->  Foreign Scan on public.foreign_tbl parent_tbl_1
          Output: (parent_tbl_1.b + 5), parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
          Remote SQL: SELECT a, b, ctid FROM public.child_tbl WHERE ((a < b)) FOR UPDATE
-(6 rows)
+ Query Identifier: -1010867324745724273
+(7 rows)
 
 UPDATE rw_view SET b = b + 5; -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6701,7 +6914,8 @@
    ->  Foreign Scan on public.foreign_tbl parent_tbl_1
          Output: (parent_tbl_1.b + 15), parent_tbl_1.tableoid, parent_tbl_1.ctid, parent_tbl_1.*
          Remote SQL: SELECT a, b, ctid FROM public.child_tbl WHERE ((a < b)) FOR UPDATE
-(6 rows)
+ Query Identifier: -1010867324745724273
+(7 rows)
 
 UPDATE rw_view SET b = b + 15; -- ok
 SELECT * FROM foreign_tbl;
@@ -6719,7 +6933,8 @@
  Insert on public.parent_tbl
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, "*VALUES*".column2
-(3 rows)
+ Query Identifier: 7027133399725279359
+(4 rows)
 
 INSERT INTO rw_view VALUES (0, 15), (0, 5); -- should fail
 ERROR:  new row violates check option for view "rw_view"
@@ -6791,7 +7006,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, NULL::integer
-(5 rows)
+ Query Identifier: 752085299515844013
+(6 rows)
 
 insert into grem1 (a) values (1), (2);
 explain (verbose, costs off)
@@ -6803,7 +7019,8 @@
    ->  Foreign Scan on public.grem1
          Output: 22, ctid, grem1.*
          Remote SQL: SELECT a, b, ctid FROM public.gloc1 WHERE ((a = 2)) FOR UPDATE
-(5 rows)
+ Query Identifier: -3314091468020551348
+(6 rows)
 
 update grem1 set a = 22 where a = 2;
 select * from gloc1;
@@ -6849,7 +7066,8 @@
    Batch Size: 10
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1, NULL::integer
-(5 rows)
+ Query Identifier: 752085299515844013
+(6 rows)
 
 insert into grem1 (a) values (1), (2);
 select * from gloc1;
@@ -7133,7 +7351,8 @@
    ->  Foreign Scan on public.rem1
          Output: 10, ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: 738902569822177179
+(6 rows)
 
 UPDATE rem1 set f1 = 10;
 SELECT * from loc1;
@@ -7270,7 +7489,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1 WHERE false;     -- currently can't be pushed down
@@ -7281,7 +7501,8 @@
    ->  Result
          Output: ctid
          One-Time Filter: false
-(5 rows)
+ Query Identifier: -1524577194545422871
+(6 rows)
 
 -- Test with statement-level triggers
 CREATE TRIGGER trig_stmt_before
@@ -7294,7 +7515,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 9099817705539448648
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7303,7 +7525,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 DROP TRIGGER trig_stmt_before ON rem1;
 CREATE TRIGGER trig_stmt_after
@@ -7316,7 +7539,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 9099817705539448648
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7325,7 +7549,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 DROP TRIGGER trig_stmt_after ON rem1;
 -- Test with row-level ON INSERT triggers
@@ -7339,7 +7564,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 9099817705539448648
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7348,7 +7574,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 DROP TRIGGER trig_row_before_insert ON rem1;
 CREATE TRIGGER trig_row_after_insert
@@ -7361,7 +7588,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 9099817705539448648
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7370,7 +7598,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 DROP TRIGGER trig_row_after_insert ON rem1;
 -- Test with row-level ON UPDATE triggers
@@ -7386,7 +7615,8 @@
    ->  Foreign Scan on public.rem1
          Output: ''::text, ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: 9099817705539448648
+(6 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7395,7 +7625,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 DROP TRIGGER trig_row_before_update ON rem1;
 CREATE TRIGGER trig_row_after_update
@@ -7410,7 +7641,8 @@
    ->  Foreign Scan on public.rem1
          Output: ''::text, ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: 9099817705539448648
+(6 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can be pushed down
@@ -7419,7 +7651,8 @@
  Delete on public.rem1
    ->  Foreign Delete on public.rem1
          Remote SQL: DELETE FROM public.loc1
-(3 rows)
+ Query Identifier: -7442045751927567706
+(4 rows)
 
 DROP TRIGGER trig_row_after_update ON rem1;
 -- Test with row-level ON DELETE triggers
@@ -7433,7 +7666,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 9099817705539448648
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can't be pushed down
@@ -7444,7 +7678,8 @@
    ->  Foreign Scan on public.rem1
          Output: ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: -7442045751927567706
+(6 rows)
 
 DROP TRIGGER trig_row_before_delete ON rem1;
 CREATE TRIGGER trig_row_after_delete
@@ -7457,7 +7692,8 @@
  Update on public.rem1
    ->  Foreign Update on public.rem1
          Remote SQL: UPDATE public.loc1 SET f2 = ''::text
-(3 rows)
+ Query Identifier: 9099817705539448648
+(4 rows)
 
 EXPLAIN (verbose, costs off)
 DELETE FROM rem1;                 -- can't be pushed down
@@ -7468,7 +7704,8 @@
    ->  Foreign Scan on public.rem1
          Output: ctid, rem1.*
          Remote SQL: SELECT f1, f2, ctid FROM public.loc1 FOR UPDATE
-(5 rows)
+ Query Identifier: -7442045751927567706
+(6 rows)
 
 DROP TRIGGER trig_row_after_delete ON rem1;
 -- ===================================================================
@@ -7666,7 +7903,8 @@
                            ->  Foreign Scan on public.foo2 foo_2
                                  Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
-(23 rows)
+ Query Identifier: 1688402838933691773
+(24 rows)
 
 select * from bar where f1 in (select f1 from foo) for update;
  f1 | f2 
@@ -7704,7 +7942,8 @@
                            ->  Foreign Scan on public.foo2 foo_2
                                  Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
-(23 rows)
+ Query Identifier: -8331437685040083379
+(24 rows)
 
 select * from bar where f1 in (select f1 from foo) for share;
  f1 | f2 
@@ -7750,7 +7989,8 @@
                            ->  Foreign Scan on public.foo2child foo2_2
                                  Output: foo2_2.*, foo2_2.f1, foo2_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3 FROM public.loct4
-(24 rows)
+ Query Identifier: 6494140291810352518
+(25 rows)
 
 select * from bar where f1 in (select f1 from foo2) for share;
  f1 | f2 
@@ -7791,7 +8031,8 @@
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
                            ->  Seq Scan on public.foo2child foo2_2
                                  Output: foo2_2.*, foo2_2.f1, foo2_2.ctid, foo2_2.tableoid
-(23 rows)
+ Query Identifier: 6494140291810352518
+(24 rows)
 
 select * from bar where f1 in (select f1 from foo2) for share;
  f1 | f2 
@@ -7831,7 +8072,8 @@
                            ->  Foreign Scan on public.foo2 foo_2
                                  Output: foo_2.ctid, foo_2.f1, foo_2.*, foo_2.tableoid
                                  Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct1
-(25 rows)
+ Query Identifier: -7391583014571280438
+(26 rows)
 
 update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
 select tableoid::regclass, * from bar order by 1,2;
@@ -7883,7 +8125,8 @@
                      ->  Foreign Scan on public.foo2 foo_3
                            Output: ROW((foo_3.f1 + 3)), (foo_3.f1 + 3)
                            Remote SQL: SELECT f1 FROM public.loct1
-(30 rows)
+ Query Identifier: 7923182379041323986
+(31 rows)
 
 update bar set f2 = f2 + 100
 from
@@ -7936,7 +8179,8 @@
                            Remote SQL: SELECT f1, f2 FROM public.loct1 ORDER BY f1 ASC NULLS LAST
                ->  Index Only Scan using i_loct1_f1 on public.loct1
                      Output: loct1.f1
-(17 rows)
+ Query Identifier: 2656103446004778853
+(18 rows)
 
 select foo.f1, loct1.f1 from foo join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
  f1 | f1 
@@ -7976,7 +8220,8 @@
                            Remote SQL: SELECT f1, f2 FROM public.loct1 ORDER BY f1 ASC NULLS LAST
                ->  Index Only Scan using i_loct1_f1 on public.loct1
                      Output: loct1.f1
-(17 rows)
+ Query Identifier: 3801625334312465047
+(18 rows)
 
 select foo.f1, loct1.f1 from foo left join loct1 on (foo.f1 = loct1.f1) order by foo.f2 offset 10 limit 10;
  f1 | f1 
@@ -8021,7 +8266,8 @@
                Index Cond: (foo_1.f1 < 5)
          ->  Foreign Delete on public.foo2 foo_2
                Remote SQL: DELETE FROM public.loct1 WHERE ((f1 < 5)) RETURNING f1, f2
-(10 rows)
+ Query Identifier: 8926831198665894157
+(11 rows)
 
 delete from foo where f1 < 5 returning *;
  f1 | f2 
@@ -8048,7 +8294,8 @@
                      Output: bar_1.f2, bar_1.tableoid, bar_1.ctid, NULL::record
                ->  Foreign Update on public.bar2 bar_2
                      Remote SQL: UPDATE public.loct2 SET f2 = (f2 + 100) RETURNING f1, f2
-(11 rows)
+ Query Identifier: 7100337240827324228
+(12 rows)
 
 update bar set f2 = f2 + 100 returning *;
  f1 | f2  
@@ -8084,7 +8331,8 @@
                ->  Foreign Scan on public.bar2 bar_2
                      Output: bar_2.f2, bar_2.tableoid, bar_2.ctid, bar_2.*
                      Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 FOR UPDATE
-(12 rows)
+ Query Identifier: 8484015408612888015
+(13 rows)
 
 update bar set f2 = f2 + 100;
 NOTICE:  trig_row_before(23, skidoo) BEFORE ROW UPDATE ON bar2
@@ -8114,7 +8362,8 @@
          ->  Foreign Scan on public.bar2 bar_2
                Output: bar_2.tableoid, bar_2.ctid, bar_2.*
                Remote SQL: SELECT f1, f2, f3, ctid FROM public.loct2 WHERE ((f2 < 400)) FOR UPDATE
-(11 rows)
+ Query Identifier: 7970710837931284092
+(12 rows)
 
 delete from bar where f2 < 400;
 NOTICE:  trig_row_before(23, skidoo) BEFORE ROW DELETE ON bar2
@@ -8166,7 +8415,8 @@
                ->  Foreign Scan on public.remt2
                      Output: remt2.b, remt2.*, remt2.a
                      Remote SQL: SELECT a, b FROM public.loct2
-(19 rows)
+ Query Identifier: -2568132198070473844
+(20 rows)
 
 update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
  a |   b    | a |  b  
@@ -8198,7 +8448,8 @@
                ->  Foreign Scan on public.remt2
                      Output: remt2.*, remt2.a
                      Remote SQL: SELECT a, b FROM public.loct2
-(19 rows)
+ Query Identifier: 6607401851817770926
+(20 rows)
 
 delete from parent using remt2 where parent.a = remt2.a returning parent;
    parent   
@@ -8424,7 +8675,8 @@
          ->  Seq Scan on public.locp utrtest_2
                Output: 1, utrtest_2.tableoid, utrtest_2.ctid, NULL::record
                Filter: ((utrtest_2.a = 1) OR (utrtest_2.a = 2))
-(10 rows)
+ Query Identifier: 7397662223552116290
+(11 rows)
 
 -- The new values are concatenated with ' triggered !'
 update utrtest set a = 1 where a = 1 or a = 2 returning *;
@@ -8442,7 +8694,8 @@
    ->  Seq Scan on public.locp utrtest_1
          Output: 1, utrtest_1.tableoid, utrtest_1.ctid
          Filter: (utrtest_1.a = 2)
-(6 rows)
+ Query Identifier: 6816797242748653696
+(7 rows)
 
 -- The new values are concatenated with ' triggered !'
 update utrtest set a = 1 where a = 2 returning *;
@@ -8472,7 +8725,8 @@
                Remote SQL: UPDATE public.loct SET a = 1 RETURNING a, b
          ->  Seq Scan on public.locp utrtest_2
                Output: 1, utrtest_2.tableoid, utrtest_2.ctid, NULL::record
-(9 rows)
+ Query Identifier: -2966595080308235966
+(10 rows)
 
 update utrtest set a = 1 returning *;
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -8502,7 +8756,8 @@
                Output: "*VALUES*".*, "*VALUES*".column1
                ->  Values Scan on "*VALUES*"
                      Output: "*VALUES*".*, "*VALUES*".column1
-(18 rows)
+ Query Identifier: -4449493387354458167
+(19 rows)
 
 update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -8532,7 +8787,8 @@
                Output: 3, utrtest_1.tableoid, utrtest_1.ctid, NULL::record
          ->  Foreign Update on public.remp utrtest_2
                Remote SQL: UPDATE public.loct SET a = 3 RETURNING a, b
-(9 rows)
+ Query Identifier: -2966595080308235966
+(10 rows)
 
 update utrtest set a = 3 returning *; -- ERROR
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -8559,7 +8815,8 @@
                Output: "*VALUES*".*, "*VALUES*".column1
                ->  Values Scan on "*VALUES*"
                      Output: "*VALUES*".*, "*VALUES*".column1
-(18 rows)
+ Query Identifier: -4449493387354458167
+(19 rows)
 
 update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR
 ERROR:  cannot route tuples into foreign table to be updated "remp"
@@ -9386,7 +9643,8 @@
    Output: t1.a, fprt2.b, fprt2.c
    Relations: (public.ftprt1_p1 t1) LEFT JOIN (public.ftprt2_p1 fprt2)
    Remote SQL: SELECT r5.a, r6.b, r6.c FROM (public.fprt1_p1 r5 LEFT JOIN public.fprt2_p1 r6 ON (((r5.a = r6.b)) AND ((r5.b = r6.a)) AND ((r6.a < 10)))) WHERE ((r5.a < 10)) ORDER BY r5.a ASC NULLS LAST, r6.b ASC NULLS LAST, r6.c ASC NULLS LAST
-(4 rows)
+ Query Identifier: 5398657746086052941
+(5 rows)
 
 SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
  a | b |  c   
@@ -9621,7 +9879,8 @@
                ->  Foreign Scan on public.fpagg_tab_p3 t1_2
                      Output: t1_2.a, t1_2.*, t1_2.b
                      Remote SQL: SELECT a, b, c FROM public.pagg_tab_p3
-(25 rows)
+ Query Identifier: -1171355502960922287
+(26 rows)
 
 SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
  a  | count 
@@ -10127,7 +10386,8 @@
    ->  Function Scan on pg_catalog.generate_series i
          Output: i.i
          Function Call: generate_series(1, 10)
-(6 rows)
+ Query Identifier: -8678066568288010322
+(7 rows)
 
 INSERT INTO ftable SELECT * FROM generate_series(1, 10) i;
 INSERT INTO ftable SELECT * FROM generate_series(11, 31) i;
@@ -10162,7 +10422,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1
-(5 rows)
+ Query Identifier: -5521254496880664255
+(6 rows)
 
 INSERT INTO ftable VALUES (1), (2);
 SELECT COUNT(*) FROM ftable;
@@ -10184,7 +10445,8 @@
    Batch Size: 1
    ->  Values Scan on "*VALUES*"
          Output: "*VALUES*".column1
-(5 rows)
+ Query Identifier: -5521254496880664255
+(6 rows)
 
 INSERT INTO ftable VALUES (3), (4);
 NOTICE:  trig_row_before(23, skidoo) BEFORE ROW INSERT ON ftable
@@ -10482,7 +10744,8 @@
          ->  Async Foreign Scan on public.async_p2 async_pt_2
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE (((b % 100) = 0))
-(8 rows)
+ Query Identifier: -6806155339869915291
+(9 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b % 100 = 0;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10525,7 +10788,8 @@
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                Filter: (async_pt_2.b === 505)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(10 rows)
+ Query Identifier: 7965752012617288376
+(11 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10550,7 +10814,8 @@
                Output: async_pt_2.a, async_pt_2.b, ('AAA'::text || async_pt_2.c)
                Filter: (async_pt_2.b === 505)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(10 rows)
+ Query Identifier: -2926070611690568375
+(11 rows)
 
 INSERT INTO result_tbl SELECT a, b, 'AAA' || c FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10585,7 +10850,8 @@
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                Filter: (async_pt_3.b === 505)
                Remote SQL: SELECT a, b, c FROM public.base_tbl3
-(14 rows)
+ Query Identifier: 7965752012617288376
+(15 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10620,7 +10886,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                Filter: (async_pt_3.b === 505)
-(13 rows)
+ Query Identifier: 7965752012617288376
+(14 rows)
 
 INSERT INTO result_tbl SELECT * FROM async_pt WHERE b === 505;
 SELECT * FROM result_tbl ORDER BY a;
@@ -10659,7 +10926,8 @@
                      ->  Seq Scan on public.async_p3 t1_3
                            Output: t1_3.a, t1_3.b, t1_3.c
                            Filter: ((t1_3.b % 100) = 0)
-(20 rows)
+ Query Identifier: -5514538317704090566
+(21 rows)
 
 INSERT INTO join_tbl SELECT * FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
 SELECT * FROM join_tbl ORDER BY a1;
@@ -10722,7 +10990,8 @@
                      ->  Seq Scan on public.async_p3 t1_3
                            Output: t1_3.a, t1_3.b, t1_3.c
                            Filter: ((t1_3.b % 100) = 0)
-(20 rows)
+ Query Identifier: -1260175983256375494
+(21 rows)
 
 INSERT INTO join_tbl SELECT t1.a, t1.b, 'AAA' || t1.c, t2.a, t2.b, 'AAA' || t2.c FROM async_pt t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
 SELECT * FROM join_tbl ORDER BY a1;
@@ -10784,7 +11053,8 @@
                      Remote SQL: SELECT a, b, c FROM public.base_tbl2
                ->  Seq Scan on public.async_p3 t2_3
                      Output: t2_3.a, t2_3.b, t2_3.c
-(16 rows)
+ Query Identifier: -7469231109114135245
+(17 rows)
 
 INSERT INTO join_tbl SELECT * FROM async_p1 t1, async_pt t2 WHERE t1.a = t2.a AND t1.b = t2.b AND t1.b % 100 = 0;
 SELECT * FROM join_tbl ORDER BY a1;
@@ -10816,7 +11086,8 @@
    ->  Async Foreign Scan on public.async_p2 async_pt_2
          Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
          Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((a < 3000))
-(7 rows)
+ Query Identifier: -6321716235905283550
+(8 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM async_pt WHERE a < 2000;
@@ -10825,7 +11096,8 @@
  Foreign Scan on public.async_p1 async_pt
    Output: async_pt.a, async_pt.b, async_pt.c
    Remote SQL: SELECT a, b, c FROM public.base_tbl1 WHERE ((a < 2000))
-(3 rows)
+ Query Identifier: -6321716235905283550
+(4 rows)
 
 -- Test interaction of async execution with run-time partition pruning
 SET plan_cache_mode TO force_generic_plan;
@@ -10846,7 +11118,8 @@
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c
                Filter: (async_pt_2.b === $2)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((a < $1::integer))
-(11 rows)
+ Query Identifier: -5269643450260844646
+(12 rows)
 
 EXECUTE async_pt_query (3000, 505);
 SELECT * FROM result_tbl ORDER BY a;
@@ -10868,7 +11141,8 @@
                Output: async_pt_1.a, async_pt_1.b, async_pt_1.c
                Filter: (async_pt_1.b === $2)
                Remote SQL: SELECT a, b, c FROM public.base_tbl1 WHERE ((a < $1::integer))
-(7 rows)
+ Query Identifier: -5269643450260844646
+(8 rows)
 
 EXECUTE async_pt_query (2000, 505);
 SELECT * FROM result_tbl ORDER BY a;
@@ -10909,7 +11183,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
                Filter: (local_tbl.a = async_pt_3.a)
-(15 rows)
+ Query Identifier: 6988829259540480566
+(16 rows)
 
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 SELECT * FROM local_tbl, async_pt WHERE local_tbl.a = async_pt.a AND local_tbl.c = 'bar';
@@ -10957,7 +11232,8 @@
                ->  Async Foreign Scan on public.async_p2
                      Output: async_p2.a, async_p2.b, ('AAA'::text || async_p2.c)
                      Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((b < 10))
-(11 rows)
+ Query Identifier: 1554719607680019004
+(12 rows)
 
 INSERT INTO result_tbl
 (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
@@ -10996,7 +11272,8 @@
          ->  Async Foreign Scan on public.async_p2
                Output: async_p2.a, async_p2.b, ('AAA'::text || async_p2.c)
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((b < 10))
-(8 rows)
+ Query Identifier: -5113404573107014778
+(9 rows)
 
 INSERT INTO result_tbl
 (SELECT a, b, 'AAA' || c FROM async_p1 ORDER BY a LIMIT 10)
@@ -11044,7 +11321,8 @@
          One-Time Filter: (CURRENT_USER = SESSION_USER)
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.a, async_pt_3.b, async_pt_3.c
-(18 rows)
+ Query Identifier: 5148723189715496240
+(19 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 (SELECT * FROM async_p1 WHERE CURRENT_USER = SESSION_USER)
@@ -11065,7 +11343,8 @@
          ->  Foreign Scan on public.async_p2
                Output: async_p2.a, async_p2.b, async_p2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(13 rows)
+ Query Identifier: 5719907338269323930
+(14 rows)
 
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT * FROM ((SELECT * FROM async_p1 WHERE b < 10) UNION ALL (SELECT * FROM async_p2 WHERE b < 10)) s WHERE CURRENT_USER = SESSION_USER;
@@ -11084,7 +11363,8 @@
          ->  Foreign Scan on public.async_p2
                Output: async_p2.a, async_p2.b, async_p2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((b < 10))
-(13 rows)
+ Query Identifier: 2673039346718456755
+(14 rows)
 
 -- Test that pending requests are processed properly
 SET enable_mergejoin TO false;
@@ -11113,7 +11393,8 @@
          ->  Foreign Scan on public.async_p2 t2
                Output: t2.a, t2.b, t2.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl2
-(20 rows)
+ Query Identifier: 1120517863037951567
+(21 rows)
 
 SELECT * FROM async_pt t1, async_p2 t2 WHERE t1.a = t2.a AND t1.b === 505;
   a   |  b  |  c   |  a   |  b  |  c   
@@ -11148,7 +11429,8 @@
          ->  Async Foreign Scan on public.async_p2 async_pt_2
                Output: async_pt_2.a, async_pt_2.b, async_pt_2.c, $0
                Remote SQL: SELECT a, b, c FROM public.base_tbl2 WHERE ((a < 3000))
-(20 rows)
+ Query Identifier: 5181032427403370416
+(21 rows)
 
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 SELECT * FROM local_tbl t1 LEFT JOIN (SELECT *, (SELECT count(*) FROM async_pt WHERE a < 3000) FROM async_pt WHERE a < 3000) t2 ON t1.a = t2.a;
@@ -11192,7 +11474,8 @@
          ->  Seq Scan on public.async_p3 t1_3
                Output: t1_3.a, t1_3.b, t1_3.c
                Filter: (t1_3.b === 505)
-(14 rows)
+ Query Identifier: -6740241350741365543
+(15 rows)
 
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 SELECT * FROM async_pt t1 WHERE t1.b === 505 LIMIT 1;
@@ -11236,7 +11519,8 @@
          ->  Async Foreign Scan on public.remote_tbl
                Output: remote_tbl.a, remote_tbl.b, remote_tbl.c
                Remote SQL: SELECT a, b, c FROM public.base_tbl3
-(9 rows)
+ Query Identifier: 8318899860198477386
+(10 rows)
 
 INSERT INTO insert_tbl (SELECT * FROM local_tbl UNION ALL SELECT * FROM remote_tbl);
 SELECT * FROM insert_tbl ORDER BY a;
@@ -11275,7 +11559,8 @@
                      Filter: (async_pt_3.b === 505)
          ->  CTE Scan on t
                Output: t.a, t.b, t.c
-(23 rows)
+ Query Identifier: -8137119954856577190
+(24 rows)
 
 WITH t AS (UPDATE remote_tbl SET c = c || c RETURNING *)
 INSERT INTO join_tbl SELECT * FROM async_pt LEFT JOIN t ON (async_pt.a = t.a AND async_pt.b = t.b) WHERE async_pt.b === 505;
@@ -11313,7 +11598,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: (async_pt_3.c || async_pt_3.c), async_pt_3.tableoid, async_pt_3.ctid, NULL::record
                Filter: (async_pt_3.b = 0)
-(13 rows)
+ Query Identifier: 3845779190729440268
+(14 rows)
 
 UPDATE async_pt SET c = c || c WHERE b = 0 RETURNING *;
   a   | b |    c     
@@ -11340,7 +11626,8 @@
          ->  Seq Scan on public.async_p3 async_pt_3
                Output: async_pt_3.tableoid, async_pt_3.ctid
                Filter: (async_pt_3.b = 0)
-(13 rows)
+ Query Identifier: 6824863063883934398
+(14 rows)
 
 DELETE FROM async_pt WHERE b = 0 RETURNING *;
   a   | b |    c     
@@ -11393,7 +11680,8 @@
                        Remote SQL: SELECT NULL FROM public.base_tbl
                  ->  Async Foreign Scan on public.foreign_tbl2 foreign_tbl_2
                        Remote SQL: SELECT NULL FROM public.base_tbl
-(11 rows)
+ Query Identifier: -2343627952441965934
+(12 rows)
 
 SELECT a FROM base_tbl WHERE a IN (SELECT a FROM foreign_tbl);
  a 
